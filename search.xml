<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>DCL单例模式</title>
    <url>/2019/08/13/DCL%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="DCL单例模式"><a href="#DCL单例模式" class="headerlink" title="DCL单例模式"></a>DCL单例模式</h1><p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式，这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。<a id="more"></a></p>
<h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DCL单例模式：多线程环境下只存在一个对象。</span></span><br><span class="line"><span class="comment"> * 1.私有构造体：外部无法new对象</span></span><br><span class="line"><span class="comment"> * 2.私有静态属性：存储对象地址</span></span><br><span class="line"><span class="comment"> * 3.公共的静态方法：获取属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton_pattern</span> </span>&#123;</span><br><span class="line">	<span class="comment">//2.私有静态属性：存储对象地址</span></span><br><span class="line">	<span class="comment">//没有volatile其他线程可能访问没有初始化的对象</span></span><br><span class="line">	<span class="keyword">private</span>  <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton_pattern Sp;</span><br><span class="line">	<span class="comment">//1.私有构造体：外部无法new对象</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton_pattern</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//3.公共的静态方法：获取属性</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton_pattern <span class="title">getSp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//double checking</span></span><br><span class="line">		<span class="keyword">if</span>(Sp==<span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">synchronized</span>(Singleton_pattern.class) &#123;</span><br><span class="line">		<span class="keyword">if</span>(Sp==<span class="keyword">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			Sp=<span class="keyword">new</span> Singleton_pattern();</span><br><span class="line">		&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> Sp; <span class="comment">//不加volatile可能造成指令重排</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Thread t=<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">			System.out.println(Singleton_pattern.getSp());</span><br><span class="line">		&#125;) ;</span><br><span class="line">		t.start();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在 Serlvet 中获取请求信息</title>
    <url>/2020/02/20/GET%E8%AF%B7%E6%B1%82%E4%B8%8EPOST%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<p>在我们获取信息前需要了解GET请求和POST请求是HTTP请求的两种基本方法。<a id="more"></a></p>
<h1 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h1><p>使用GET请求方式传递参数：<br>①. 在浏览器地址栏中输入某个URL地址或单击网页上的一个超链接时，浏览器发出的HTTP请求消息的请求方式为GET。<br>②. 如果网页中的form表单元素的 method 属性被设置为了“GET”，浏览器提交这个FORM表单时生成的HTTP请求消息的请求方式也为GET。<br>③. 使用GET请求方式给WEB服务器传递参数的格式</p>
<h1 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h1><p>使用 POST 方式传递参数:<br>①. POST 请求方式主要用于向 WEB 服务器端程序提交 FORM 表单中的数据: form 表单的 method 置为 POST<br>②. POST 方式将各个表单字段元素及其数据作为 HTTP 消息的实体内容发送给 WEB 服务器，传送的数据量要比使用GET方式传送的数据量大得多。 </p>
<h1 id="如何在-Serlvet-中获取请求信息"><a href="#如何在-Serlvet-中获取请求信息" class="headerlink" title="如何在 Serlvet 中获取请求信息"></a>如何在 Serlvet 中获取请求信息</h1><p>  Servlet 的 service() 方法用于应答请求: 因为每次请求都会调用 service() 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest request, ServletResponse response)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">	<span class="comment">/* ServletRequest: 封装了请求信息. 可以从中获取到任何的请求信息.</span></span></span><br><span class="line"><span class="function"><span class="comment">	   ServletResponse: 封装了响应信息, 如果想给用户什么响应, 具体可以使用该接口的方法实现. </span></span></span><br><span class="line"><span class="function"><span class="comment">	   这两个接口的实现类都是服务器给予实现的, 并在服务器调用 service 方法时传入. </span></span></span><br><span class="line"><span class="function"><span class="comment">*/</span></span></span><br></pre></td></tr></table></figure>

<h2 id="ServletRequest的方法"><a href="#ServletRequest的方法" class="headerlink" title="ServletRequest的方法"></a>ServletRequest的方法</h2><p>html文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		 <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"loginServlet"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">		user: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user"</span>/&gt;</span></span><br><span class="line">		password:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		ceshi:</span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"ceshi"</span> <span class="attr">value</span>=<span class="string">"reading"</span>/&gt;</span>Reading</span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"ceshi"</span> <span class="attr">value</span>=<span class="string">"game"</span>/&gt;</span>Game</span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"ceshi"</span> <span class="attr">value</span>=<span class="string">"party"</span>/&gt;</span>Party</span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"ceshi"</span> <span class="attr">value</span>=<span class="string">"sport"</span>/&gt;</span>Sport</span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"ceshi"</span> <span class="attr">value</span>=<span class="string">"tv"</span>/&gt;</span>TV</span><br><span class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>xml文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>TTT.Login<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/loginServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">//获取参数名的值</span></span><br><span class="line">		String st = request.getParameter(<span class="string">"user"</span>);</span><br><span class="line">		System.out.println(st);</span><br><span class="line">		<span class="comment">//一个参数名对应多个参数值</span></span><br><span class="line">		String[] ceshi = request.getParameterValues(<span class="string">"ceshi"</span>);</span><br><span class="line">		<span class="keyword">for</span>(String st1 : ceshi) &#123;</span><br><span class="line">			System.out.println(st1);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//HttpServletRequest: 是 SerlvetRequest 的子接口. 针对于 HTTP 请求所定义. 里边包含了大量获取 HTTP 请求相关的方法.</span></span><br><span class="line">		HttpServletRequest httpServletRequest = (HttpServletRequest) request;</span><br><span class="line">		<span class="comment">//获取URL</span></span><br><span class="line">		String requestURI = httpServletRequest.getRequestURI();</span><br><span class="line">			System.out.println(requestURI); </span><br><span class="line">		<span class="comment">//获取请求方式</span></span><br><span class="line">		String method = httpServletRequest.getMethod();</span><br><span class="line">			System.out.println(method); </span><br><span class="line">		<span class="comment">//若是一个 GET 请求, 获取请求参数对应的那个字符串, 即 ? 后的那个字符串. </span></span><br><span class="line">		String queryString = httpServletRequest.getQueryString();</span><br><span class="line">			System.out.println(queryString);</span><br><span class="line">		<span class="comment">//获取请求的 Serlvet 的映射路径 </span></span><br><span class="line">		String servletPath = httpServletRequest.getServletPath();</span><br><span class="line">		   System.out.println(servletPath);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<blockquote><p>123<br>reading game party<br>/JavaWeb_Study/loginServlet<br>POST<br>null<br>/loginServlet</p>
</blockquote>

<h1 id="ServletResponse的方法"><a href="#ServletResponse的方法" class="headerlink" title="ServletResponse的方法"></a>ServletResponse的方法</h1><p>①getWriter(): 返回 PrintWriter 对象. 调用该对象的 print() 方法, 将把 print() 中的参数直接打印<br>到客户的浏览器上. getOutputStream()，一般用来输出二进制内容，例如图片。getWriter()，用来输出文本类型的内容，如HTML和纯文本。<br>文本输出情况下需设置编码类型，在调用response.getWriter()前，我们必须设置content type</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setContentType(<span class="string">"text/html; charset=GBK"</span>);</span><br></pre></td></tr></table></figure>

<p>②设置响应的内容类型: response.setContentType(“application/msword”);<br>③void sendRedirect(String location): 请求的重定向. (此方法为 HttpServletResponse 中定义.)</p>
<h1 id="请求的转发和重定向"><a href="#请求的转发和重定向" class="headerlink" title="请求的转发和重定向"></a>请求的转发和重定向</h1><p>本质区别: 请求的转发只发出了一次请求, 而重定向则发出了两次请求. </p>
<p>具体:</p>
<p>①. 请求的转发: 地址栏是初次发出请求的地址.<br>       请求的重定向: 地址栏不再是初次发出的请求地址. 地址栏为最后响应的那个地址 </p>
<p>②. 请求转发: 在最终的 Servlet 中, request 对象和中转的那个 request 是同一个对象.<br>       请求的重定向: 在最终的 Servlet 中, request 对象和中转的那个 request 不是同一个对象.       </p>
<p>③. 请求的转发: 只能转发给当前 WEB 应用的的资源<br>       请求的重定向: 可以重定向到任何资源. </p>
<p>④. 请求的转发: / 代表的是当前 WEB 应用的根目录<br>       请求的重定向: / 代表的是当前 WEB 站点的根目录. </p>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>GOF23设计模式（九）</title>
    <url>/2019/08/29/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B9%9D%EF%BC%89/</url>
    <content><![CDATA[<h1 id="GOF设计模式之享元模式-FlyWeight"><a href="#GOF设计模式之享元模式-FlyWeight" class="headerlink" title="GOF设计模式之享元模式(FlyWeight)"></a>GOF设计模式之享元模式(FlyWeight)</h1><p> 享元模式以共享的方式高效地支持大量细粒度对象的重用。<br> 享元对象能做到共享的关键是区分了内部状态和外部状态<br>  ·内部状态：可以共享，不会随环境变化而改变<br>  ·外部状态：不可以共享，会随环境变化而改变</p>
<a id="more"></a>
<h2 id="享元类"><a href="#享元类" class="headerlink" title="享元类"></a>享元类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 享元类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ChessFlyWeight</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String c)</span></span>;</span><br><span class="line">	<span class="function">String <span class="title">getColor</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(Coordinate c)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteChess</span> <span class="keyword">implements</span> <span class="title">ChessFlyWeight</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String color;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ConcreteChess</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.color = color;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String c)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.color=c;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> color;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(Coordinate c)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"棋子颜色"</span>+color);</span><br><span class="line">		System.out.println(<span class="string">"棋子位置"</span>+c.getX()+<span class="string">"-----"</span>+c.getY());</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="外部状态"><a href="#外部状态" class="headerlink" title="外部状态"></a>外部状态</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 外部状态UnSharedConcreteFlayWeight</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coordinate</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> x,y;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Coordinate</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.x = x;</span><br><span class="line">		<span class="keyword">this</span>.y = y;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.x = x;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> y;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setY</span><span class="params">(<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.y = y;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="享元工厂"><a href="#享元工厂" class="headerlink" title="享元工厂"></a>享元工厂</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 享元工厂</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChessFlyWeightFactory</span> </span>&#123;</span><br><span class="line">	<span class="comment">//享元池</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,ChessFlyWeight&gt; map=<span class="keyword">new</span> HashMap&lt;String,ChessFlyWeight&gt;();</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  ChessFlyWeight <span class="title">getChess</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(map.get(color)!=<span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> map.get(color);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			ChessFlyWeight cfw=<span class="keyword">new</span> ConcreteChess(color);</span><br><span class="line">			map.put(color,cfw);</span><br><span class="line">			<span class="keyword">return</span> cfw;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ChessFlyWeight chess1=ChessFlyWeightFactory.getChess(<span class="string">"黑色"</span>);</span><br><span class="line">		ChessFlyWeight chess2=ChessFlyWeightFactory.getChess(<span class="string">"黑色"</span>);</span><br><span class="line">		System.out.println(chess1);</span><br><span class="line">		System.out.println(chess2);</span><br><span class="line">		System.out.println(<span class="string">"外部状态处理"</span>);</span><br><span class="line">		chess1.display(<span class="keyword">new</span> Coordinate(<span class="number">12</span>,<span class="number">5</span>));</span><br><span class="line">		chess2.display(<span class="keyword">new</span> Coordinate(<span class="number">15</span>,<span class="number">7</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><blockquote><p>FlyWeight.ConcreteChess@15db9742<br>FlyWeight.ConcreteChess@15db9742<br>外部状态处理<br>棋子颜色黑色<br>棋子位置12—–5<br>棋子颜色黑色<br>棋子位置15—–7</p>
</blockquote>

]]></content>
      <categories>
        <category>GOF设计模式</category>
      </categories>
      <tags>
        <tag>GOF设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>GOF23设计模式（七）</title>
    <url>/2019/08/28/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%83%EF%BC%89/</url>
    <content><![CDATA[<h1 id="GOF设计模式之桥接-bridge-模式与组合模式-composite"><a href="#GOF设计模式之桥接-bridge-模式与组合模式-composite" class="headerlink" title="GOF设计模式之桥接(bridge)模式与组合模式(composite)"></a>GOF设计模式之桥接(bridge)模式与组合模式(composite)</h1> <a id="more"></a>
<h1 id="桥接-bridge-模式"><a href="#桥接-bridge-模式" class="headerlink" title="桥接(bridge)模式"></a>桥接(bridge)模式</h1><p>桥接模式可以取代多层继承的方案。多层继承违背了单一职责原则，复用性较差，类的个数也非常多。桥接模式可以极大的减少子类的个数，从而降低管理和维护的成本。<br>桥接模式极大提高了系统可扩展性，在两个变化维度中任意扩展一个维度，都不需要修改原有的系统，符合开闭原则,适合多维度开发。</p>
<h2 id="接口以及实现"><a href="#接口以及实现" class="headerlink" title="接口以及实现"></a>接口以及实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Brand</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lenovo</span> <span class="keyword">implements</span> <span class="title">Brand</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.print(<span class="string">"销售联想品牌"</span>);</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dell</span> <span class="keyword">implements</span> <span class="title">Brand</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.print(<span class="string">"销售戴尔品牌"</span>);</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="继承类"><a href="#继承类" class="headerlink" title="继承类"></a>继承类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 电脑类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">	<span class="keyword">protected</span> Brand brand;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">(Brand brand)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.brand = brand;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		brand.sale();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Desktop</span> <span class="keyword">extends</span> <span class="title">Computer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Desktop</span><span class="params">(Brand brand)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(brand);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>.sale();</span><br><span class="line">		System.out.println(<span class="string">"台式机"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Laptop</span> <span class="keyword">extends</span> <span class="title">Computer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Laptop</span><span class="params">(Brand brand)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(brand);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>.sale();</span><br><span class="line">		System.out.println(<span class="string">"笔记本"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测设"><a href="#测设" class="headerlink" title="测设"></a>测设</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//联想笔记本</span></span><br><span class="line">		Computer c=<span class="keyword">new</span> Laptop(<span class="keyword">new</span> Lenovo());</span><br><span class="line">		c.sale();</span><br><span class="line">		Computer c2=<span class="keyword">new</span> Desktop(<span class="keyword">new</span> Dell());</span><br><span class="line">		c2.sale();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><blockquote><p>销售联想品牌笔记本<br>销售戴尔品牌台式机</p>
</blockquote>

<h1 id="组合模式-composite"><a href="#组合模式-composite" class="headerlink" title="组合模式(composite)"></a>组合模式(composite)</h1><p> 抽象构件(Component)角色：定义了叶子和容器构件的共同点。<br> 叶子(Leaf)构件角色：无子节点。<br> 容器(Composite)构件角色：有容器特征，可以包含子节点。</p>
<h2 id="组合模式模板"><a href="#组合模式模板" class="headerlink" title="组合模式模板"></a>组合模式模板</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模板</span></span><br><span class="line"><span class="comment"> * 抽象组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//叶子组件</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Leaf</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//容器组件</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Composite</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Component c)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component c)</span></span>;</span><br><span class="line">	<span class="function">Component <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="模拟杀毒"><a href="#模拟杀毒" class="headerlink" title="模拟杀毒"></a>模拟杀毒</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AbstractFile</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">killVirus</span><span class="params">()</span></span>; <span class="comment">//杀毒</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageFile</span> <span class="keyword">implements</span> <span class="title">AbstractFile</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ImageFile</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">killVirus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"图像文件:"</span>+name+<span class="string">",进行查杀"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextFile</span> <span class="keyword">implements</span> <span class="title">AbstractFile</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TextFile</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">killVirus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"文本文件:"</span>+name+<span class="string">",进行查杀"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VideoFile</span> <span class="keyword">implements</span> <span class="title">AbstractFile</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">VideoFile</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">killVirus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"视频文件:"</span>+name+<span class="string">",进行查杀"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Folder</span> <span class="keyword">implements</span> <span class="title">AbstractFile</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="comment">//定义容器，用来存放本容器构建下的子节点</span></span><br><span class="line">	<span class="keyword">private</span> List&lt;AbstractFile&gt; list=<span class="keyword">new</span> ArrayList&lt;AbstractFile&gt;();</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Folder</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(AbstractFile file)</span> </span>&#123;</span><br><span class="line">		list.add(file);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(AbstractFile file)</span> </span>&#123;</span><br><span class="line">		list.remove(file);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> AbstractFile <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> list.get(index);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">killVirus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"文件夹:"</span>+name+<span class="string">",进行查杀"</span>);</span><br><span class="line">		<span class="keyword">for</span>(AbstractFile file : list) &#123;</span><br><span class="line">			file.killVirus();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		AbstractFile f1,f2,f3,f4;</span><br><span class="line">		Folder f,ff;</span><br><span class="line">		f=<span class="keyword">new</span> Folder(<span class="string">"我的收藏"</span>);</span><br><span class="line">		f1=<span class="keyword">new</span> ImageFile(<span class="string">"图片.jpg"</span>);</span><br><span class="line">		f2=<span class="keyword">new</span> TextFile(<span class="string">"C.txt"</span>);</span><br><span class="line">		f.add(f1); f.add(f2);</span><br><span class="line">		ff=<span class="keyword">new</span> Folder(<span class="string">"电影"</span>);</span><br><span class="line">		f3=<span class="keyword">new</span> VideoFile(<span class="string">"的士速递.mp4"</span>);</span><br><span class="line">		f4=<span class="keyword">new</span> VideoFile(<span class="string">"鬼怪疑云.mp4"</span>);</span><br><span class="line">		ff.add(f3); ff.add(f4);</span><br><span class="line">		f.add(ff);</span><br><span class="line">		f.killVirus();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><blockquote><p>文件夹:我的收藏,进行查杀<br>图像文件:图片.jpg,进行查杀<br>文本文件:C.txt,进行查杀<br>文件夹:电影,进行查杀<br>视频文件:的士速递.mp4,进行查杀<br>视频文件:鬼怪疑云.mp4,进行查杀</p>
</blockquote>
]]></content>
      <categories>
        <category>GOF设计模式</category>
      </categories>
      <tags>
        <tag>GOF设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Comparable接口测试</title>
    <url>/2019/07/27/Comparable%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h1 id="Comparable接口测试"><a href="#Comparable接口测试" class="headerlink" title="Comparable接口测试"></a>Comparable接口测试</h1><p>在写某些程序的时候我们往往需要排序，特别是是对容器进行排序的时候，往往是很麻烦的，这时候我们就可以继承Comparable接口中的compareTo方法来进行排序。<a id="more"></a></p>
<h1 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">ComparableTest</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">ComparableTest</span>&gt;</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	<span class="keyword">private</span> String sex;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ComparableTest</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">int</span> age, String sex)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">		<span class="keyword">this</span>.sex = sex;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		Map&lt;ComparableTest,String&gt; map=<span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">		map.put(<span class="keyword">new</span> ComparableTest(<span class="number">35</span>,<span class="string">"张三"</span>,<span class="number">25</span>,<span class="string">"男"</span>),<span class="string">"123"</span>);</span><br><span class="line">		map.put(<span class="keyword">new</span> ComparableTest(<span class="number">25</span>,<span class="string">"李四"</span>,<span class="number">20</span>,<span class="string">"男"</span>),<span class="string">"456"</span>);</span><br><span class="line">		map.put(<span class="keyword">new</span> ComparableTest(<span class="number">12</span>,<span class="string">"王小花"</span>,<span class="number">18</span>,<span class="string">"女"</span>),<span class="string">"678"</span>);</span><br><span class="line">		map.put(<span class="keyword">new</span> ComparableTest(<span class="number">12</span>,<span class="string">"李小四"</span>,<span class="number">14</span>,<span class="string">"男"</span>),<span class="string">"910"</span>);</span><br><span class="line">	<span class="keyword">for</span>(ComparableTest key:map.keySet()) &#123;</span><br><span class="line">		System.out.println(key+<span class="string">"---"</span>+map.get(key));</span><br><span class="line">	&#125;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">	<span class="keyword">return</span> <span class="string">"id:"</span>+id+<span class="string">",name:"</span>+name+<span class="string">",age:"</span>+age+<span class="string">",sex:"</span>+sex;</span><br><span class="line">&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(ComparableTest o)</span> </span>&#123;  <span class="comment">//负数：小于，0：等于，正数：大于</span></span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">this</span>.id&gt;o.id)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.id&lt;o.id)</span><br><span class="line">			<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.age&gt;o.age)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.age&lt;o.age)</span><br><span class="line">			<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><blockquote><p>id:12,name:李小四,age:14,sex:男—910<br>id:12,name:王小花,age:18,sex:女—678<br>id:25,name:李四,age:20,sex:男—456<br>id:35,name:张三,age:25,sex:男—123</p>
</blockquote>


]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>GOF23设计模式（三）</title>
    <url>/2019/08/25/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="GOF设计模式之工厂模式-Factory"><a href="#GOF设计模式之工厂模式-Factory" class="headerlink" title="GOF设计模式之工厂模式(Factory)"></a>GOF设计模式之工厂模式(Factory)</h1><p> 实例化对象，用工厂方法代替new操作。<br> 将选择实现类、创建对象统一管理和控制。从而将调用者跟我们的实现类解耦。</p>
<a id="more"></a>
<h1 id="工厂模式之简单工厂模式"><a href="#工厂模式之简单工厂模式" class="headerlink" title="工厂模式之简单工厂模式"></a>工厂模式之简单工厂模式</h1><h2 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">	 <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="继承接口实现方法"><a href="#继承接口实现方法" class="headerlink" title="继承接口实现方法"></a>继承接口实现方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"猫在叫"</span>);</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"狗在叫"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="工厂"><a href="#工厂" class="headerlink" title="工厂"></a>工厂</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animalfactory</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Animal <span class="title">get</span><span class="params">(String st)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(st.equals(<span class="string">"猫"</span>)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Cat();</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(st.equals(<span class="string">"狗"</span>)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Dog();</span><br><span class="line">		&#125;<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单工厂模式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123; <span class="comment">//调用者</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Animal c1=Animalfactory.get(<span class="string">"猫"</span>);</span><br><span class="line">		Animal c2=Animalfactory.get(<span class="string">"狗"</span>);</span><br><span class="line">		c1.run();</span><br><span class="line">		c2.run();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="GOF设计模式之工厂方法模式"><a href="#GOF设计模式之工厂方法模式" class="headerlink" title="GOF设计模式之工厂方法模式"></a>GOF设计模式之工厂方法模式</h1><h2 id="接口实现-1"><a href="#接口实现-1" class="headerlink" title="接口实现"></a>接口实现</h2><h3 id="Animal接口"><a href="#Animal接口" class="headerlink" title="Animal接口"></a>Animal接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">	 <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Creatfactory接口"><a href="#Creatfactory接口" class="headerlink" title="Creatfactory接口"></a>Creatfactory接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Creatfactory</span> </span>&#123;</span><br><span class="line">	<span class="function">Animal <span class="title">creatAnimal</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="继承接口实现方法-1"><a href="#继承接口实现方法-1" class="headerlink" title="继承接口实现方法"></a>继承接口实现方法</h2><h3 id="继承Animal"><a href="#继承Animal" class="headerlink" title="继承Animal"></a>继承Animal</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"猫在叫"</span>);</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"狗在叫"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="继承Creatfactory"><a href="#继承Creatfactory" class="headerlink" title="继承Creatfactory"></a>继承Creatfactory</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Catfactory</span> <span class="keyword">implements</span> <span class="title">Creatfactory</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Animal <span class="title">creatAnimal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Cat();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dogfactory</span> <span class="keyword">implements</span> <span class="title">Creatfactory</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Animal <span class="title">creatAnimal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Dog();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工厂方法模式</span></span><br><span class="line"><span class="comment"> *	</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Animal c1=<span class="keyword">new</span> Catfactory().creatAnimal();</span><br><span class="line">		Animal c2=<span class="keyword">new</span> Dogfactory().creatAnimal();</span><br><span class="line">		c1.run();</span><br><span class="line">		c2.run();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="GOF设计模式之抽象工厂模式"><a href="#GOF设计模式之抽象工厂模式" class="headerlink" title="GOF设计模式之抽象工厂模式"></a>GOF设计模式之抽象工厂模式</h1><h2 id="接口实现-2"><a href="#接口实现-2" class="headerlink" title="接口实现"></a>接口实现</h2><h3 id="Tyre接口"><a href="#Tyre接口" class="headerlink" title="Tyre接口"></a>Tyre接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Tyre</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">revolve</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Seat接口"><a href="#Seat接口" class="headerlink" title="Seat接口"></a>Seat接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Seat</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">massage</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Engine接口"><a href="#Engine接口" class="headerlink" title="Engine接口"></a>Engine接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Engine</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CarFactory接口"><a href="#CarFactory接口" class="headerlink" title="CarFactory接口"></a>CarFactory接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">	<span class="function">Engine <span class="title">creatEngine</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">Seat <span class="title">creatSeat</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">Tyre <span class="title">creatTyre</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="继承接口实现方法-2"><a href="#继承接口实现方法-2" class="headerlink" title="继承接口实现方法"></a>继承接口实现方法</h2><h3 id="继承Tyre"><a href="#继承Tyre" class="headerlink" title="继承Tyre"></a>继承Tyre</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LuxuryTyre</span> <span class="keyword">implements</span> <span class="title">Tyre</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">revolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"磨损小"</span>);</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LowTyre</span> <span class="keyword">implements</span> <span class="title">Tyre</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">revolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"磨损大"</span>);</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="继承Seat"><a href="#继承Seat" class="headerlink" title="继承Seat"></a>继承Seat</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LuxurySeat</span> <span class="keyword">implements</span> <span class="title">Seat</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">massage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"可以按摩"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LowSeat</span> <span class="keyword">implements</span> <span class="title">Seat</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">massage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"不可以按摩"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="继承Engine"><a href="#继承Engine" class="headerlink" title="继承Engine"></a>继承Engine</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LuxuryEngine</span> <span class="keyword">implements</span> <span class="title">Engine</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"跑的快"</span>);		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"启动快"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LowEngine</span> <span class="keyword">implements</span> <span class="title">Engine</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"跑的慢"</span>);		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"启动慢"</span>);</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="继承CarFactory"><a href="#继承CarFactory" class="headerlink" title="继承CarFactory"></a>继承CarFactory</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LuxuryCarFactory</span> <span class="keyword">implements</span> <span class="title">CarFactory</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Engine <span class="title">creatEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> LuxuryEngine();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Seat <span class="title">creatSeat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> LuxurySeat();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Tyre <span class="title">creatTyre</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> LuxuryTyre();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LowCarFactory</span> <span class="keyword">implements</span> <span class="title">CarFactory</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Engine <span class="title">creatEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> LowEngine();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Seat <span class="title">creatSeat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> LowSeat();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Tyre <span class="title">creatTyre</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> LowTyre();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		CarFactory factory=<span class="keyword">new</span> LuxuryCarFactory();</span><br><span class="line">		Engine e=factory.creatEngine();</span><br><span class="line">		CarFactory factory1=<span class="keyword">new</span> LowCarFactory();</span><br><span class="line">		Engine e1=factory1.creatEngine();</span><br><span class="line">		e.run();</span><br><span class="line">		e.start();</span><br><span class="line">		e1.run();</span><br><span class="line">		e1.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h4 id="·核心本质"><a href="#·核心本质" class="headerlink" title="·核心本质"></a>·核心本质</h4><p>   – 实例化对象，用工厂方法代替new操作。<br>   – 将选择实现类、创建对象统一管理和控制。从而将调用者跟我们的实现类解耦。</p>
<h4 id="·工厂模式"><a href="#·工厂模式" class="headerlink" title="·工厂模式"></a>·工厂模式</h4><p>  – 简单工厂模式<br>      ·用来生产同一等级结构中的任意产品。（对于增加新的产品，需要修改已有代码）<br>  – 工厂方法模式<br>      ·用来生产同一等级结构中的固定产品。（支持增加任意产品）<br>  – 抽象工厂模式<br>      ·用来生产不同产品族的全部产品。（对于增加的新产品，无能为力：支持增加产品族） </p>
<h4 id="·工厂模式要点"><a href="#·工厂模式要点" class="headerlink" title="·工厂模式要点"></a>·工厂模式要点</h4><p>  – 简单工厂模式（静态工厂模式）<br>      ·虽然某种程度不符合设计原则，但实际应用最多。<br>  – 工厂方法模式<br>      ·不修改已有类的前提下，通过增加新的工厂类实现扩展。<br>  – 抽象工厂模式<br>      ·不可以增加产品，可以增加产品族。</p>
]]></content>
      <categories>
        <category>GOF设计模式</category>
      </categories>
      <tags>
        <tag>GOF设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>GOF23设计模式（一）</title>
    <url>/2019/08/24/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="GOF设计模式之单例模式（一）"><a href="#GOF设计模式之单例模式（一）" class="headerlink" title="GOF设计模式之单例模式（一）"></a>GOF设计模式之单例模式（一）</h1><p>单例模式：保证一个类只有一个实例，并且提供一个访问该实例的全局访问点。<a id="more"></a></p>
<h1 id="单例模式之饿汉式"><a href="#单例模式之饿汉式" class="headerlink" title="单例模式之饿汉式"></a>单例模式之饿汉式</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例模式：饿汉式</span></span><br><span class="line"><span class="comment"> * 直接在初始化类的时候把对象new出来，如果不用对象就会浪费空间。</span></span><br><span class="line"><span class="comment"> * 线程安全，调用效率高，不需要同步锁。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Singleton1 instance=<span class="keyword">new</span> Singleton1();</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.println(Singleton1.getInstance());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="单例模式之懒汉式（双重检查锁结合版）"><a href="#单例模式之懒汉式（双重检查锁结合版）" class="headerlink" title="单例模式之懒汉式（双重检查锁结合版）"></a>单例模式之懒汉式（双重检查锁结合版）</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例模式：懒汉式</span></span><br><span class="line"><span class="comment"> * 多线程调用模式下需要在对象上加上volatile，避免指令重排导致对象多次new。</span></span><br><span class="line"><span class="comment"> * 线程安全，调用效率不高，需要同步锁,不浪费资源，使用时在new对象。</span></span><br><span class="line"><span class="comment"> * 这个写法改进了懒汉式与双重检查锁结合。</span></span><br><span class="line"><span class="comment"> * volatile：每当子线程某一语句要用到volatile变量时，</span></span><br><span class="line"><span class="comment"> * 都会从主线程重新拷贝一份，这样就保证子线程的会跟主线程的一致。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span> </span>&#123;</span><br><span class="line">	<span class="comment">//多线程模式下加上volatile</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton2 instance;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(instance==<span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="comment">//double checking 提高效率。</span></span><br><span class="line">			<span class="keyword">synchronized</span>(Singleton2.class)&#123;</span><br><span class="line">				<span class="keyword">if</span>(instance==<span class="keyword">null</span>) &#123;</span><br><span class="line">					instance=<span class="keyword">new</span> Singleton2();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">			System.out.println(Singleton2.getInstance());</span><br><span class="line">		&#125;).start() ;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="单例模式之双重检查锁式"><a href="#单例模式之双重检查锁式" class="headerlink" title="单例模式之双重检查锁式"></a>单例模式之双重检查锁式</h1><p>不推荐使用，在使用时由于编译器优化原因和JVM底层内部模型原因，偶尔会出问题，指令重排，在JDK1.5后加入volatile可以解决此问题，详见本博客的懒汉式写法。</p>
]]></content>
      <categories>
        <category>GOF设计模式</category>
      </categories>
      <tags>
        <tag>GOF设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>GOF23设计模式（二）</title>
    <url>/2019/08/25/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="GOF设计模式之单例模式（二）"><a href="#GOF设计模式之单例模式（二）" class="headerlink" title="GOF设计模式之单例模式（二）"></a>GOF设计模式之单例模式（二）</h1><p>静态内部类式和枚举式<a id="more"></a></p>
<h1 id="单例模式之静态内部类"><a href="#单例模式之静态内部类" class="headerlink" title="单例模式之静态内部类"></a>单例模式之静态内部类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例模式：静态内部类</span></span><br><span class="line"><span class="comment"> * 线程安全，效率高，并发高效和延迟加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton3</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonInstance</span></span>&#123;</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton3 instance=<span class="keyword">new</span> Singleton3();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Singleton3 <span class="title">getinstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> SingletonInstance.instance;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="keyword">new</span> Singleton3().getinstance());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="单例模式之枚举式"><a href="#单例模式之枚举式" class="headerlink" title="单例模式之枚举式"></a>单例模式之枚举式</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例模式：枚举实现</span></span><br><span class="line"><span class="comment"> * 效率高，没有延迟加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//1.避免了反射和反序列化的漏洞。2.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton4 &#123;</span><br><span class="line">	<span class="comment">//枚举元素本身就是单例对象</span></span><br><span class="line">	INSTANCE;</span><br><span class="line">	<span class="comment">//添加自己需要的代码</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SingletonOperation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="单例模式总结"><a href="#单例模式总结" class="headerlink" title="单例模式总结"></a>单例模式总结</h1><h2 id="主要："><a href="#主要：" class="headerlink" title="主要："></a>主要：</h2><p>– 饿汉式（线程安全，调用效率高，不能延时加载）<br>– 懒汉式（线程安全，调用效率不高，能延时加载）</p>
<h2 id="其它："><a href="#其它：" class="headerlink" title="其它："></a>其它：</h2><p>– 双重检查锁式（由于JVM底层内部模型原因，偶尔会出问题，不推荐使用）<br>– 静态内部类式（线程安全，调用效率高，可以延时加载）<br>– 枚举式（线程安全，调用效率高，不能延时加载）</p>
<h2 id="如何选用"><a href="#如何选用" class="headerlink" title="如何选用"></a>如何选用</h2><h3 id="单例对象占用资源少，不需要延时加载："><a href="#单例对象占用资源少，不需要延时加载：" class="headerlink" title="单例对象占用资源少，不需要延时加载："></a>单例对象占用资源少，不需要延时加载：</h3><p>– 枚举式好于饿汉式</p>
<h3 id="单例对象占用资源大，需要延时加载："><a href="#单例对象占用资源大，需要延时加载：" class="headerlink" title="单例对象占用资源大，需要延时加载："></a>单例对象占用资源大，需要延时加载：</h3><p>– 静态内部类式好于懒汉式</p>
<h2 id="以上除了（枚举式）不能被反射和反序列化破解以外，其它都能破解"><a href="#以上除了（枚举式）不能被反射和反序列化破解以外，其它都能破解" class="headerlink" title="以上除了（枚举式）不能被反射和反序列化破解以外，其它都能破解"></a>以上除了（枚举式）不能被反射和反序列化破解以外，其它都能破解</h2><h3 id="如何防止反射的破解（简单了解）"><a href="#如何防止反射的破解（简单了解）" class="headerlink" title="如何防止反射的破解（简单了解）"></a>如何防止反射的破解（简单了解）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在私有构造器上加上检查，不为空的时候手动抛出异常</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(instance!=<span class="keyword">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="如何防止反序列化破解（简单了解）"><a href="#如何防止反序列化破解（简单了解）" class="headerlink" title="如何防止反序列化破解（简单了解）"></a>如何防止反序列化破解（简单了解）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在反序列化时调用此方法直接返回instance，不需要在单独创建对象。</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span><span class="keyword">throws</span> ObjectStreamException </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> instance;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>GOF设计模式</category>
      </categories>
      <tags>
        <tag>GOF设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>GOF23设计模式（八）</title>
    <url>/2019/08/28/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%85%AB%EF%BC%89/</url>
    <content><![CDATA[<h1 id="GOF设计模式之装饰模式-decorator-与外观模式-Facade"><a href="#GOF设计模式之装饰模式-decorator-与外观模式-Facade" class="headerlink" title="GOF设计模式之装饰模式(decorator)与外观模式(Facade)"></a>GOF设计模式之装饰模式(decorator)与外观模式(Facade)</h1><a id="more"></a>
<h1 id="装饰模式-decorator"><a href="#装饰模式-decorator" class="headerlink" title="装饰模式(decorator)"></a>装饰模式(decorator)</h1><p>动态的为一个对象增加新功能。<br>装饰模式是一种用于代替继承的技术，无需通过继承增加子类就能扩展对象的新功能。使用对象的关联关系代替继承关系，更加灵活，同时避免类型体系的快速膨胀。</p>
<h2 id="抽象组件与实现"><a href="#抽象组件与实现" class="headerlink" title="抽象组件与实现"></a>抽象组件与实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象组件</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICar</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ConcreteComponent 具体构件角色(真实对象)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">ICar</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"在陆地上跑"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Decorator 装饰角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperCar</span> <span class="keyword">implements</span> <span class="title">ICar</span></span>&#123;</span><br><span class="line">	<span class="keyword">protected</span> ICar car;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SuperCar</span><span class="params">(ICar car)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.car = car;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		car.move();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ConcreteDecorator 具体装饰角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyCar</span> <span class="keyword">extends</span> <span class="title">SuperCar</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">FlyCar</span><span class="params">(ICar car)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(car);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"在天上飞"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>.move();</span><br><span class="line">		fly();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WaterCar</span> <span class="keyword">extends</span> <span class="title">SuperCar</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">WaterCar</span><span class="params">(ICar car)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(car);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"在水上漂"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>.move();</span><br><span class="line">		swim();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AiCar</span> <span class="keyword">extends</span> <span class="title">SuperCar</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">AiCar</span><span class="params">(ICar car)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(car);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">automove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"自动驾驶"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>.move();</span><br><span class="line">		automove();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ublic <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Car car=<span class="keyword">new</span> Car();</span><br><span class="line">		car.move();</span><br><span class="line">		FlyCar flycar=<span class="keyword">new</span> FlyCar(car);</span><br><span class="line">		System.out.println(<span class="string">"---添加功能---"</span>);</span><br><span class="line">		flycar.move();</span><br><span class="line">		WaterCar watercar=<span class="keyword">new</span> WaterCar(flycar);</span><br><span class="line">		System.out.println(<span class="string">"---添加功能---"</span>);</span><br><span class="line">		watercar.move();;</span><br><span class="line">		System.out.println(<span class="string">"---拥有功能---"</span>);</span><br><span class="line">		AiCar aicar=<span class="keyword">new</span> AiCar(<span class="keyword">new</span> FlyCar(<span class="keyword">new</span> WaterCar(car)));</span><br><span class="line">		aicar.move();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><blockquote><p>在陆地上跑<br>—添加功能—<br>在陆地上跑<br>在天上飞<br>—添加功能—<br>在陆地上跑<br>在天上飞<br>在水上漂<br>—拥有功能—<br>在陆地上跑<br>在水上漂<br>在天上飞<br>自动驾驶</p>
</blockquote>

<h1 id="外观模式-Facade"><a href="#外观模式-Facade" class="headerlink" title="外观模式(Facade)"></a>外观模式(Facade)</h1><p>这个模式经常在编程中使用，不管你听没听过这个名字，此模式就是对用户隐藏程序运行细节，只提供一个接口就可以实现。</p>
<h2 id="代码-代码来自博客"><a href="#代码-代码来自博客" class="headerlink" title="代码(代码来自博客)"></a>代码(代码来自博客)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//https://blog.csdn.net/u012361379/article/details/88820428  码农日常</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FacadeTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Facade f = <span class="keyword">new</span> Facade();</span><br><span class="line">        f.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//外观角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SubSystem01 obj1 = <span class="keyword">new</span> SubSystem01();</span><br><span class="line">    <span class="keyword">private</span> SubSystem02 obj2 = <span class="keyword">new</span> SubSystem02();</span><br><span class="line">    <span class="keyword">private</span> SubSystem03 obj3 = <span class="keyword">new</span> SubSystem03();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        obj1.method1();</span><br><span class="line">        obj2.method2();</span><br><span class="line">        obj3.method3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子系统角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSystem01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子系统01的method1()被调用！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子系统角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSystem02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子系统02的method2()被调用！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子系统角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSystem03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子系统03的method3()被调用！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><blockquote><p>子系统01的method1()被调用！<br>子系统02的method2()被调用！<br>子系统03的method3()被调用！</p>
</blockquote>

]]></content>
      <categories>
        <category>GOF设计模式</category>
      </categories>
      <tags>
        <tag>GOF设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>GOF23设计模式（六）</title>
    <url>/2019/08/27/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%85%AD%EF%BC%89/</url>
    <content><![CDATA[<h1 id="GOF设计模式之适配器-Adapter-模式与代理模式-Proxy-pattern"><a href="#GOF设计模式之适配器-Adapter-模式与代理模式-Proxy-pattern" class="headerlink" title="GOF设计模式之适配器(Adapter)模式与代理模式(Proxy pattern)"></a>GOF设计模式之适配器(Adapter)模式与代理模式(Proxy pattern)</h1><a id="more"></a>
<h1 id="适配器-Adapter-模式"><a href="#适配器-Adapter-模式" class="headerlink" title="适配器(Adapter)模式"></a>适配器(Adapter)模式</h1><p> 将一个类的接口转换成客户希望的另外一个接口，Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以在一起工作。</p>
<h2 id="需要被适配的类"><a href="#需要被适配的类" class="headerlink" title="需要被适配的类"></a>需要被适配的类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需要被适配的类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"可以完成需求功能"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 适配器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">implements</span> <span class="title">Target</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Adaptee adaptee;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Adapter</span><span class="params">(Adaptee adaptee)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.adaptee = adaptee;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">qust</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		adaptee.request();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">qust</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Target t)</span> </span>&#123;</span><br><span class="line">		t.qust();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Client c=<span class="keyword">new</span> Client();</span><br><span class="line">		Target t=<span class="keyword">new</span> Adapter(<span class="keyword">new</span> Adaptee());</span><br><span class="line">		c.test(t);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><blockquote><p>可以完成需求功能</p>
</blockquote>

<h1 id="代理模式-Proxy-pattern"><a href="#代理模式-Proxy-pattern" class="headerlink" title="代理模式(Proxy pattern)"></a>代理模式(Proxy pattern)</h1><p> 通过代理，控制对对象的访问。</p>
<h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><h3 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Star</span> </span>&#123;</span><br><span class="line">	<span class="comment">//面谈</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">confer</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="comment">//签合同</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">signContract</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="comment">//订票</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">bookTicket</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="comment">//唱歌</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="comment">//收钱</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">collectMoney</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="真实对象"><a href="#真实对象" class="headerlink" title="真实对象"></a>真实对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealStar</span> <span class="keyword">implements</span> <span class="title">Star</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"RealStar.confer()"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">signContract</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"RealStar.signContract()"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bookTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"RealStar.bookTicket()"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"RealStar(本人唱歌).sing()"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">collectMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"RealStar.collectMoney()"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代理对象"><a href="#代理对象" class="headerlink" title="代理对象"></a>代理对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyStar</span> <span class="keyword">implements</span> <span class="title">Star</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Star star;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ProxyStar</span><span class="params">(Star star)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.star = star;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"ProxyStar.confer()"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">signContract</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"ProxyStar.signContract()"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bookTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"ProxyStar.bookTicket()"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//唱歌需歌手本人唱</span></span><br><span class="line">		star.sing();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">collectMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"ProxyStar.collectMoney()"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Star real=<span class="keyword">new</span> RealStar();</span><br><span class="line">		Star proxy=<span class="keyword">new</span> ProxyStar(real);</span><br><span class="line">		proxy.confer();</span><br><span class="line">		proxy.signContract();</span><br><span class="line">		proxy.bookTicket();</span><br><span class="line">		proxy.sing();</span><br><span class="line">		proxy.collectMoney();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h4><blockquote><p>ProxyStar.confer()<br>ProxyStar.signContract()<br>ProxyStar.bookTicket()<br>RealStar(本人唱歌).sing()<br>ProxyStar.collectMoney()</p>
</blockquote>

<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>类接口和RealStar方法与上方一致</p>
<h3 id="实现InvocationHandler接口"><a href="#实现InvocationHandler接口" class="headerlink" title="实现InvocationHandler接口"></a>实现InvocationHandler接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StarHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line">	Star realStar;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">StarHandler</span><span class="params">(Star realStar)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.realStar = realStar;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">		Object object=<span class="keyword">null</span>;</span><br><span class="line">		<span class="comment">//这里有点问题</span></span><br><span class="line">		<span class="keyword">if</span>(method.getName().equals(<span class="string">"sing"</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			object=method.invoke(realStar, args);</span><br><span class="line">		&#125;	</span><br><span class="line">		<span class="keyword">return</span> object;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Star realStar=<span class="keyword">new</span> RealStar();</span><br><span class="line">		StarHandler handler=<span class="keyword">new</span> StarHandler(realStar);</span><br><span class="line">		Star proxy=(Star) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="keyword">new</span> Class[] &#123;Star.class&#125;, handler);</span><br><span class="line">		proxy.sing();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h4><blockquote><p>RealStar(本人唱歌).sing()</p>
</blockquote>
]]></content>
      <categories>
        <category>GOF设计模式</category>
      </categories>
      <tags>
        <tag>GOF设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>GOF23设计模式（十二）</title>
    <url>/2019/08/30/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="GOF设计模式之解释器模式-Interpreter-与访问者模式-Visitor"><a href="#GOF设计模式之解释器模式-Interpreter-与访问者模式-Visitor" class="headerlink" title="GOF设计模式之解释器模式(Interpreter)与访问者模式(Visitor)"></a>GOF设计模式之解释器模式(Interpreter)与访问者模式(Visitor)</h1><p>这两个模式了解即可，可自行百度，谷歌。<a id="more"></a></p>
<h1 id="解释器模式-Interpreter"><a href="#解释器模式-Interpreter" class="headerlink" title="解释器模式(Interpreter)"></a>解释器模式(Interpreter)</h1><p>用于描述如何构成一个简单的语言解释器，主要用于使用面向对象语言开发的编译器和解释器设计。</p>
<h1 id="访问者模式-Visitor"><a href="#访问者模式-Visitor" class="headerlink" title="访问者模式(Visitor)"></a>访问者模式(Visitor)</h1><p>表示一个作用于对象结构中的各元素的操作，它使我们可以在不改变元素的类的前提下</p>
]]></content>
      <categories>
        <category>GOF设计模式</category>
      </categories>
      <tags>
        <tag>GOF设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>GOF23设计模式（五）</title>
    <url>/2019/08/26/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    <content><![CDATA[<h1 id="GOF设计模式之原型模式（prototype）"><a href="#GOF设计模式之原型模式（prototype）" class="headerlink" title="GOF设计模式之原型模式（prototype）"></a>GOF设计模式之原型模式（prototype）</h1><p>具有深克隆和浅克隆两种方法,使用原型模式需要继承Cloneable,原型模式一般用在需要new对象要耗费大量资源时使用。（反序列可以实现深克隆，本文章没有实现）</p>
<a id="more"></a>
<h1 id="浅克隆"><a href="#浅克隆" class="headerlink" title="浅克隆"></a>浅克隆</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sheep</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> Date birthday;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">super</span>.clone();<span class="comment">//Object的clone方法</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Sheep</span><span class="params">(String name, Date birthday)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> birthday;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Sheep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原型模式（浅克隆）共同使用对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">		Date date=<span class="keyword">new</span> Date(<span class="number">12345</span>);</span><br><span class="line">		Sheep s1 =<span class="keyword">new</span> Sheep(<span class="string">"张三"</span>,date);</span><br><span class="line">		Sheep s2=(Sheep)s1.clone();</span><br><span class="line">		System.out.println(s1.getBirthday());</span><br><span class="line">		date.setTime(<span class="number">564321654</span>);</span><br><span class="line">		System.out.println(<span class="string">"修改后"</span>+s1.getBirthday());</span><br><span class="line">		System.out.println(s2.getBirthday());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><blockquote><p>修改时间对象会影响克隆的对象<br>Thu Jan 01 08:00:12 CST 1970<br>修改后Wed Jan 07 20:45:21 CST 1970<br>Wed Jan 07 20:45:21 CST 1970</p>
</blockquote>

<h1 id="深克隆"><a href="#深克隆" class="headerlink" title="深克隆"></a>深克隆</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sheep</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> Date birthday;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">		Sheep s= (Sheep)<span class="keyword">super</span>.clone();</span><br><span class="line">		<span class="comment">//深复制</span></span><br><span class="line">		s.birthday=(Date) <span class="keyword">this</span>.birthday.clone();<span class="comment">//把属性也克隆</span></span><br><span class="line">		<span class="keyword">return</span> s;<span class="comment">//返回s;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Sheep</span><span class="params">(String name, Date birthday)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> birthday;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Sheep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原型模式（深克隆）克隆对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">		Date date=<span class="keyword">new</span> Date(<span class="number">12345</span>);</span><br><span class="line">		Sheep s1 =<span class="keyword">new</span> Sheep(<span class="string">"张三"</span>,date);</span><br><span class="line">		Sheep s2=(Sheep)s1.clone();</span><br><span class="line">		System.out.println(s1.getBirthday());</span><br><span class="line">		date.setTime(<span class="number">564321654</span>);</span><br><span class="line">		System.out.println(<span class="string">"修改后"</span>+s1.getBirthday());</span><br><span class="line">		System.out.println(s2.getBirthday());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><blockquote><p>修改时间对象不会影响克隆的对象<br>Thu Jan 01 08:00:12 CST 1970<br>修改后Wed Jan 07 20:45:21 CST 1970<br>Thu Jan 01 08:00:12 CST 1970</p>
</blockquote>
]]></content>
      <categories>
        <category>GOF设计模式</category>
      </categories>
      <tags>
        <tag>GOF设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>GOF23设计模式（十三）</title>
    <url>/2019/08/30/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="GOF设计模式之策略模式-Strategy-与模板方法模式-template-method"><a href="#GOF设计模式之策略模式-Strategy-与模板方法模式-template-method" class="headerlink" title="GOF设计模式之策略模式(Strategy)与模板方法模式(template method)"></a>GOF设计模式之策略模式(Strategy)与模板方法模式(template method)</h1><a id="more"></a>
<h1 id="策略模式-Strategy"><a href="#策略模式-Strategy" class="headerlink" title="策略模式(Strategy)"></a>策略模式(Strategy)</h1><p>分离算法，选择实现。</p>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">(<span class="keyword">double</span> standardPrice)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现接口方法"><a href="#实现接口方法" class="headerlink" title="实现接口方法"></a>实现接口方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewCustomerFewStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">(<span class="keyword">double</span> standardPrice)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"不打折，原价"</span>);</span><br><span class="line">		<span class="keyword">return</span> standardPrice;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewCustomerManyStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">(<span class="keyword">double</span> standardPrice)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"打九折"</span>);</span><br><span class="line">		<span class="keyword">return</span> standardPrice*<span class="number">0.9</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OldCustomerFewStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">(<span class="keyword">double</span> standardPrice)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"打八五折"</span>);</span><br><span class="line">		<span class="keyword">return</span> standardPrice*<span class="number">0.85</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OldCustomerManyStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">(<span class="keyword">double</span> standardPrice)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"打八折"</span>);</span><br><span class="line">		<span class="keyword">return</span> standardPrice*<span class="number">0.8</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="负责交互"><a href="#负责交互" class="headerlink" title="负责交互"></a>负责交互</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 负责和具体的策略类交互</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Strategy strategy;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStrategy</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pringPrice</span><span class="params">(<span class="keyword">double</span> s)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"您的价格是："</span>+strategy.getPrice(s));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Strategy s1 =<span class="keyword">new</span> OldCustomerManyStrategy();</span><br><span class="line">		Context ctx =<span class="keyword">new</span> Context(s1);</span><br><span class="line">		ctx.pringPrice(<span class="number">864</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><blockquote><p>打八折<br>您的价格是：691.2</p>
</blockquote>

<h1 id="模板方法模式-template-method"><a href="#模板方法模式-template-method" class="headerlink" title="模板方法模式(template method)"></a>模板方法模式(template method)</h1><p>定义一个操作中的算法骨架，将某些步骤延迟到子类中实现。</p>
<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BankTemplateMethod</span> </span>&#123;</span><br><span class="line">	<span class="comment">//具体方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"取号排队"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">transact</span><span class="params">()</span></span>;<span class="comment">//办理具体的业务 钩子方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">evaluate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"反馈评分"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123; <span class="comment">//模板方法</span></span><br><span class="line">		<span class="keyword">this</span>.takeNumber();</span><br><span class="line">		<span class="keyword">this</span>.transact();</span><br><span class="line">		<span class="keyword">this</span>.evaluate();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		BankTemplateMethod btm=<span class="keyword">new</span> DrawMoney();</span><br><span class="line">		btm.process();</span><br><span class="line">		<span class="comment">//匿名内部类</span></span><br><span class="line">		BankTemplateMethod btm1 = <span class="keyword">new</span> BankTemplateMethod() &#123;</span><br><span class="line">			</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transact</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				System.out.println(<span class="string">"我要存钱"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		btm1.process();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrawMoney</span> <span class="keyword">extends</span> <span class="title">BankTemplateMethod</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transact</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"我要取款！！！"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><blockquote><p>取号排队<br>我要取款！！！<br>反馈评分<br>取号排队<br>我要存钱<br>反馈评分</p>
</blockquote>
]]></content>
      <categories>
        <category>GOF设计模式</category>
      </categories>
      <tags>
        <tag>GOF设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>GOF23设计模式（十一）</title>
    <url>/2019/08/30/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="GOF设计模式之中介者模式-Mediator-与命令模式-Command"><a href="#GOF设计模式之中介者模式-Mediator-与命令模式-Command" class="headerlink" title="GOF设计模式之中介者模式(Mediator)与命令模式(Command)"></a>GOF设计模式之中介者模式(Mediator)与命令模式(Command)</h1><a id="more"></a>
<h1 id="中介者模式-Mediator"><a href="#中介者模式-Mediator" class="headerlink" title="中介者模式(Mediator)"></a>中介者模式(Mediator)</h1><p>定义一个中介对象来封装一系列对象之间的交互，使原有对象之间的耦合松散，且可以独立地改变它们之间的交互。中介者模式又叫调停模式，它是迪米特法则的典型应用。</p>
<h2 id="职责接口"><a href="#职责接口" class="headerlink" title="职责接口"></a>职责接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">register</span><span class="params">(String dname,Department d)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">command</span><span class="params">(String dname)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="部门接口"><a href="#部门接口" class="headerlink" title="部门接口"></a>部门接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//同事类接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">selfAction</span><span class="params">()</span></span>; <span class="comment">//做本部门的事情</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">outAction</span><span class="params">()</span></span>; <span class="comment">//发出申请</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="研发部"><a href="#研发部" class="headerlink" title="研发部"></a>研发部</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Development</span> <span class="keyword">implements</span> <span class="title">Department</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Mediator m; <span class="comment">//持有中介者的引用</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Development</span><span class="params">(Mediator m)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.m = m;</span><br><span class="line">		m.register(<span class="string">"development"</span>, <span class="keyword">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selfAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"开发项目"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"研发部汇报工作"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="财务部"><a href="#财务部" class="headerlink" title="财务部"></a>财务部</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Finacial</span> <span class="keyword">implements</span> <span class="title">Department</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Mediator m; <span class="comment">//持有中介者的引用</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Finacial</span><span class="params">(Mediator m)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.m = m;</span><br><span class="line">		m.register(<span class="string">"finacial"</span>, <span class="keyword">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selfAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"数钱"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"财务部汇报工作"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="市场部"><a href="#市场部" class="headerlink" title="市场部"></a>市场部</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Market</span> <span class="keyword">implements</span> <span class="title">Department</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Mediator m; <span class="comment">//持有中介者的引用</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Market</span><span class="params">(Mediator m)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.m = m;</span><br><span class="line">		m.register(<span class="string">"market"</span>, <span class="keyword">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selfAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"调研接项目"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"市场部汇报工作"</span>);</span><br><span class="line">		m.command(<span class="string">"finacial"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总管理"><a href="#总管理" class="headerlink" title="总管理"></a>总管理</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">President</span> <span class="keyword">implements</span> <span class="title">Mediator</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Map&lt;String,Department&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(String dname, Department d)</span> </span>&#123;</span><br><span class="line">		map.put(dname,d);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">command</span><span class="params">(String dname)</span> </span>&#123;</span><br><span class="line">		map.get(dname).selfAction();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Mediator m=<span class="keyword">new</span> President();</span><br><span class="line">		Market market=<span class="keyword">new</span> Market(m);</span><br><span class="line">		Development devp=<span class="keyword">new</span> Development(m);</span><br><span class="line">		Finacial f=<span class="keyword">new</span> Finacial(m);</span><br><span class="line">		market.selfAction();</span><br><span class="line">		market.outAction();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><blockquote><p>调研接项目<br>市场部汇报工作<br>数钱</p>
</blockquote>

<h1 id="命令模式-Command"><a href="#命令模式-Command" class="headerlink" title="命令模式(Command)"></a>命令模式(Command)</h1><p>将请求封装为一个对象，从而使我们可用不同的请求对客户端进行参数化。</p>
<h2 id="执行者"><a href="#执行者" class="headerlink" title="执行者"></a>执行者</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 真正的执行者</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"Receiver.action()"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="命令接口及实现"><a href="#命令接口及实现" class="headerlink" title="命令接口及实现"></a>命令接口及实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回一个结果为空的方法</span></span><br><span class="line"><span class="comment"> * 根据实际需求可以写多个不同方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommand</span> <span class="keyword">implements</span> <span class="title">Command</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Receiver receiver;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ConcreteCommand</span><span class="params">(Receiver receiver)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//自行添加相关处理</span></span><br><span class="line">		receiver.action();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Invoke</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Command command;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Invoke</span><span class="params">(Command command)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.command = command;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//业务方法，调用命令类的方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		command.execute();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Command c=<span class="keyword">new</span> ConcreteCommand(<span class="keyword">new</span> Receiver());</span><br><span class="line">		Invoke i=<span class="keyword">new</span> Invoke(c);</span><br><span class="line">		i.call();</span><br><span class="line">		<span class="comment">//new Receiver().action();</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><blockquote><p>Receiver.action()</p>
</blockquote>


]]></content>
      <categories>
        <category>GOF设计模式</category>
      </categories>
      <tags>
        <tag>GOF设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>GOF23设计模式（十五）</title>
    <url>/2019/08/31/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89/</url>
    <content><![CDATA[<h1 id="GOF设计模式之备忘录模式-memento"><a href="#GOF设计模式之备忘录模式-memento" class="headerlink" title="GOF设计模式之备忘录模式(memento)"></a>GOF设计模式之备忘录模式(memento)</h1><a id="more"></a>
<h1 id="备忘录模式-memento"><a href="#备忘录模式-memento" class="headerlink" title="备忘录模式(memento)"></a>备忘录模式(memento)</h1><p>保存某个对象内部状态的拷贝，这样以后就可以将该对象恢复到原先的状态。</p>
<h2 id="源发器"><a href="#源发器" class="headerlink" title="源发器"></a>源发器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 源发器类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//备忘录操作</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> EmpMemento <span class="title">memento</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> EmpMemento(<span class="keyword">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//进行数据恢复，恢复成指定备忘录对象的值</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recovery</span><span class="params">(EmpMemento mmt)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name=mmt.getName();</span><br><span class="line">		<span class="keyword">this</span>.age=mmt.getAge();</span><br><span class="line">		<span class="keyword">this</span>.salary=mmt.getSalary();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">		<span class="keyword">this</span>.salary = salary;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> salary;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.salary = salary;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="备忘录"><a href="#备忘录" class="headerlink" title="备忘录"></a>备忘录</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  备忘录类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpMemento</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">EmpMemento</span><span class="params">(Emp e)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name=e.getName();</span><br><span class="line">		<span class="keyword">this</span>.age=e.getAge();</span><br><span class="line">		<span class="keyword">this</span>.salary=e.getSalary();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> salary;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.salary = salary;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="负责人"><a href="#负责人" class="headerlink" title="负责人"></a>负责人</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 负责人类</span></span><br><span class="line"><span class="comment"> * 管理备忘录对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CareTaker</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> EmpMemento memento;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> EmpMemento <span class="title">getMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> memento;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(EmpMemento memento)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.memento = memento;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		CareTaker taker = <span class="keyword">new</span> CareTaker();</span><br><span class="line">		Emp emp = <span class="keyword">new</span> Emp(<span class="string">"小四"</span>,<span class="number">19</span>,<span class="number">1000</span>);</span><br><span class="line">		System.out.println(<span class="string">"Once"</span>+<span class="string">"年龄："</span>+emp.getAge()+<span class="string">"，姓名："</span>+emp.getName()</span><br><span class="line">		+<span class="string">"，工资："</span>+emp.getSalary());</span><br><span class="line">		taker.setMemento(emp.memento());<span class="comment">//记录一次</span></span><br><span class="line">		emp.setAge(<span class="number">20</span>);emp.setName(<span class="string">"大四"</span>);emp.setSalary(<span class="number">1200</span>);</span><br><span class="line">		System.out.println(<span class="string">"Twice"</span>+<span class="string">"年龄："</span>+emp.getAge()+<span class="string">"，姓名："</span>+emp.getName()</span><br><span class="line">		+<span class="string">"，工资："</span>+emp.getSalary());</span><br><span class="line">		emp.recovery(taker.getMemento());<span class="comment">//恢复</span></span><br><span class="line">		System.out.println(<span class="string">"-----"</span>+<span class="string">"年龄："</span>+emp.getAge()+<span class="string">"，姓名："</span>+emp.getName()</span><br><span class="line">		+<span class="string">"，工资："</span>+emp.getSalary());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><blockquote><p>Once年龄：19，姓名：小四，工资：1000.0<br>Twice年龄：20，姓名：大四，工资：1200.0<br>—–年龄：19，姓名：小四，工资：1000.0</p>
</blockquote>

]]></content>
      <categories>
        <category>GOF设计模式</category>
      </categories>
      <tags>
        <tag>GOF设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>GOF23设计模式（十）</title>
    <url>/2019/08/29/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%EF%BC%89/</url>
    <content><![CDATA[<h1 id="GOF设计模式之责任链模式-Chain-of-Responsibility-与迭代器模式-iterator"><a href="#GOF设计模式之责任链模式-Chain-of-Responsibility-与迭代器模式-iterator" class="headerlink" title="GOF设计模式之责任链模式(Chain of Responsibility)与迭代器模式(iterator)"></a>GOF设计模式之责任链模式(Chain of Responsibility)与迭代器模式(iterator)</h1><a id="more"></a>
<h1 id="责任链模式-Chain-of-Responsibility"><a href="#责任链模式-Chain-of-Responsibility" class="headerlink" title="责任链模式(Chain of Responsibility)"></a>责任链模式(Chain of Responsibility)</h1><p>将能够处理同一类请求的对象连成一条链，所提交的请求沿着链传递，<br>这里写一个公司请假流程管理。</p>
<h2 id="管理类"><a href="#管理类" class="headerlink" title="管理类"></a>管理类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Leader</span> </span>&#123;</span><br><span class="line">	<span class="keyword">protected</span> String name;</span><br><span class="line">	<span class="keyword">protected</span> Leader nextLeader; <span class="comment">//责任链上的后继对象</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Leader</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//设定责任链上的后继对象</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNextLeader</span><span class="params">(Leader nextLeader)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.nextLeader = nextLeader;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//处理请求的核心代码</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handlequest</span><span class="params">(LeaveRequest request)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="请假请求"><a href="#请假请求" class="headerlink" title="请假请求"></a>请假请求</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeaveRequest</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String empName;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> LeaveDays;</span><br><span class="line">	<span class="keyword">private</span> String reason;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">LeaveRequest</span><span class="params">(String empName, <span class="keyword">int</span> leaveDays, String reason)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.empName = empName;</span><br><span class="line">		LeaveDays = leaveDays;</span><br><span class="line">		<span class="keyword">this</span>.reason = reason;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getEmpName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> empName;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmpName</span><span class="params">(String empName)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.empName = empName;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLeaveDays</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> LeaveDays;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeaveDays</span><span class="params">(<span class="keyword">int</span> leaveDays)</span> </span>&#123;</span><br><span class="line">		LeaveDays = leaveDays;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getReason</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> reason;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReason</span><span class="params">(String reason)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.reason = reason;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="主任类"><a href="#主任类" class="headerlink" title="主任类"></a>主任类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> <span class="keyword">extends</span> <span class="title">Leader</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(name);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlequest</span><span class="params">(LeaveRequest request)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(request.getLeaveDays()&lt;<span class="number">3</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">"员工："</span>+request.getEmpName()+<span class="string">"请假，天数："</span>+request.getLeaveDays()</span><br><span class="line">			+<span class="string">",理由："</span>+request.getReason());</span><br><span class="line">			System.out.println(<span class="string">"主任："</span>+<span class="keyword">this</span>.name+<span class="string">"批准"</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">this</span>.nextLeader!=<span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">this</span>.nextLeader.handlequest(request);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="经理类"><a href="#经理类" class="headerlink" title="经理类"></a>经理类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Leader</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(name);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlequest</span><span class="params">(LeaveRequest request)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(request.getLeaveDays()&lt;<span class="number">10</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">"员工："</span>+request.getEmpName()+<span class="string">"请假，天数："</span>+request.getLeaveDays()</span><br><span class="line">			+<span class="string">",理由："</span>+request.getReason());</span><br><span class="line">			System.out.println(<span class="string">"经理："</span>+<span class="keyword">this</span>.name+<span class="string">"批准"</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">this</span>.nextLeader!=<span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">this</span>.nextLeader.handlequest(request);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总经理类"><a href="#总经理类" class="headerlink" title="总经理类"></a>总经理类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneralManager</span> <span class="keyword">extends</span> <span class="title">Leader</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">GeneralManager</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(name);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlequest</span><span class="params">(LeaveRequest request)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(request.getLeaveDays()&lt;<span class="number">30</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">"员工："</span>+request.getEmpName()+<span class="string">"请假，天数："</span>+request.getLeaveDays()</span><br><span class="line">			+<span class="string">",理由："</span>+request.getReason());</span><br><span class="line">			System.out.println(<span class="string">"总经理："</span>+<span class="keyword">this</span>.name+<span class="string">"批准"</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">"不通过"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Leader a=<span class="keyword">new</span> Director(<span class="string">"张三"</span>);</span><br><span class="line">		Leader b=<span class="keyword">new</span> Manager(<span class="string">"李四"</span>);</span><br><span class="line">		Leader c=<span class="keyword">new</span> GeneralManager(<span class="string">"张三"</span>);</span><br><span class="line">		<span class="comment">//组织责任链对象关系</span></span><br><span class="line">		a.setNextLeader(b);</span><br><span class="line">		b.setNextLeader(c);</span><br><span class="line">		<span class="comment">//开始请假</span></span><br><span class="line">		LeaveRequest req1=<span class="keyword">new</span> LeaveRequest(<span class="string">"老王"</span>, <span class="number">15</span>, <span class="string">"回乡下老家探亲"</span>);</span><br><span class="line">		a.handlequest(req1);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><blockquote><p>员工：老王请假，天数：15,理由：回乡下老家探亲<br>总经理：张三批准</p>
</blockquote>

<h1 id="迭代器模式-iterator"><a href="#迭代器模式-iterator" class="headerlink" title="迭代器模式(iterator)"></a>迭代器模式(iterator)</h1><p> 提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。</p>
<h2 id="迭代器接口"><a href="#迭代器接口" class="headerlink" title="迭代器接口"></a>迭代器接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义的迭代器接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyIterator</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">first</span><span class="params">()</span></span>; <span class="comment">//将游标指向第一个元素</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">next</span><span class="params">()</span></span>; <span class="comment">//将游标指向下一个元素</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>; <span class="comment">//判断游标是否存在下一个元素</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">isFirst</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">islast</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">Object <span class="title">getCurrentObj</span><span class="params">()</span></span>; <span class="comment">//获取当前游标指向的对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自定义聚合类"><a href="#自定义聚合类" class="headerlink" title="自定义聚合类"></a>自定义聚合类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义聚合类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteMyAggregate</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> List&lt;Object&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObject</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.list.add(obj);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObject</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.list.remove(obj);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> list;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;Object&gt; list)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.list = list;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//获得迭代器</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> MyIterator <span class="title">createIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ConcreteIterator();	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 内部类定义迭代器，可以使用外部类实现</span></span><br><span class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteIterator</span> <span class="keyword">implements</span> <span class="title">MyIterator</span></span>&#123;</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">int</span> cursor; <span class="comment">//定义游标用于记录遍历时的位置 </span></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">first</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			cursor=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(cursor&lt;list.size()) &#123;</span><br><span class="line">				cursor++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(cursor&lt;list.size()) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> cursor==<span class="number">0</span>?<span class="keyword">true</span>:<span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">islast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> cursor==(list.size()-<span class="number">1</span>)?<span class="keyword">true</span>:<span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> Object <span class="title">getCurrentObj</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> list.get(cursor);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ConcreteMyAggregate cma=<span class="keyword">new</span> ConcreteMyAggregate();</span><br><span class="line">		cma.addObject(<span class="string">"a"</span>);</span><br><span class="line">		cma.addObject(<span class="string">"b"</span>);</span><br><span class="line">		cma.addObject(<span class="string">"c"</span>);</span><br><span class="line">		cma.addObject(<span class="string">"d"</span>);</span><br><span class="line">		cma.addObject(<span class="string">"e"</span>);</span><br><span class="line">		MyIterator iter=cma.createIterator();</span><br><span class="line">		<span class="keyword">while</span>(iter.hasNext()) &#123;</span><br><span class="line">			System.out.println(iter.getCurrentObj());</span><br><span class="line">			iter.next();		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><blockquote><p>a<br>b<br>c<br>d<br>e</p>
</blockquote>
]]></content>
      <categories>
        <category>GOF设计模式</category>
      </categories>
      <tags>
        <tag>GOF设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>GOF23设计模式（十四）</title>
    <url>/2019/08/31/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<h1 id="GOF设计模式之状态模式-state-与观察者模式-Observer"><a href="#GOF设计模式之状态模式-state-与观察者模式-Observer" class="headerlink" title="GOF设计模式之状态模式(state)与观察者模式(Observer)"></a>GOF设计模式之状态模式(state)与观察者模式(Observer)</h1><a id="more"></a>
<h1 id="状态模式-state"><a href="#状态模式-state" class="headerlink" title="状态模式(state)"></a>状态模式(state)</h1><p>用于解决系统中复杂对象的状态转换以及不同状态下行为的封装问题。</p>
<h2 id="状态接口"><a href="#状态接口" class="headerlink" title="状态接口"></a>状态接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 空闲状态</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FreeState</span> <span class="keyword">implements</span> <span class="title">State</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"房间空闲没人住"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 预订状态</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookedState</span> <span class="keyword">implements</span> <span class="title">State</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"房间已预订"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 已入住状态</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckedInState</span> <span class="keyword">implements</span> <span class="title">State</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"房间已入住"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 房间状态管理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeContext</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> State state;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(State s)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"修改状态"</span>);</span><br><span class="line">		state=s;</span><br><span class="line">		state.handle();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		 HomeContext c=<span class="keyword">new</span> HomeContext();</span><br><span class="line">		 c.setState(<span class="keyword">new</span> FreeState());</span><br><span class="line">		 </span><br><span class="line">		 c.setState(<span class="keyword">new</span> BookedState());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><blockquote><p>修改状态<br>房间空闲没人住<br>修改状态<br>房间已预订</p>
</blockquote>

<h1 id="观察者模式-Observer"><a href="#观察者模式-Observer" class="headerlink" title="观察者模式(Observer)"></a>观察者模式(Observer)</h1><p>主要用于1:N的通知。当一个对象的状态变化时，他需要及时告知一系列对象，令他们做出响应。</p>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Subject subject)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现接口-1"><a href="#实现接口-1" class="headerlink" title="实现接口"></a>实现接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverA</span> <span class="keyword">implements</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> Mystate; <span class="comment">//与目标对象保持一致</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Subject subject)</span> </span>&#123;</span><br><span class="line">		Mystate=((ConcreteSubject)subject).getState();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMystate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Mystate;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMystate</span><span class="params">(<span class="keyword">int</span> mystate)</span> </span>&#123;</span><br><span class="line">		Mystate = mystate;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="观察者容器"><a href="#观察者容器" class="headerlink" title="观察者容器"></a>观察者容器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">	<span class="keyword">protected</span> List&lt;Observer&gt; list =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Observer obs)</span> </span>&#123;</span><br><span class="line">		list.add(obs);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer obs)</span> </span>&#123;</span><br><span class="line">		list.remove(obs);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//通知所有观察者更新状态</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyAllObserver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (Observer observer : list) &#123;</span><br><span class="line">			observer.update(<span class="keyword">this</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> <span class="keyword">extends</span> <span class="title">Subject</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> state;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> state;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.state = state;</span><br><span class="line">		<span class="comment">//值发生了变化</span></span><br><span class="line">		<span class="keyword">this</span>.notifyAllObserver();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//目标对象</span></span><br><span class="line">		ConcreteSubject subject =<span class="keyword">new</span> ConcreteSubject();</span><br><span class="line">		<span class="comment">//观察者</span></span><br><span class="line">		ObserverA a = <span class="keyword">new</span> ObserverA();</span><br><span class="line">		ObserverA b = <span class="keyword">new</span> ObserverA();</span><br><span class="line">		ObserverA c = <span class="keyword">new</span> ObserverA();</span><br><span class="line">		<span class="comment">//添加到容器里去</span></span><br><span class="line">		subject.register(a);</span><br><span class="line">		subject.register(b);</span><br><span class="line">		subject.register(c);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//改变subjec状态</span></span><br><span class="line">		subject.setState(<span class="number">200</span>);</span><br><span class="line">		<span class="comment">//查看观察者状态</span></span><br><span class="line">		System.out.println(a.getMystate());</span><br><span class="line">		System.out.println(b.getMystate());</span><br><span class="line">		System.out.println(c.getMystate());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h2><blockquote><p>200<br>200<br>200</p>
</blockquote>
]]></content>
      <categories>
        <category>GOF设计模式</category>
      </categories>
      <tags>
        <tag>GOF设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>GOF23设计模式（完）</title>
    <url>/2019/08/31/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%AE%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="GOF23设计模式总结"><a href="#GOF23设计模式总结" class="headerlink" title="GOF23设计模式总结"></a>GOF23设计模式总结</h1><h1 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h1><p> 单例模式、工厂模式、建造者模式、原型模式。</p>
<h1 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h1><p> 装饰模式、享元模式、桥接模式、组合模式、外观模式、代理模式、适配器模式。</p>
<h1 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h1><p> 模板方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、策略模式、状态模式、责任链模式、访问者模式。</p>
<a id="more"></a>
<h1 id="创建型模式-1"><a href="#创建型模式-1" class="headerlink" title="创建型模式"></a>创建型模式</h1><p>  关注对象的创建过程。</p>
<h2 id="单例模式-Singleton"><a href="#单例模式-Singleton" class="headerlink" title="单例模式(Singleton)"></a>单例模式(Singleton)</h2><p> 保证一个类只有一个实例，并且提供一个访问该实例的全局访问点。</p>
<h2 id="工厂模式-Factory"><a href="#工厂模式-Factory" class="headerlink" title="工厂模式(Factory)"></a>工厂模式(Factory)</h2><p> 实例化对象，用工厂方法代替new操作。<br> 将选择实现类、创建对象统一管理和控制。从而将调用者跟我们的实现类解耦。</p>
<h2 id="建造者模式-Builder"><a href="#建造者模式-Builder" class="headerlink" title="建造者模式(Builder)"></a>建造者模式(Builder)</h2><p> 具体的建造者类之间是相互独立的，容易扩展。</p>
<h2 id="原型模式-Prototype"><a href="#原型模式-Prototype" class="headerlink" title="原型模式(Prototype)"></a>原型模式(Prototype)</h2><p> 扩展性好，由于写原型模式的时候使用了抽象原型类，在客户端进行编程的时候可以将具体的原型类通过配置进行读取。</p>
<h1 id="结构型模式-1"><a href="#结构型模式-1" class="headerlink" title="结构型模式"></a>结构型模式</h1><p>关注对象和类的组织。</p>
<h2 id="适配器-Adapter-模式"><a href="#适配器-Adapter-模式" class="headerlink" title="适配器(Adapter)模式"></a>适配器(Adapter)模式</h2><p> 将一个类的接口转换成客户希望的另外一个接口，Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以在一起工作。</p>
<h2 id="代理模式-Proxy-pattern"><a href="#代理模式-Proxy-pattern" class="headerlink" title="代理模式(Proxy pattern)"></a>代理模式(Proxy pattern)</h2><p> 通过代理，控制对对象的访问。</p>
<h2 id="桥接模式-bridge"><a href="#桥接模式-bridge" class="headerlink" title="桥接模式(bridge)"></a>桥接模式(bridge)</h2><p> 桥接模式可以取代多层继承的方案。多层继承违背了单一职责原则，复用性较差，类的个数也非常多。桥接模式可以极大的减少子类的个数，从而降低管理和维护的成本。<br> 桥接模式极大提高了系统可扩展性，在两个变化维度中任意扩展一个维度，都不需要修改原有的系统，符合开闭原则。</p>
<h2 id="组合模式-composite"><a href="#组合模式-composite" class="headerlink" title="组合模式(composite)"></a>组合模式(composite)</h2><p> 抽象构件(Component)角色：定义了叶子和容器构件的共同点。<br> 叶子(Leaf)构件角色：无子节点。<br> 容器(Composite)构件角色：有容器特征，可以包含子节点。</p>
<h2 id="装饰模式-decorator"><a href="#装饰模式-decorator" class="headerlink" title="装饰模式(decorator)"></a>装饰模式(decorator)</h2><p> 动态的为一个对象增加新功能。<br> 装饰模式是一种用于代替继承的技术，无需通过继承增加子类就能扩展对象的新功能。使用对象的关联关系代替继承关系，更加灵活，同时避免类型体系的快速膨胀。</p>
<h2 id="外观模式-Facade"><a href="#外观模式-Facade" class="headerlink" title="外观模式(Facade)"></a>外观模式(Facade)</h2><p> 为子系统提供统一的入口，封装子系统的复杂性，便于客户端调用。</p>
<h2 id="享元模式-FlyWeight"><a href="#享元模式-FlyWeight" class="headerlink" title="享元模式(FlyWeight)"></a>享元模式(FlyWeight)</h2><p> 享元模式以共享的方式高效地支持大量细粒度对象的重用。<br> 享元对象能做到共享的关键是区分了内部状态和外部状态<br>  ·内部状态：可以共享，不会随环境变化而改变<br>  ·外部状态：不可以共享，会随环境变化而改变</p>
<h1 id="行为型模式-1"><a href="#行为型模式-1" class="headerlink" title="行为型模式"></a>行为型模式</h1><p>  关注系统中对象之间的相互交互研究系统在运行时对象之间的相互通信和协作，进一步明确对象的职责。</p>
<h2 id="责任链模式-Chain-of-Responsibility"><a href="#责任链模式-Chain-of-Responsibility" class="headerlink" title="责任链模式(Chain of Responsibility)"></a>责任链模式(Chain of Responsibility)</h2><p> 将能够处理同一类请求的对象连成一条链，所提交的请求沿着链传递，链上的对象逐个判断是否有能力处理该请求，如果能则处理，如果不能则传递给链上的下一个对象.</p>
<h2 id="迭代器模式-iterator"><a href="#迭代器模式-iterator" class="headerlink" title="迭代器模式(iterator)"></a>迭代器模式(iterator)</h2><p> 提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。</p>
<h2 id="中介者模式-Mediator"><a href="#中介者模式-Mediator" class="headerlink" title="中介者模式(Mediator)"></a>中介者模式(Mediator)</h2><p> 定义一个中介对象来封装一系列对象之间的交互，使原有对象之间的耦合松散，且可以独立地改变它们之间的交互。中介者模式又叫调停模式，它是迪米特法则的典型应用。</p>
<h2 id="命令模式-command"><a href="#命令模式-command" class="headerlink" title="命令模式(command)"></a>命令模式(command)</h2><p> 将请求封装为一个对象，从而使我们可用不同的请求对客户端进行参数化。</p>
<h2 id="解释器模式-Interpreter"><a href="#解释器模式-Interpreter" class="headerlink" title="解释器模式(Interpreter)"></a>解释器模式(Interpreter)</h2><p> 用于描述如何构成一个简单的语言解释器，主要用于使用面向对象语言开发的编译器和解释器设计。</p>
<h2 id="访问者模式-Visitor"><a href="#访问者模式-Visitor" class="headerlink" title="访问者模式(Visitor)"></a>访问者模式(Visitor)</h2><p> 表示一个作用于对象结构中的各元素的操作，它使我们可以在不改变元素的类的前提下定义作用于这些元素的新操作。</p>
<h2 id="策略模式-Strategy"><a href="#策略模式-Strategy" class="headerlink" title="策略模式(Strategy)"></a>策略模式(Strategy)</h2><p> 分离算法，选择实现。</p>
<h2 id="模板方法模式-template-method"><a href="#模板方法模式-template-method" class="headerlink" title="模板方法模式(template method)"></a>模板方法模式(template method)</h2><p> 定义一个操作中的算法骨架，将某些步骤延迟到子类中实现。</p>
<h2 id="状态模式-state"><a href="#状态模式-state" class="headerlink" title="状态模式(state)"></a>状态模式(state)</h2><p> 用于解决系统中复杂对象的状态转换以及不同状态下行为的封装问题。</p>
<h2 id="观察者模式-Observer"><a href="#观察者模式-Observer" class="headerlink" title="观察者模式(Observer)"></a>观察者模式(Observer)</h2><p> 主要用于1:N的通知。当一个对象的状态变化时，他需要及时告知一系列对象，令他们做出响应。</p>
<h2 id="备忘录模式-memento"><a href="#备忘录模式-memento" class="headerlink" title="备忘录模式(memento)"></a>备忘录模式(memento)</h2><p> 保存某个对象内部状态的拷贝，这样以后就可以将该对象恢复到原先的状态。</p>
]]></content>
      <categories>
        <category>GOF设计模式</category>
      </categories>
      <tags>
        <tag>GOF设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>GOF23设计模式（四）</title>
    <url>/2019/08/26/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<h1 id="GOF设计模式之建造者模式-Builder"><a href="#GOF设计模式之建造者模式-Builder" class="headerlink" title="GOF设计模式之建造者模式(Builder)"></a>GOF设计模式之建造者模式(Builder)</h1><p>建造者模式<a id="more"></a></p>
<h1 id="接口方法"><a href="#接口方法" class="headerlink" title="接口方法"></a>接口方法</h1><h2 id="飞船接口"><a href="#飞船接口" class="headerlink" title="飞船接口"></a>飞船接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AirShipBuilder</span> </span>&#123;</span><br><span class="line">	<span class="function">Engine <span class="title">engineBuilder</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">OrbitalModule <span class="title">orbitaModuleBuilder</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">EscapeTower <span class="title">escapeTowerBuilder</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="管理（建造）"><a href="#管理（建造）" class="headerlink" title="管理（建造）"></a>管理（建造）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line">	<span class="function">AirShip <span class="title">creatAirShip</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="继承飞船接口"><a href="#继承飞船接口" class="headerlink" title="继承飞船接口"></a>继承飞船接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XXAirShipBuilder</span> <span class="keyword">implements</span> <span class="title">AirShipBuilder</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Engine <span class="title">engineBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"建造引擎"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Engine(<span class="string">"XX牌引擎"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> OrbitalModule <span class="title">orbitaModuleBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"建造轨道舱"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> OrbitalModule(<span class="string">"XX牌轨道舱"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> EscapeTower <span class="title">escapeTowerBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"建造逃逸塔"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> EscapeTower(<span class="string">"XX牌逃逸塔"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="继承建造接口"><a href="#继承建造接口" class="headerlink" title="继承建造接口"></a>继承建造接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AirShipDirector</span> <span class="keyword">implements</span> <span class="title">Director</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> AirShipBuilder builder;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">AirShipDirector</span><span class="params">(AirShipBuilder builder)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.builder = builder;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> AirShip <span class="title">creatAirShip</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Engine e=builder.engineBuilder();</span><br><span class="line">		OrbitalModule d=builder.orbitaModuleBuilder();</span><br><span class="line">		EscapeTower t=builder.escapeTowerBuilder();</span><br><span class="line">		</span><br><span class="line">		AirShip ship=<span class="keyword">new</span> AirShip();</span><br><span class="line">		ship.setEngine(e);</span><br><span class="line">		ship.setOrbitalModule(d);</span><br><span class="line">		ship.setEscapeTower(t);</span><br><span class="line">		<span class="keyword">return</span> ship;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="飞船类与相关组件"><a href="#飞船类与相关组件" class="headerlink" title="飞船类与相关组件"></a>飞船类与相关组件</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * XX牌飞船</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AirShip</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> OrbitalModule orbitalModule; <span class="comment">//轨道舱</span></span><br><span class="line">	<span class="keyword">private</span> Engine engine; <span class="comment">//发动机</span></span><br><span class="line">	<span class="keyword">private</span> EscapeTower escapeTower; <span class="comment">//逃逸塔</span></span><br><span class="line">	<span class="comment">//这里可以加入相关方法</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> OrbitalModule <span class="title">getOrbitalModule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> orbitalModule;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrbitalModule</span><span class="params">(OrbitalModule orbitalModule)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.orbitalModule = orbitalModule;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Engine <span class="title">getEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> engine;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEngine</span><span class="params">(Engine engine)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.engine = engine;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> EscapeTower <span class="title">getEscapeTower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> escapeTower;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEscapeTower</span><span class="params">(EscapeTower escapeTower)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.escapeTower = escapeTower;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrbitalModule</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">OrbitalModule</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Engine</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Engine</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EscapeTower</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">EscapeTower</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>public class Client {<br>    public static void main(String[] args) {<br>        AirShipDirector director=new AirShipDirector(new XXAirShipBuilder());<br>        AirShip ship=director.creatAirShip();<br>        System.out.println(ship.getEngine().getName());<br>    }<br>}```</p>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>建造引擎<br>建造轨道舱<br>建造逃逸塔<br>XX牌引擎</p>
</blockquote>
]]></content>
      <categories>
        <category>GOF设计模式</category>
      </categories>
      <tags>
        <tag>GOF设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>IP和URL</title>
    <url>/2019/08/14/IP%E5%92%8CURL/</url>
    <content><![CDATA[<h1 id="IP和URL"><a href="#IP和URL" class="headerlink" title="IP和URL"></a>IP和URL</h1><p>用Java简单实现获取IP地址和名称，URL的一些东西。<a id="more"></a></p>
<h1 id="获取IP-名称："><a href="#获取IP-名称：" class="headerlink" title="获取IP|名称："></a>获取IP|名称：</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.getLocalHost：本机地址</span></span><br><span class="line"><span class="comment"> * 2.getByName：根据域名DNS解析IP</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ip_Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">		InetAddress add=InetAddress.getLocalHost();</span><br><span class="line">		<span class="comment">//本机地址</span></span><br><span class="line">		System.out.println(add.getHostAddress());</span><br><span class="line">		<span class="comment">//本机名称</span></span><br><span class="line">		System.out.println(add.getHostName());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="URL"><a href="#URL" class="headerlink" title="URL:"></a>URL:</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * URL:统一资源定位符</span></span><br><span class="line"><span class="comment"> * 1.协议</span></span><br><span class="line"><span class="comment"> * 2.域名、计算机</span></span><br><span class="line"><span class="comment"> * 3.端口：80(默认)</span></span><br><span class="line"><span class="comment"> * 4.请求资源</span></span><br><span class="line"><span class="comment"> * http://www.baidu.com:80/index.html?uname=xxx&amp;age=20#a</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URL_Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MalformedURLException </span>&#123;</span><br><span class="line">		URL u=<span class="keyword">new</span> URL(<span class="string">"http://www.baidu.com:80/index.html?uname=xxx&amp;age=20#a"</span>);</span><br><span class="line">		<span class="comment">//获取协议</span></span><br><span class="line">		System.out.println(<span class="string">"协议："</span>+u.getProtocol());</span><br><span class="line">		<span class="comment">//获取域名或IP</span></span><br><span class="line">		System.out.println(<span class="string">"域名|IP："</span>+u.getHost());</span><br><span class="line">		<span class="comment">//获取端口</span></span><br><span class="line">		System.out.println(<span class="string">"端口："</span>+u.getPort());</span><br><span class="line">		<span class="comment">//请求资源</span></span><br><span class="line">		System.out.println(<span class="string">"请求资源："</span>+u.getPath());</span><br><span class="line">		System.out.println(<span class="string">"请求资源："</span>+u.getFile());</span><br><span class="line">		<span class="comment">//获取参数</span></span><br><span class="line">		System.out.println(<span class="string">"参数："</span>+u.getQuery());</span><br><span class="line">		<span class="comment">//获取锚点</span></span><br><span class="line">		System.out.println(<span class="string">"锚点："</span>+u.getRef());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>网络编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反射机制</title>
    <url>/2020/03/29/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p>反射：框架设计的灵魂<br>     框架：半成品软件。可以在框架的基础上进行软件开发，简化编码<br>     反射：将类的各个组成部分封装为其他对象，这就是反射机制<br>         好处：<br>            1. 可以在程序运行过程中，操作这些对象。<br>            2. 可以解耦，提高程序的可扩展性。<a id="more"></a></p>
<h1 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h1><p>1.Class.forName(“全类名”)：将字节码文件加载进内存，返回Class对象<br>多用于配置文件，将类名定义在配置文件中。读取文件，加载类<br>2.类名.class：通过类名的属性class获取<br>多用于参数的传递<br>3.对象.getClass()：getClass()方法在Object类中定义着。<br>多用于对象的获取字节码的方式<br> 结论：<br>  同一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象都是同一个。</p>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> domain.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest1</span> </span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取Class对象的方式：</span></span><br><span class="line"><span class="comment">	 *   1.Class.forName("全类名")：将字节码文件加载进内存，返回Class对象</span></span><br><span class="line"><span class="comment">	 *   2.类名.class：通过类名的属性class获取</span></span><br><span class="line"><span class="comment">	 *   3.对象.getClass()：getClass()方法在Object类中定义着</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">// 1.Class.forName("全类名")</span></span><br><span class="line">		Class clasz1 = Class.forName(<span class="string">"domain.Person"</span>);</span><br><span class="line">		System.out.println(clasz1);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 2.类名.class</span></span><br><span class="line">		Class clasz2 = Person.class;</span><br><span class="line">		System.out.println(clasz2);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//3.对象.getClass()</span></span><br><span class="line">		Person p = <span class="keyword">new</span> Person();</span><br><span class="line">		Class clasz3 = p.getClass();</span><br><span class="line">		System.out.println(clasz3);</span><br><span class="line">		System.out.println(clasz1 == clasz2);<span class="comment">//true</span></span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Class对象功能"><a href="#Class对象功能" class="headerlink" title="Class对象功能"></a>Class对象功能</h1><h2 id="1-获取成员变量"><a href="#1-获取成员变量" class="headerlink" title="1. 获取成员变量"></a>1. 获取成员变量</h2><p>  Field[] getFields() ：获取所有public修饰的成员变量<br>  Field getField(String name)   获取指定名称的 public修饰的成员变量</p>
<p>  Field[] getDeclaredFields()  获取所有的成员变量，不考虑修饰符<br>  Field getDeclaredField(String name)  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//getFields()方法只能获取public成员变量</span></span><br><span class="line">Class clasz = Person.class;</span><br><span class="line">Field[] field = clasz.getFields();</span><br><span class="line"><span class="keyword">for</span> (Field field2 : field) &#123;</span><br><span class="line">	System.out.println(field2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//getField(String name)获取指定名称的public成员变量</span></span><br><span class="line">Field f = clasz.getField(<span class="string">"a"</span>);</span><br><span class="line">System.out.println(f);</span><br><span class="line"><span class="comment">//获取成员变量的值</span></span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">Object value = f.get(p);</span><br><span class="line">System.out.println(value);</span><br><span class="line"><span class="comment">//设置成员变量的值</span></span><br><span class="line">f.set(p, <span class="string">"张三"</span>);</span><br><span class="line">System.out.println(p);</span><br><span class="line">System.out.println(<span class="string">"--------------------------"</span>);</span><br><span class="line"><span class="comment">//Field[] getDeclaredFields()获取所有的成员变量，不考虑修饰符</span></span><br><span class="line">Field[] field3 = clasz.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span> (Field field2 : field3) &#123;</span><br><span class="line">	System.out.println(field2);</span><br><span class="line">&#125;	</span><br><span class="line"><span class="comment">//获取指定名称的成员变量</span></span><br><span class="line">f = clasz.getDeclaredField(<span class="string">"Name"</span>);</span><br><span class="line"><span class="comment">//忽略访问权限修饰符的安全检查</span></span><br><span class="line">f.setAccessible(<span class="keyword">true</span>);<span class="comment">//暴力反射</span></span><br><span class="line">System.out.println(f.get(p));</span><br></pre></td></tr></table></figure>

<h2 id="2-获取构造方法"><a href="#2-获取构造方法" class="headerlink" title="2. 获取构造方法"></a>2. 获取构造方法</h2><p>Constructor&lt;?&gt;[] getConstructors()</p>
<p>Constructor<t> getConstructor(类&lt;?&gt;… parameterTypes) </t></p>
<p>Constructor<t> getDeclaredConstructor(类&lt;?&gt;… parameterTypes)</t></p>
<p>Constructor&lt;?&gt;[] getDeclaredConstructors() </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clasz = Person.class;</span><br><span class="line"><span class="comment">//Constructor&lt;?&gt;[] getConstructors() </span></span><br><span class="line">Constructor constructror = clasz.getConstructor(String.class,String.class);</span><br><span class="line">System.out.println(constructror);</span><br><span class="line"><span class="comment">//使用newInstance创建对象</span></span><br><span class="line">Object person = constructror.newInstance(<span class="string">"张三"</span>,<span class="string">"男"</span>);</span><br><span class="line">System.out.println(person);</span><br><span class="line"><span class="comment">//空参构造可以使用Class的newInstance()方法</span></span><br><span class="line">Object o = clasz.newInstance();</span><br><span class="line">System.out.println(o);</span><br></pre></td></tr></table></figure>

<h2 id="3-获取成员方法"><a href="#3-获取成员方法" class="headerlink" title="3. 获取成员方法"></a>3. 获取成员方法</h2><p>  Method[] getMethods()<br>  Method getMethod(String name, 类&lt;?&gt;… parameterTypes)  </p>
<p>  Method[] getDeclaredMethods()<br>  Method getDeclaredMethod(String name, 类&lt;?&gt;… parameterTypes)  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clasz = Person.class;</span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">Method method = clasz.getMethod(<span class="string">"Eat"</span>);</span><br><span class="line">method.invoke(p);</span><br><span class="line">method = clasz.getMethod(<span class="string">"Eat"</span>,String.class);</span><br><span class="line">method.invoke(p,<span class="string">"鸡腿"</span>);</span><br></pre></td></tr></table></figure>

<h2 id="4-获取全类名"><a href="#4-获取全类名" class="headerlink" title="4. 获取全类名"></a>4. 获取全类名</h2><p>  String getName() </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clasz = Person.class;</span><br><span class="line">System.out.println(clasz.getName());</span><br></pre></td></tr></table></figure>

<h1 id="Field：成员变量"><a href="#Field：成员变量" class="headerlink" title="Field：成员变量"></a>Field：成员变量</h1><p>操作：</p>
<ol>
<li><p>设置值<br>void set(Object obj, Object value)  </p>
</li>
<li><p>获取值<br>get(Object obj) </p>
</li>
<li><p>忽略访问权限修饰符的安全检查<br>setAccessible(true):暴力反射</p>
</li>
</ol>
<h1 id="Constructor-构造方法"><a href="#Constructor-构造方法" class="headerlink" title="Constructor:构造方法"></a>Constructor:构造方法</h1><p>创建对象：<br>   T newInstance(Object… initargs)<br>     如果使用空参数构造方法创建对象，操作可以简化：Class对象的newInstance方法</p>
<h1 id="Method：方法对象"><a href="#Method：方法对象" class="headerlink" title="Method：方法对象"></a>Method：方法对象</h1><ul>
<li>执行方法：<br>Object invoke(Object obj, Object… args)<br>获取方法名称：<br>String getName:获取方法名</li>
</ul>
<h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p>   需求：写一个”框架”，不能改变该类的任何代码的前提下，可以帮我们创建任意类的对象，并且执行其中任意方法<br>     实现：<br>       1. 配置文件<br>       2. 反射<br>     步骤：<br>       1. 将需要创建的对象的全类名和需要执行的方法定义在配置文件中<br>       2. 在程序中加载读取配置文件<br>       3. 使用反射技术来加载类文件进内存<br>       4. 创建对象<br>       5. 执行方法</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>   1.配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ClassName=domain.Person</span><br><span class="line">MethodName=Eat</span><br></pre></td></tr></table></figure>

<p>   2.相关代码<br>Person类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> String a;</span><br><span class="line">	<span class="keyword">protected</span> String b;</span><br><span class="line">	String c;</span><br><span class="line">	<span class="keyword">private</span> String Name;</span><br><span class="line">	<span class="keyword">private</span> String Sex;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		Name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Sex;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">		Sex = sex;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, String sex)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		Name = name;</span><br><span class="line">		Sex = sex;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"Person [a="</span> + a + <span class="string">", b="</span> + b + <span class="string">", c="</span> + c + <span class="string">", Name="</span> + Name + <span class="string">", Sex="</span> + Sex + <span class="string">"]"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"eat..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Eat</span><span class="params">(String food)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"eat..."</span>+food);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Student类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"Sleep..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   3.实现代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reflec</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line">		InputStream in = Reflec.class.getClassLoader().getResourceAsStream(<span class="string">"pro.properties"</span>);</span><br><span class="line">		p.load(in);</span><br><span class="line">		String ClassName = p.getProperty(<span class="string">"ClassName"</span>);</span><br><span class="line">		String MethodName = p.getProperty(<span class="string">"MethodName"</span>);</span><br><span class="line">		<span class="comment">//加载进内存</span></span><br><span class="line">		Class clasz = Class.forName(ClassName);</span><br><span class="line">		<span class="comment">//获取对象</span></span><br><span class="line">		Object obj = clasz.newInstance();</span><br><span class="line">		<span class="comment">//获取方法对象</span></span><br><span class="line">		Method method = clasz.getMethod(MethodName);</span><br><span class="line">		method.invoke(obj);</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC批量处理</title>
    <url>/2020/02/28/JDBC%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p>测试往数据库插入大量数据时，不同方法的速度<a id="more"></a></p>
<h1 id="使用-Statement"><a href="#使用-Statement" class="headerlink" title="使用 Statement"></a>使用 Statement</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBatchWithStatement</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Connection connection = <span class="keyword">null</span>;</span><br><span class="line">		Statement statement = <span class="keyword">null</span>;</span><br><span class="line">		String sql = <span class="keyword">null</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			connection = JDBCTools.getConnection();</span><br><span class="line">			JDBCTools.beginTx(connection);</span><br><span class="line">			</span><br><span class="line">			statement = connection.createStatement();</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)&#123;</span><br><span class="line">				sql = <span class="string">"INSERT INTO customers VALUES("</span> + (i + <span class="number">1</span>) </span><br><span class="line">						+ <span class="string">", 'name_"</span> + i + <span class="string">"', '29-6月 -13')"</span>;</span><br><span class="line">				statement.addBatch(sql);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">			</span><br><span class="line">			System.out.println(<span class="string">"Time: "</span> + (end - begin)); <span class="comment">//结果为39567毫秒</span></span><br><span class="line">			</span><br><span class="line">			JDBCTools.commit(connection);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			JDBCTools.rollback(connection);</span><br><span class="line">		&#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">			JDBCTools.releaseDB(<span class="keyword">null</span>, statement, connection);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="使用PreparedStatement"><a href="#使用PreparedStatement" class="headerlink" title="使用PreparedStatement"></a>使用PreparedStatement</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBatchWithPreparedStatement</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Connection connection = <span class="keyword">null</span>;</span><br><span class="line">		PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">		String sql = <span class="keyword">null</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			connection = JDBCTools.getConnection();</span><br><span class="line">			JDBCTools.beginTx(connection);</span><br><span class="line">			sql = <span class="string">"INSERT INTO customers VALUES(?,?,?)"</span>;</span><br><span class="line">			preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">			Date date = <span class="keyword">new</span> Date(<span class="keyword">new</span> java.util.Date().getTime());</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)&#123;</span><br><span class="line">				preparedStatement.setInt(<span class="number">1</span>, i + <span class="number">1</span>);</span><br><span class="line">				preparedStatement.setString(<span class="number">2</span>, <span class="string">"name_"</span> + i);</span><br><span class="line">				preparedStatement.setDate(<span class="number">3</span>, date);</span><br><span class="line">				</span><br><span class="line">				preparedStatement.executeUpdate();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">			</span><br><span class="line">			System.out.println(<span class="string">"Time: "</span> + (end - begin)); <span class="comment">//结果为9819毫秒</span></span><br><span class="line">			</span><br><span class="line">			JDBCTools.commit(connection);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			JDBCTools.rollback(connection);</span><br><span class="line">		&#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">			JDBCTools.releaseDB(<span class="keyword">null</span>, preparedStatement, connection);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h1 id="使用preparedStatement-addBatch"><a href="#使用preparedStatement-addBatch" class="headerlink" title="使用preparedStatement.addBatch()"></a>使用preparedStatement.addBatch()</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBatch</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Connection connection = <span class="keyword">null</span>;</span><br><span class="line">		PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">		String sql = <span class="keyword">null</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			connection = JDBCTools.getConnection();</span><br><span class="line">			JDBCTools.beginTx(connection);</span><br><span class="line">			sql = <span class="string">"INSERT INTO customers VALUES(?,?,?)"</span>;</span><br><span class="line">			preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">			Date date = <span class="keyword">new</span> Date(<span class="keyword">new</span> java.util.Date().getTime());</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)&#123;</span><br><span class="line">				preparedStatement.setInt(<span class="number">1</span>, i + <span class="number">1</span>);</span><br><span class="line">				preparedStatement.setString(<span class="number">2</span>, <span class="string">"name_"</span> + i);</span><br><span class="line">				preparedStatement.setDate(<span class="number">3</span>, date);</span><br><span class="line">				</span><br><span class="line">				<span class="comment">//"积攒" SQL </span></span><br><span class="line">				preparedStatement.addBatch();</span><br><span class="line">				</span><br><span class="line">				<span class="comment">//当 "积攒" 到一定程度, 就统一的执行一次. 并且清空先前 "积攒" 的 SQL</span></span><br><span class="line">				<span class="keyword">if</span>((i + <span class="number">1</span>) % <span class="number">300</span> == <span class="number">0</span>)&#123;</span><br><span class="line">					preparedStatement.executeBatch();</span><br><span class="line">					preparedStatement.clearBatch();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//若总条数不是批量数值的整数倍, 则还需要再额外的执行一次. </span></span><br><span class="line">				preparedStatement.executeBatch();</span><br><span class="line">				preparedStatement.clearBatch();</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">			</span><br><span class="line">			System.out.println(<span class="string">"Time: "</span> + (end - begin)); <span class="comment">//结果为569毫秒</span></span><br><span class="line">			</span><br><span class="line">			JDBCTools.commit(connection);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			JDBCTools.rollback(connection);</span><br><span class="line">		&#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">			JDBCTools.releaseDB(<span class="keyword">null</span>, preparedStatement, connection);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>数据库处理</tag>
      </tags>
  </entry>
  <entry>
    <title>Java垃圾回收机制(Garbage Collection)</title>
    <url>/2019/07/16/Java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6-Garbage-Collection/</url>
    <content><![CDATA[<h1 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h1><p>Java引入了垃圾回收机制，令C++程序员头疼的内存管理问题迎刃而解，Java程序员可以将更多的精力放到业务逻辑上而不是内存管理工作上，大大提高了开发效率<a id="more"></a></p>
<h1 id="认识垃圾回收机制"><a href="#认识垃圾回收机制" class="headerlink" title="认识垃圾回收机制"></a>认识垃圾回收机制</h1><p>  垃圾回收机制可以自动清空无用对象，C++垃圾回收就像学校食堂一样，需要用餐人员自己回收餐盘，如果没回收就会导致这个位置没法坐人，如果每个人都不回收就会造成瘫痪，无法营业，就好比程序。Java就好比在外面饭馆吃饭，无需你回收餐盘，你可以吃干净抹嘴走人，会有餐馆的服务员帮你回收盘子，这样就方便了你也节约了时间。</p>
<h1 id="垃圾回收过程"><a href="#垃圾回收过程" class="headerlink" title="垃圾回收过程"></a>垃圾回收过程</h1><p>  任何一种垃圾回收算法一般都要做两件事情：<br>  1.发现无用的对象<br>  2.回收无用对象占用的内存空间。</p>
<h1 id="垃圾回收相关算法"><a href="#垃圾回收相关算法" class="headerlink" title="垃圾回收相关算法"></a>垃圾回收相关算法</h1><h2 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h2><p>  堆中每个对象都有一个引用计数，被引用一次，计数加1，被引用变量值变为null，则计数减一，直到计数为0，则表示无用对象，优点：算法简单。缺点：“循环引用的无用对象”无法被识别。</p>
<h2 id="引用可达法-根搜索算法"><a href="#引用可达法-根搜索算法" class="headerlink" title="引用可达法(根搜索算法)"></a>引用可达法(根搜索算法)</h2><p>  程序把所有的引用关系看作一张图，从一个节点GC ROOT 开始，寻找对应的引用节点，找到这个节点后，继续寻找当前节点的引用节点，当所有节点寻找完毕后，剩余节点被认为是没有被引用到的节点，即无用的节点。</p>
<h2 id="通用的分代垃圾回收机制"><a href="#通用的分代垃圾回收机制" class="headerlink" title="通用的分代垃圾回收机制"></a>通用的分代垃圾回收机制</h2><p>  分代垃圾回收机制，是基于这样一个事实：不同的对象的生命周期是不一样的。因此，不同生命周期的对象可以采取不同的回收算法，以便提高回收效率，我们将对象分为三种状态：年轻代、年老代、持久代。JVM将堆内存划分为Eden、Survivor、Tenured/Old空间。</p>
<h3 id="年轻代"><a href="#年轻代" class="headerlink" title="年轻代"></a>年轻代</h3><p>  所有新生成的对象首先都是放在Eden区。年轻代的目标就是尽可能快速的搜集掉那些生命周期短的对象，对应的是Minor GC，每次Minor GC会清理年轻代的内存，算法采用效率较高的复制算法，频繁的操作，但是会浪费内存空间。当“年轻代”区域存放满对象后，就将对象存放到年老代区域。</p>
<h3 id="年老代"><a href="#年老代" class="headerlink" title="年老代"></a>年老代</h3><p>  在年老代中经历了N（默认15）次的垃圾回收后仍然存活的对象，就会被放到年老代中。因此，可以认为年老代中存放的都是一些生命周期较长的对象。年老代的对象越来越多，我们就需要启动Major GC和Full GC（全量回收），来进行一次大扫除，全名清理年轻代区域和年老代区域。</p>
<h3 id="持久代"><a href="#持久代" class="headerlink" title="持久代"></a>持久代</h3><p>  用于存放静态文件，如Java类、方法等。持久代对垃圾回收没有显著影响。</p>
<h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><h4 id="·Minor-GC"><a href="#·Minor-GC" class="headerlink" title="·Minor GC:"></a>·Minor GC:</h4><p>  用于清理年轻代区域。Eden区满了就会触发一次Minor GC.清理无用对象，将有用对象复制到“Survivor1”、“Survivor2”区中（这两个区，大小空间相同，同一时刻只有一个区在运行，另一个为空）</p>
<h4 id="·Major-GC"><a href="#·Major-GC" class="headerlink" title="·Major GC:"></a>·Major GC:</h4><p>  用于清理年老代区域。</p>
<h4 id="·Full-GC"><a href="#·Full-GC" class="headerlink" title="·Full GC:"></a>·Full GC:</h4><p>  用于清理年轻代、年老代区域。成本较高，会对系统性能产生影响。</p>
<h3 id="垃圾回收过程-1"><a href="#垃圾回收过程-1" class="headerlink" title="垃圾回收过程"></a>垃圾回收过程</h3><p>  1、新创建的对象，绝大多数都会存储在Eden中。<br>  2、当Eden满了（达到一定比例）不能创建新对象，则触发垃圾回收机制（GC），将无用对象清理掉，然后剩余对象复制到某个Survivor中，如S1，同时清空Eden区。<br>  3、当Eden再次满了，会将S1中的不能清空的对象存到另一个Survivor中，如S2，同时将Eden区中不能清空的对象也复制到S1中，保证Eden和S1的无用对象，均被清空。<br>  4、重复多次（默认15次）Survivor中没有被清理的对象，则会被复制到年老代Old（Tenured）中。<br>  5、当Old区满了，则会触发一个一次完整地垃圾回收（Full GC），之前年轻代的垃圾回收被称为（Minor GC）.</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis内置参数</title>
    <url>/2020/05/06/MyBatis%E5%86%85%E7%BD%AE%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<p>MyBatis拥有两个内置参数，工作时常用。<a id="more"></a></p>
<h1 id="parameter参数"><a href="#parameter参数" class="headerlink" title="_parameter参数"></a>_parameter参数</h1><p>代表整个传过来的参数:单个参数：_parameter就是这个参数;多个参数：参数会被封装为一个map；_parameter就是代表这个map</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- public List&lt;Employee&gt; getEmpsTestInnerParameter(Student student);  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStuTestInnerParameter"</span> <span class="attr">resultType</span>=<span class="string">"entity.Student"</span>&gt;</span></span><br><span class="line"> 			select * from user</span><br><span class="line">		<span class="comment">&lt;!-- 判断传过来的student参数是否为空 --&gt;</span></span><br><span class="line"> 			<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_parameter!=null"</span>&gt;</span></span><br><span class="line"> 				where name like #&#123;name&#125;</span><br><span class="line"> 			<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="databaseId参数"><a href="#databaseId参数" class="headerlink" title="_databaseId参数"></a>_databaseId参数</h1><p>如果配置了databaseIdProvider标签，_databaseId就是代表当前数据库的别名。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  public List&lt;Employee&gt; getEmpsTestInnerParameter(Student student);  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStuTestInnerParameter"</span> <span class="attr">resultType</span>=<span class="string">"entity.Student"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 判断数据库，这里配置了databaseIdProvider --&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_databaseId=='mysql'"</span>&gt;</span></span><br><span class="line">  			select * from user</span><br><span class="line">  			<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_parameter!=null"</span>&gt;</span></span><br><span class="line">  				where name like #&#123;name&#125;</span><br><span class="line">  			<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_databaseId=='oracle'"</span>&gt;</span></span><br><span class="line">  			select * from student</span><br><span class="line">  			<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_parameter!=null"</span>&gt;</span></span><br><span class="line">  				where name like #&#123;_parameter.name&#125;</span><br><span class="line">  			<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Java方法的重载</title>
    <url>/2019/07/16/Java%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD/</url>
    <content><![CDATA[<h1 id="方法重载（Overlord）"><a href="#方法重载（Overlord）" class="headerlink" title="方法重载（Overlord）"></a>方法重载（Overlord）</h1><p>  重载的方法，完全不同的用法，只是名称相同。<a id="more"></a></p>
<h2 id="构成方法重载的条件"><a href="#构成方法重载的条件" class="headerlink" title="构成方法重载的条件"></a>构成方法重载的条件</h2><p>  1.不同的含义：形式参数，形参个数，形参顺序不同<br>  2.只有返回值不同不构成方法的重载，<br>例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**求和的方法*/</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">	 <span class="keyword">int</span> sum=a+b;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">   	 </span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**求和的方法重载*/</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">	 <span class="keyword">int</span> sum=a+b+c;</span><br><span class="line">	<span class="keyword">return</span> sum;	 </span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">/**方法的重载只有返回值的时候需要特别注意，返回值double和返回值为int的方法不构成重载（同一方法，返回值类型不一样）*/</span></span><br></pre></td></tr></table></figure>

<h1 id="构造方法的重载"><a href="#构造方法的重载" class="headerlink" title="构造方法的重载"></a>构造方法的重载</h1><p> 要点：<br>       1.通过new关键字调用。<br>       2.构造器有返回值，但是不能定义返回值类型（返回值类型为本类类型），不能在构造器里使用return返回某个值。<br>       3.如果没有定义构造器，编译器会自动添加一个无参的构造函数 。如果已定义则编译器不会自动添加！<br>       4.构造器的方法名必须和类名一致！</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">             <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Summation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	Summation(<span class="keyword">int</span> a)&#123;</span><br><span class="line">		System.out.println(a);</span><br><span class="line">	&#125;</span><br><span class="line">	Summation(<span class="keyword">int</span> a ,<span class="keyword">int</span> b)&#123;</span><br><span class="line">		System.out.println(a+b);</span><br><span class="line">	&#125;</span><br><span class="line">	 </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		Summation c=<span class="keyword">new</span> Summation(<span class="number">1</span>);</span><br><span class="line">		Summation d=<span class="keyword">new</span> Summation(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>  方法的重载给我们写代码简便了许多，可以提升程序员编写代码速度和代码易读性。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-全局配置文件学习</title>
    <url>/2020/04/28/MyBatis-%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>对MyBatis全局配置文件的学习<a id="more"></a></p>
<style>
    p{margin:0px 0} 
</style>
<h1 id="引入外部文件"><a href="#引入外部文件" class="headerlink" title="引入外部文件"></a>引入外部文件</h1><p>mybatis可以使用properties来引入外部properties配置文件的内容:</p>
<p>&nbsp&nbsp resource：引入类路径下的资源<br>
&nbsp&nbsp url：引入网络路径或者磁盘路径下的资源
</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"dbconfig.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="settings-设置"><a href="#settings-设置" class="headerlink" title="settings 设置"></a>settings 设置</h1><p>setting:用来设置每一个设置项:</p>
<p>&nbsp&nbsp name：设置项名<br>
&nbsp&nbsp value：设置项取值
</p>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 驼峰命名法 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span> </span><br><span class="line">		<span class="comment">&lt;!-- 设置字段为空时使用的JDBC的属性 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"jdbcTypeForNull"</span> <span class="attr">value</span>=<span class="string">"NULL"</span>/&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!--显示的指定每个我们需要更改的配置的值，即使他是默认的。防止版本更新带来的问题  --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 懒加载 使用的时候才进行加载--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 侵入延迟加载 默认true 默认将所有属性全部加载 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="typeAliases"><a href="#typeAliases" class="headerlink" title="typeAliases"></a>typeAliases</h1><p>别名处理器可以为我们的java类型起别名，别名不区分大小写。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 1、typeAlias:为某个java类型起别名</span></span><br><span class="line"><span class="comment">				type:指定要起别名的类型全类名;默认别名就是类名小写</span></span><br><span class="line"><span class="comment">				alias:指定新的别名</span></span><br><span class="line"><span class="comment">		 --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- &lt;typeAlias type="myBatis_Study.Student" alias="stu"/&gt; --&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 2、package:为某个包下的所有类批量起别名 </span></span><br><span class="line"><span class="comment">				name：指定包名（为当前包以及下面所有的后代包的每一个类都起一个默认别名（类名小写），）</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"myBatis_Study"</span>/&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 3、批量起别名的情况下，使用@Alias注解为某个类型指定新的别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="environments"><a href="#environments" class="headerlink" title="environments"></a>environments</h1><p>环境配置，mybatis可以配置多种环境 ,default指定使用某种环境。可以达到快速切换环境。<br>environment：配置一个具体的环境信息，必须有两个标签，id代表当前环境的唯一标识</p>
<p>&nbsp&nbsp transactionManager：事务管理器</p>
type：事务管理器的类型：
<p>&nbsp&nbsp&nbsp JDBC(JdbcTransactionFactory)|MANAGED(ManagedTransactionFactory)</p>
自定义事务管理器：实现TransactionFactory接口.type指定为全类名

<p>dataSource：数据源<br>type:数据源类型：UNPOOLED(UnpooledDataSourceFactory)|POOLED(PooledDataSourceFactory)<br>|JNDI(JndiDataSourceFactory)<br>自定义数据源：实现DataSourceFactory接口，type是全类名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"dev_mysql"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"dev_mysql"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"dev_oracle"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;orcl.driver&#125;"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;orcl.url&#125;"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;orcl.username&#125;"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;orcl.password&#125;"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="databaseIdProvider"><a href="#databaseIdProvider" class="headerlink" title="databaseIdProvider"></a>databaseIdProvider</h1><p>支持多数据库厂商, type=”DB_VENDOR”(VendorDatabaseIdProvider) 作用就是得到数据库厂商的标识(驱动getDatabaseProductName())，mybatis就能根据数据库厂商标识来执行不同的sql;<br>例如：MySQL，Oracle，SQL Server xxxx</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">databaseIdProvider</span> <span class="attr">type</span>=<span class="string">"DB_VENDOR"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 为不同的数据库厂商起别名 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"MySQL"</span> <span class="attr">value</span>=<span class="string">"mysql"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"Oracle"</span> <span class="attr">value</span>=<span class="string">"oracle"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"SQL Server"</span> <span class="attr">value</span>=<span class="string">"sqlserver"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">databaseIdProvider</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	这里需要到MyBatis映射文件中去设置</span></span><br><span class="line"><span class="comment">	&lt;select id="getEmpById" resultType="myBatis_Study.Student"</span></span><br><span class="line"><span class="comment">		databaseId="mysql"&gt; 别名在这里起作用,下一篇讲映射文件</span></span><br><span class="line"><span class="comment">		select * from user where id = #&#123;id&#125;</span></span><br><span class="line"><span class="comment">	&lt;/select&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="mappers"><a href="#mappers" class="headerlink" title="mappers"></a>mappers</h1><p>将sql映射注册到全局配置中。<br>mapper:注册一个sql映射注册配置文件.<br>resource：引用类路径下的sql映射文件</p>
<p>&nbsp&nbsp mybatis/mapper/EmployeeMapper.xml</p>
url：引用网路路径或者磁盘路径下的sql映射文件
<p>&nbsp&nbsp file:///var/mappers/AuthorMapper.xml</p>

<p>注册接口<br>class：引用（注册）接口，</p>
<p>&nbsp&nbsp 1、有sql映射文件，映射文件名必须和接口同名，并且放在与接口同一目录下<br>
&nbsp&nbsp 2、没有sql映射文件，所有的sql都是利用注解写在接口上
</p>

<p>推荐：</p>
<p>&nbsp&nbsp 比较重要的，复杂的Dao接口我们来写sql映射文件<br>
&nbsp&nbsp 不重要，简单的Dao接口为了开发快速可以使用注解
</p>


<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;mapper resource="mybatis/mapper/StudentMapper.xml"/&gt; --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- &lt;mapper class="mybatis.dao.StudentMapperAnnotation"/&gt; 注解方式--&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 批量注册： --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.atguigu.mybatis.dao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="简单的配置文件演示"><a href="#简单的配置文件演示" class="headerlink" title="简单的配置文件演示"></a>简单的配置文件演示</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span> <span class="comment">&lt;!-- 这里一般交给Spring --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 将我们写好的sql映射文件（StudentMapper.xml）一定要注册到全局配置文件（mybatis-config.xml）中 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"StudentMapper.xml"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-映射文件学习</title>
    <url>/2020/04/29/MyBatis-%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>MyBatis-映射文件的学习<a id="more"></a></p>
<style>
    p{margin:0px 0} 
</style>
<h1 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta"> PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta"> "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">namespace:名称空间;指定为接口的全类名,随意起名，后续推荐与接口绑定</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="查询标签"><a href="#查询标签" class="headerlink" title="查询标签"></a>查询标签</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">namespace:名称空间;指定为接口的全类名</span></span><br><span class="line"><span class="comment">id：唯一标识</span></span><br><span class="line"><span class="comment">resultType：返回值类型</span></span><br><span class="line"><span class="comment">#&#123;id&#125;：从传递过来的参数中取出id值</span></span><br><span class="line"><span class="comment">public Student getStudentById(Integer id);</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> 	</span><br><span class="line"> 	<span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">		@MapKey("id") //需要在接口方法上添加注解设定主键</span></span><br><span class="line"><span class="comment">		public Map&lt;Integer, Student&gt; getStudentByLastNameLikeReturnMap(String lastName);  </span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentByLastNameLikeReturnMap"</span> <span class="attr">resultType</span>=<span class="string">"myBatis_Study.Student"</span>&gt;</span></span><br><span class="line"> 		select * from user where name like #&#123;name&#125;</span><br><span class="line"> 	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> 	<span class="comment">&lt;!--public Map&lt;String, Object&gt; getStudentByIdReturnMap(Integer id);  --&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentByIdReturnMap"</span> <span class="attr">resultType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line"> 		select * from user where id=#&#123;id&#125;</span><br><span class="line"> 	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">	<span class="comment">&lt;!-- public List&lt;Student&gt; getStudentsByLastNameLike(String lastName); --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--resultType：如果返回的是一个集合，要写集合中元素的类型  --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentsByLastNameLike"</span> <span class="attr">resultType</span>=<span class="string">"myBatis_Study.Student"</span>&gt;</span></span><br><span class="line">		select * from user where name like #&#123;name&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> 	<span class="comment">&lt;!-- public Student getStudentByMap(Map&lt;String, Object&gt; map); --&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentByMap"</span> <span class="attr">resultType</span>=<span class="string">"myBatis_Study.Student"</span>&gt;</span></span><br><span class="line"> 		select * from $&#123;tableName&#125; where id=$&#123;id&#125; and name=#&#123;name&#125;</span><br><span class="line"> 	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> 	<span class="comment">&lt;!--  public Student getStudentByIdAndLastName(Integer id,String lastName);--&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentByIdAndLastName"</span> <span class="attr">resultType</span>=<span class="string">"myBatis_Study.Student"</span>&gt;</span></span><br><span class="line"> 		select * from user where id = #&#123;id&#125; and name=#&#123;name&#125;</span><br><span class="line"> 	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> 	</span><br><span class="line"> 	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentById"</span> <span class="attr">resultType</span>=<span class="string">"myBatis_Study.Student"</span>&gt;</span></span><br><span class="line">		select * from user where id = #&#123;id&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentById"</span> <span class="attr">resultType</span>=<span class="string">"myBatis_Study.Student"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">databaseId</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">		select * from user where id = #&#123;id&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 可以使用全局配置文件中的&lt;typeAliases&gt; 设置别名 resultType="别名" --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentById"</span> <span class="attr">resultType</span>=<span class="string">"myBatis_Study.Student"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">databaseId</span>=<span class="string">"oracle"</span>&gt;</span></span><br><span class="line">		select  id,name,sex from Student where Student_ID=#&#123;id&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="关于多个参数时报错"><a href="#关于多个参数时报错" class="headerlink" title="关于多个参数时报错"></a>关于多个参数时报错</h1><p>单个参数：mybatis不会做特殊处理，</p>
<p>&nbsp #{参数名/任意名}：取出参数值。</p>    

<p>多个参数：mybatis会做特殊处理。</p>
<p>&nbsp 多个参数会被封装成 一个map，</p>    
<p>&nbsp key：param1...paramN,或者参数的索引也可以</p>
<p>&nbsp&nbsp value：传入的参数值</p>
<p>&nbsp #{}就是从map中获取指定的key的值；</p>
    <br>
异常：org.apache.ibatis.binding.BindingException: Parameter 'id' not found. Available parameters are [1, 0, param1, param2]
<p>&nbsp 操作：</p>
<p>&nbsp&nbsp 方法：public Student getEmpByIdAndLastName(Integer id,String name);</p>
<p>&nbsp&nbsp 取值：#{id},#{name}</p>

<p>【命名参数】：明确指定封装参数时map的key；@Param(“id”)<br>多个参数会被封装成 一个map。</p>
<p>&nbsp&nbsp key：使用@Param注解指定的值</p>
<p>&nbsp&nbsp value：参数值</p>
<p>&nbsp #{指定的key}取出对应的参数值</p>

<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>POJO：<br>如果多个参数正好是我们业务逻辑的数据模型，我们就可以直接传入pojo</p>
<p>&nbsp #{属性名}：取出传入的pojo的属性值    </p>

<p>Map：<br>如果多个参数不是业务模型中的数据，没有对应的pojo，不经常使用，为了方便，我们也可以传入map</p>
<p>&nbsp #{key}：取出map中对应的值</p>

<p>TO：<br>如果多个参数不是业务模型中的数据，但是经常要使用，推荐来编写一个TO（Transfer Object）数据传输对象<br>Page{<br>    int index;<br>    int size;<br>}</p>
<h1 id="更新标签"><a href="#更新标签" class="headerlink" title="更新标签"></a>更新标签</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- public void updateStudent(Integer id,String Name,String sex); </span></span><br><span class="line"><span class="comment">		 public void updateStudent(@Param("id")Integer id,@Param("name")String Name,@Param("sex")String sex);</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateStudent"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 当有多个参数时无法使用属性名来进行绑定,可以使用param1.....paramN 来进行绑定</span></span><br><span class="line"><span class="comment">		update user set name=#&#123;param2&#125;,sex=#&#123;param3&#125; where id=#&#123;param1&#125;	--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 如要使用属性名绑定使用@param("")来进行绑定 --&gt;</span></span><br><span class="line">		update user set name=#&#123;name&#125;,sex=#&#123;sex&#125; where id=#&#123;id&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="添加标签"><a href="#添加标签" class="headerlink" title="添加标签"></a>添加标签</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- public void addStudent(Student student); --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- parameterType：参数类型，可以省略， </span></span><br><span class="line"><span class="comment">	获取自增主键的值：</span></span><br><span class="line"><span class="comment">		mysql支持自增主键，自增主键值的获取，mybatis也是利用statement.getGenreatedKeys()；</span></span><br><span class="line"><span class="comment">		useGeneratedKeys="true"；使用自增主键获取主键值策略</span></span><br><span class="line"><span class="comment">		keyProperty；指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给javaBean的哪个属性</span></span><br><span class="line"><span class="comment">		databaseId：在MyBatis 全局配置文件配置的数据库别名，判断当前在MySQL环境下才会运行</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addStudent"</span> <span class="attr">parameterType</span>=<span class="string">"com.atguigu.mybatis.bean.Employee"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">databaseId</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">		insert into tbl_employee(name,sex) </span><br><span class="line">		values(#&#123;name&#125;,#&#123;sex&#125;)</span><br><span class="line">	<span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	获取非自增主键的值：</span></span><br><span class="line"><span class="comment">		Oracle不支持自增；Oracle使用序列来模拟自增；</span></span><br><span class="line"><span class="comment">		每次插入的数据的主键是从序列中拿到的值；如何获取到这个值；</span></span><br><span class="line"><span class="comment">	 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addStudent"</span> <span class="attr">databaseId</span>=<span class="string">"oracle"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">		keyProperty:查出的主键值封装给javaBean的哪个属性</span></span><br><span class="line"><span class="comment">		order="BEFORE":当前sql在插入sql之前运行</span></span><br><span class="line"><span class="comment">			   AFTER：当前sql在插入sql之后运行</span></span><br><span class="line"><span class="comment">		resultType:查出的数据的返回值类型</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">		BEFORE运行顺序：</span></span><br><span class="line"><span class="comment">			先运行selectKey查询id的sql；查出id值封装给javaBean的id属性</span></span><br><span class="line"><span class="comment">			在运行插入的sql；就可以取出id属性对应的值</span></span><br><span class="line"><span class="comment">		AFTER运行顺序：</span></span><br><span class="line"><span class="comment">			先运行插入的sql（从序列中取出新值作为id）；</span></span><br><span class="line"><span class="comment">			再运行selectKey查询id的sql；</span></span><br><span class="line"><span class="comment">		 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">order</span>=<span class="string">"BEFORE"</span> <span class="attr">resultType</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 编写查询主键的sql语句 --&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- BEFORE--&gt;</span></span><br><span class="line">			select Student_SEQ.nextval from dual </span><br><span class="line">			<span class="comment">&lt;!-- AFTER：</span></span><br><span class="line"><span class="comment">			 select Student_SEQ.currval from dual --&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 插入时的主键是从序列中拿到的 --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- BEFORE:--&gt;</span></span><br><span class="line">		insert into Student(id,name,sex) </span><br><span class="line">		values(#&#123;id&#125;,#&#123;name&#125;,#&#123;sex&#125;) </span><br><span class="line">		<span class="comment">&lt;!-- AFTER：</span></span><br><span class="line"><span class="comment">		insert into Student(id,name,sex) </span></span><br><span class="line"><span class="comment">		values(Student_seq.nextval,#&#123;name&#125;,#&#123;sex&#125;) --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- public void deleteStudent(Integer id); --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteStudent"</span>&gt;</span></span><br><span class="line">		delete from user where id=#&#123;id&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="简单的映射文件演示"><a href="#简单的映射文件演示" class="headerlink" title="简单的映射文件演示"></a>简单的映射文件演示</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta"> PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta"> "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"Dao.StudentDao"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">namespace:名称空间;指定为接口的全类名</span></span><br><span class="line"><span class="comment">id：唯一标识</span></span><br><span class="line"><span class="comment">resultType：返回值类型</span></span><br><span class="line"><span class="comment">#&#123;id&#125;：从传递过来的参数中取出id值</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> </span><br><span class="line"> 	<span class="comment">&lt;!-- public Student getStudentId(Integer id); --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentId"</span> <span class="attr">resultType</span>=<span class="string">"student.Student"</span>&gt;</span></span><br><span class="line">		select * from user where id = #&#123;id&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- public void updateStudent(Integer id,String Name,String sex); </span></span><br><span class="line"><span class="comment">		 public void updateStudent(@Param("id")Integer id,@Param("name")String Name,@Param("sex")String sex);</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateStudent"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 当有多个参数时无法使用属性名来进行绑定,可以使用param1.....paramN 来进行绑定</span></span><br><span class="line"><span class="comment">		update user set name=#&#123;param2&#125;,sex=#&#123;param3&#125; where id=#&#123;param1&#125;	--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 如要使用属性名绑定使用@param("")来进行绑定 --&gt;</span></span><br><span class="line">		update user set name=#&#123;name&#125;,sex=#&#123;sex&#125; where id=#&#123;id&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- public void addStudent(Student student); --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addStudent"</span>&gt;</span></span><br><span class="line">		insert into user(name,sex) values(#&#123;name&#125;,#&#123;sex&#125;)</span><br><span class="line">	<span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- public void deleteStudent(Integer id); --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteStudent"</span>&gt;</span></span><br><span class="line">		delete from user where id=#&#123;id&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库之事务</title>
    <url>/2019/09/04/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>数据库的事务。<a id="more"></a></p>
<h2 id="事务基本概念"><a href="#事务基本概念" class="headerlink" title="事务基本概念"></a>事务基本概念</h2><p>一组要么同时执行成功，要么同时执行失败的SQL语句，是数据库操作的一个执行单元。</p>
<h2 id="事物开始于"><a href="#事物开始于" class="headerlink" title="事物开始于"></a>事物开始于</h2><p>连接到数据库上，并执行一条DML语句(INSERT、UPDATE或DELETE)</p>
<p>前一个事务结束后，又输入了另一条DML语句。</p>
<h2 id="事务结束于"><a href="#事务结束于" class="headerlink" title="事务结束于"></a>事务结束于</h2><p>执行COMMIT或ROLLBAC。</p>
<p>执行一条DDL语句，例如CREATE TABLE或；在这种情况下，会自动执行COMMIT语句。</p>
<p>执行一条DCL语句，例如GRANT语句；在这种情况下，会自动执行COMMIT语句。</p>
<p>断开与数据库的连接。</p>
<p>执行了一套DML，该语句却失败了；在这种情况中，会为这个无效的DML语句执行ROLLBACK语句。</p>
<h1 id="事务的四大特点-ACID"><a href="#事务的四大特点-ACID" class="headerlink" title="事务的四大特点(ACID)"></a>事务的四大特点(ACID)</h1><p>atomicity（原子性）<br>·表示一个事务内的所有操作是一个整体，要么全部成功，要么全失败；</p>
<p>consistency（一致性）<br>·表示一个事务内有一个操作失败时，所有的更改过的数据都必须回滚到修改前的状态。</p>
<p>isolation（隔离性）<br>·事务查看数据时数据所处的状态，要么是另一并发事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看中间状态的数据。</p>
<p>durability（持久性）<br>·持久性事务完成之后，它对于系统的影响是永久性的。</p>
<h1 id="事务隔离级别从低到高"><a href="#事务隔离级别从低到高" class="headerlink" title="事务隔离级别从低到高"></a>事务隔离级别从低到高</h1><p>读取未提交（Read Uncommitted）</p>
<p>读取已提交（Read Committed）</p>
<p>可重复读（Repeatable Read）</p>
<p>序列化（serializable）</p>
]]></content>
      <categories>
        <category>MySQL数据库</category>
      </categories>
      <tags>
        <tag>MySQL数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL存储过程的语法</title>
    <url>/2019/09/19/MySQL%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E7%9A%84%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="MySQL存储过程的语法"><a href="#MySQL存储过程的语法" class="headerlink" title="MySQL存储过程的语法"></a>MySQL存储过程的语法</h1><p>  含义：一组预先编译好的SQL语句的集合，理解成批处理语句<a id="more"></a></p>
<h1 id="创建语法"><a href="#创建语法" class="headerlink" title="创建语法"></a>创建语法</h1><p>create procedure 存储过程名(参数列表)<br>begin<br>       存储过程体(一组合法的SQL语句)<br>end</p>
<h1 id="调用语法"><a href="#调用语法" class="headerlink" title="调用语法"></a>调用语法</h1><p>call 存储过程名(实参列表);</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>1、参数列表包含三部分<br>参数模式  参数名  参数类型<br>举例：<br>IN stuname varchar(20)</p>
<p>参数模式：<br>IN：该参数可以作为输入，也就是该参数需要调用方传入值</p>
<p>OU：该参数可以作为输出，也就是该参数可以作为返回值</p>
<p>INOUT：既可以输入也可以输出，也就是该参数既需要传入值，又可以返回值</p>
<p>2、如果存储过程体仅仅只有一句话，begin  end可以省略。</p>
<p>存储过程体中的每条SQL语句的结尾要求必须加分号。</p>
<p>存储过程体中的结尾可以使用 delimiter 重新设置。<br>语法：<br>delimiter 结束标记<br>案例：<br>delimiter *</p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="空参列表（不带参数）"><a href="#空参列表（不带参数）" class="headerlink" title="空参列表（不带参数）"></a>空参列表（不带参数）</h2><p>插入2条记录到admin表中</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter *</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> c()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">admin</span>(<span class="keyword">name</span>,<span class="string">'password'</span>)</span><br><span class="line">	<span class="keyword">values</span>(<span class="string">'jack'</span>,<span class="number">123456</span>),(<span class="string">'rose'</span>,<span class="number">678910</span>);</span><br><span class="line"><span class="keyword">end</span> *</span><br><span class="line"></span><br><span class="line">调用</span><br><span class="line"><span class="keyword">call</span> c()*</span><br></pre></td></tr></table></figure>

<h2 id="带in模式参数模式的存储过程"><a href="#带in模式参数模式的存储过程" class="headerlink" title="带in模式参数模式的存储过程"></a>带in模式参数模式的存储过程</h2><p>创建存储过程实现  根据女生名字，查询对应的男朋友信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> c1(<span class="keyword">in</span> beautyname <span class="built_in">varchar</span>(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line">	<span class="keyword">select</span> bo.* <span class="keyword">from</span> boys bo <span class="keyword">right</span> <span class="keyword">join</span> beauty b <span class="keyword">on</span> bo.id=b.boyfriend_id</span><br><span class="line">	<span class="keyword">where</span> b.name=beautyname;</span><br><span class="line"><span class="keyword">end</span> *</span><br><span class="line"></span><br><span class="line">调用</span><br><span class="line"><span class="keyword">call</span> c1(<span class="string">'苍井空'</span>)* (这里可能报错，是字符集问题，可以修改字符集：<span class="keyword">set</span> <span class="keyword">names</span> gbk)</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">names</span> gbk*</span><br></pre></td></tr></table></figure>

<h2 id="带out模式的存储过程"><a href="#带out模式的存储过程" class="headerlink" title="带out模式的存储过程"></a>带out模式的存储过程</h2><p>根据女生名字，返回男朋友信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> c2(<span class="keyword">in</span> beautyname <span class="built_in">varchar</span>(<span class="number">10</span>),<span class="keyword">out</span> boyname <span class="built_in">varchar</span>(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">select</span> bo.boyname <span class="keyword">from</span> boys bo <span class="keyword">inner</span> <span class="keyword">join</span> beauty b <span class="keyword">on</span> bo.id=b.boyfriend_id</span><br><span class="line">	<span class="keyword">where</span> b.name=beautyname;</span><br><span class="line"><span class="keyword">end</span> *</span><br><span class="line"></span><br><span class="line">调用</span><br><span class="line"><span class="keyword">set</span> @bName* (定义用户变量)</span><br><span class="line"><span class="keyword">call</span> c2(<span class="string">'苍井空'</span>,@bName)*</span><br><span class="line"><span class="keyword">select</span> @bName*</span><br></pre></td></tr></table></figure>

<h2 id="带inout模式参数的存储过程"><a href="#带inout模式参数的存储过程" class="headerlink" title="带inout模式参数的存储过程"></a>带inout模式参数的存储过程</h2><p>传入a和b两个值，最终a和b都翻倍并返回</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">creat procedure c3(inout a int,inout b int)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">set</span> a=a*<span class="number">2</span>;  <span class="comment"># 局部变量赋值</span></span><br><span class="line">	<span class="keyword">set</span> b=b*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">end</span>*</span><br><span class="line"></span><br><span class="line">调用</span><br><span class="line"><span class="keyword">set</span> @m=<span class="number">10</span>*</span><br><span class="line"><span class="keyword">set</span> @g=<span class="number">20</span>*</span><br><span class="line"><span class="keyword">call</span> c3(@m,@g)*</span><br><span class="line"><span class="keyword">select</span> @m,@g;</span><br></pre></td></tr></table></figure>

<h1 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h1><p>语法：drop procedure 存储过程名称 #一次只能删除一个。</p>
<h1 id="查看存储过程的信息"><a href="#查看存储过程的信息" class="headerlink" title="查看存储过程的信息"></a>查看存储过程的信息</h1><p>show create procedure c;</p>
]]></content>
      <categories>
        <category>MySQL数据库</category>
      </categories>
      <tags>
        <tag>MySQL数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-简单运行</title>
    <url>/2020/04/29/MyBatis-%E7%AE%80%E5%8D%95%E8%BF%90%E8%A1%8C/</url>
    <content><![CDATA[<p>MyBatis的简单运行<a id="more"></a></p>
<h1 id="全局配置文件"><a href="#全局配置文件" class="headerlink" title="全局配置文件"></a>全局配置文件</h1><p>配置文件与映射文件存在于根目录</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/test"</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 将写好的sql映射文件（StudentMapper.xml）一定要注册到全局配置文件（mybatis-config.xml）中 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"StudentMapper.xml"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="映射文件"><a href="#映射文件" class="headerlink" title="映射文件"></a>映射文件</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta"> PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta"> "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"Dao.StudentDao"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">namespace:名称空间;这里指定为接口的全类名</span></span><br><span class="line"><span class="comment">id：唯一标识,使用接口的方法名称</span></span><br><span class="line"><span class="comment">resultType：返回值类型</span></span><br><span class="line"><span class="comment">#&#123;id&#125;：从传递过来的参数中取出id值</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> </span><br><span class="line"> 	<span class="comment">&lt;!-- public Student getStudentId(Integer id); --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentId"</span> <span class="attr">resultType</span>=<span class="string">"student.Student"</span>&gt;</span></span><br><span class="line">		select * from user where id = #&#123;id&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- public void updateStudent(Integer id,String Name,String sex); </span></span><br><span class="line"><span class="comment">		 public void updateStudent(@Param("id")Integer id,@Param("name")String Name,@Param("sex")String sex);</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateStudent"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 当有多个参数时无法使用属性名来进行绑定,可以使用param1.....paramN 来进行绑定</span></span><br><span class="line"><span class="comment">		update user set name=#&#123;param2&#125;,sex=#&#123;param3&#125; where id=#&#123;param1&#125;	--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 如要使用属性名绑定使用@param("")来进行绑定 --&gt;</span></span><br><span class="line">		update user set name=#&#123;name&#125;,sex=#&#123;sex&#125; where id=#&#123;id&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- public void addStudent(Student student); --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addStudent"</span>&gt;</span></span><br><span class="line">		insert into user(name,sex) values(#&#123;name&#125;,#&#123;sex&#125;)</span><br><span class="line">	<span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- public void deleteStudent(Integer id); --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteStudent"</span>&gt;</span></span><br><span class="line">		delete from user where id=#&#123;id&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Integer Id;</span><br><span class="line">	<span class="keyword">private</span> String Name;</span><br><span class="line">	<span class="keyword">private</span> String Sex;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">		Id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		Name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Sex;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">		Sex = sex;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"Student [Id="</span> + Id + <span class="string">", Name="</span> + Name + <span class="string">", Sex="</span> + Sex + <span class="string">"]"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, String sex)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		Name = name;</span><br><span class="line">		Sex = sex;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> student.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Student <span class="title">getStudentId</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(Student student)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateStudent</span><span class="params">(@Param(<span class="string">"id"</span>)</span>Integer id,@<span class="title">Param</span><span class="params">(<span class="string">"name"</span>)</span>String Name,@<span class="title">Param</span><span class="params">(<span class="string">"sex"</span>)</span>String sex)</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteStudent</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> student.mybatis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Dao.StudentDao;</span><br><span class="line"><span class="keyword">import</span> student.Student;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyBatis_Test</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">getSqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">		InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 1、根据xml配置文件（全局配置文件）创建一个SqlSessionFactory对象 有数据源一些运行环境信息</span></span><br><span class="line"><span class="comment">	 * 2、sql映射文件；配置了每一个sql，以及sql的封装规则等。 </span></span><br><span class="line"><span class="comment">	 * 3、将sql映射文件注册在全局配置文件中</span></span><br><span class="line"><span class="comment">	 * 4、写代码：</span></span><br><span class="line"><span class="comment">	 * 		1）、根据全局配置文件得到SqlSessionFactory；</span></span><br><span class="line"><span class="comment">	 * 		2）、使用sqlSession工厂，获取到sqlSession对象使用他来执行增删改查</span></span><br><span class="line"><span class="comment">	 * 			一个sqlSession就是代表和数据库的一次会话，用完关闭</span></span><br><span class="line"><span class="comment">	 * 		3）、使用sql的唯一标志来告诉MyBatis执行哪个sql。sql都是保存在sql映射文件中的。</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="comment">//基础方式</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">// 2、获取sqlSession实例，能直接执行已经映射的sql语句</span></span><br><span class="line">				<span class="comment">// sql的唯一标识：statement Unique identifier matching the statement to use.</span></span><br><span class="line">				<span class="comment">// 执行sql要用的参数：parameter A parameter object to pass to the statement.</span></span><br><span class="line">				SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();</span><br><span class="line"></span><br><span class="line">				SqlSession openSession = sqlSessionFactory.openSession();</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">						<span class="comment">//命名空间+id,这里没使用接口绑定,StudentMapper 随便起的命名空间，getStudentById id名称</span></span><br><span class="line">					Student student = openSession.selectOne(<span class="string">"StudentMapper.getStudentById"</span>, <span class="number">1</span>);</span><br><span class="line">					System.out.println(student);</span><br><span class="line">				&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">					openSession.close();</span><br><span class="line">				&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//推荐使用这种方法</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="comment">//1.获取SqlSessionFactory</span></span><br><span class="line">		SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//2.获取sqlSession</span></span><br><span class="line">		SqlSession openSession = sqlSessionFactory.openSession();</span><br><span class="line">		<span class="comment">//3.获取接口实现类对象</span></span><br><span class="line">		<span class="comment">//为接口自动创建一个代理对象，代理对象执行增删改查</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">		StudentDao studentDao = openSession.getMapper(StudentDao.class);</span><br><span class="line">		<span class="comment">//4.调用方法</span></span><br><span class="line">		Student student =studentDao.getStudentId(<span class="number">1</span>);</span><br><span class="line">		System.out.println(student);</span><br><span class="line">		&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">			openSession.close();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();</span><br><span class="line">		SqlSession openSession = sqlSessionFactory.openSession();</span><br><span class="line">		StudentDao studentDao = openSession.getMapper(StudentDao.class);</span><br><span class="line">		<span class="comment">//Student student = new Student("李四","男");</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//添加方法</span></span><br><span class="line">			<span class="comment">//studentDao.addStudent(student);</span></span><br><span class="line">			<span class="comment">//删除方法</span></span><br><span class="line">			<span class="comment">//studentDao.deleteStudent(6);</span></span><br><span class="line">			<span class="comment">//修改方法</span></span><br><span class="line">			studentDao.updateStudent(<span class="number">7</span>,<span class="string">"李四"</span>, <span class="string">"男"</span>);</span><br><span class="line">			<span class="comment">//手动提交 可以设置sqlSessionFactory.openSession(true)</span></span><br><span class="line">			openSession.commit();</span><br><span class="line">		&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">			openSession.close();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>ServletConfig对象以及方法</title>
    <url>/2020/02/18/ServletConfig%E5%AF%B9%E8%B1%A1%E4%BB%A5%E5%8F%8A%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>ServletConfig对象对应web.xml文件中的<servlet>元素，在Servlet的配置文件web.xml中，可以使用一个或多个<init-param>标签为servlet配置一些初始化参数，然后使用ServletConfig对象中的方法一一获取。<a id="more"></a></init-param></servlet></p>
<h1 id="通过ServletConfig获取Servlet的初始化参数"><a href="#通过ServletConfig获取Servlet的初始化参数" class="headerlink" title="通过ServletConfig获取Servlet的初始化参数"></a>通过ServletConfig获取Servlet的初始化参数</h1><p>　当servlet配置了初始化参数后，web容器在创建servlet实例对象时，会自动将这些初始化参数封装到ServletConfig对象中，并在调用servlet的init方法时，将ServletConfig对象传递给servlet。进而，我们通过ServletConfig对象就可以得到当前servlet的初始化参数信息。</p>
<h2 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">		<span class="comment">//这是获取servlet的配置信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">		<span class="comment">/*getInitParameter("参数名")用于获取参数值*/</span></span><br><span class="line">		String user = config.getInitParameter(<span class="string">"user"</span>);</span><br><span class="line">		String user1 = config.getInitParameter(<span class="string">"root"</span>);</span><br><span class="line">		System.out.println(<span class="string">"user:"</span> + user);System.out.println(<span class="string">"user:"</span> + user1);</span><br><span class="line">		<span class="comment">/*getInitParameterNames()用于获取参数名*/</span></span><br><span class="line">		Enumeration&lt;String&gt; name = config.getInitParameterNames();</span><br><span class="line">		<span class="keyword">while</span>(name.hasMoreElements()) &#123;</span><br><span class="line">			String name1 = name.nextElement();</span><br><span class="line">			System.out.println(<span class="string">"password:"</span> + name1);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">/*getServletName()用于获取服务器名称(了解即可)*/</span></span><br><span class="line">		String ServletName = config.getServletName();</span><br><span class="line">		System.out.println(ServletName);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Web-xml"><a href="#Web-xml" class="headerlink" title="Web.xml"></a>Web.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置和映射 Servlet --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- Servlet 注册的名字 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletConfig_Study<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- Servlet 的全类名 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>TTT.ServletConfig_Study<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置 Serlvet 的初始化参数 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 参数名由 getInitParameterNames()方法获取 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>user<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 参数值由 getInitParameter("参数名") 方法获取--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>123<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>root<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>464<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<blockquote><p>user:123<br>user:464<br>password:root<br>password:user<br>ServletConfig_Study</p>
</blockquote>

<h1 id="ServletConfig对象的方法"><a href="#ServletConfig对象的方法" class="headerlink" title="ServletConfig对象的方法"></a>ServletConfig对象的方法</h1><p> getInitParameterNames()方法、getInitParameter()方法、getServletName()方法、getServletContext()方法，getServletContext()方法非常重要。</p>
<h2 id="getInitParameterNames-方法"><a href="#getInitParameterNames-方法" class="headerlink" title="getInitParameterNames()方法"></a>getInitParameterNames()方法</h2><p>  getInitParameterNames()方法用于获取参数的名字，返回值为Enumeration<e>类型。<br>  例子:</e></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Enumeration&lt;String&gt; name = config.getInitParameterNames();</span><br><span class="line">		<span class="keyword">while</span>(name.hasMoreElements()) &#123;</span><br><span class="line">			String name1 = name.nextElement();</span><br><span class="line">			System.out.println(<span class="string">"password:"</span> + name1);</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<h2 id="getInitParameter-方法"><a href="#getInitParameter-方法" class="headerlink" title="getInitParameter()方法"></a>getInitParameter()方法</h2><p>getInitParameter()方法用于获取参数名的值，返回值为String类型。<br>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String user = config.getInitParameter(<span class="string">"user"</span>);</span><br></pre></td></tr></table></figure>

<h2 id="getServletName-方法"><a href="#getServletName-方法" class="headerlink" title="getServletName()方法"></a>getServletName()方法</h2><p>getServletName()用于获取服务器名称(了解即可)，返回值String类型。<br>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String ServletName = config.getServletName();</span><br></pre></td></tr></table></figure>

<h2 id="getServletContext-方法"><a href="#getServletContext-方法" class="headerlink" title="getServletContext()方法"></a>getServletContext()方法</h2><p>  ServletContext 可以由  SerlvetConfig对象 获取：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">		<span class="comment">//config是 SerlvetConfig对象</span></span><br><span class="line">ServletContext servletContext = config.getServletContext();</span><br></pre></td></tr></table></figure>

<p>该对象代表当前 WEB 应用: 可以认为 SerlvetContext 是当前 WEB 应用的一个大管家. 可以从中获取到当前 WEB 应用的各个方面的信息.</p>
<h3 id="①获取当前-Web-应用的初始化参数"><a href="#①获取当前-Web-应用的初始化参数" class="headerlink" title="①获取当前 Web 应用的初始化参数"></a>①获取当前 Web 应用的初始化参数</h3><p> 设置初始化参数: 可以为所有的 Servlet 所获取, 而 Servlet 的初始化参数只用那个 Serlvet 可以获取. </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置当前 Web 应用的初始化参数 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 上下文的参数 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 参数名由 getInitParameterNames()方法获取 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>driver<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 参数值由 getInitParameter("参数名") 方法获取--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>jdbcurl<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/text<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取ServletContext对象</span></span><br><span class="line">		ServletContext servletContext = config.getServletContext();</span><br><span class="line">		<span class="comment">//getInitParameter("参数名")用于获取参数值</span></span><br><span class="line">		String driver = servletContext.getInitParameter(<span class="string">"driver"</span>);</span><br><span class="line">		String jdbcurl = servletContext.getInitParameter(<span class="string">"jdbcurl"</span>);</span><br><span class="line">		System.out.println(<span class="string">"driver:"</span> + driver);System.out.println(<span class="string">"jdbcurl:"</span> + jdbcurl);</span><br><span class="line">		<span class="comment">//getInitParameterNames()用于获取参数名</span></span><br><span class="line">		Enumeration&lt;String&gt; n = servletContext.getInitParameterNames();</span><br><span class="line">		<span class="keyword">while</span>(n.hasMoreElements()) &#123;</span><br><span class="line">			String name1 = n.nextElement();</span><br><span class="line">			System.out.println(<span class="string">"name:"</span> + name1);</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<blockquote><p>driver:com.mysql.jdbc.Driver<br>jdbcurl:jdbc:mysql://localhost:3306/text<br>name:driver<br>name:jdbcurl</p>
</blockquote>

<h3 id="②获取当前-WEB-应用的某一个文件在服务器上的绝对路径-而不是部署前的路径"><a href="#②获取当前-WEB-应用的某一个文件在服务器上的绝对路径-而不是部署前的路径" class="headerlink" title="②获取当前 WEB 应用的某一个文件在服务器上的绝对路径, 而不是部署前的路径"></a>②获取当前 WEB 应用的某一个文件在服务器上的绝对路径, 而不是部署前的路径</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">tring realPath = servletContext.getRealPath(<span class="string">"/note.txt"</span>);</span><br><span class="line">System.out.println(realPath);</span><br></pre></td></tr></table></figure>

<h3 id="③获取当前-WEB-应用的名称"><a href="#③获取当前-WEB-应用的名称" class="headerlink" title="③获取当前 WEB 应用的名称"></a>③获取当前 WEB 应用的名称</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String contextPath = servletContext.getContextPath();</span><br><span class="line">System.out.println(contextPath);</span><br></pre></td></tr></table></figure>

<h3 id="④获取当前-WEB-应用的某一个文件对应的输入流"><a href="#④获取当前-WEB-应用的某一个文件对应的输入流" class="headerlink" title="④获取当前 WEB 应用的某一个文件对应的输入流."></a>④获取当前 WEB 应用的某一个文件对应的输入流.</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="comment">//getResourceAsStream(String path): path 的 / 为当前 WEB 应用的根目录. </span></span><br><span class="line">InputStream is2 = servletContext.getResourceAsStream(<span class="string">"/WEB-INF/classes/jdbc.properties"</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis缓存机制</title>
    <url>/2020/05/07/MyBatis%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<style>
    p{margin:0px 0} 
</style>
<p>MyBatis包含一个非常强大的查询缓存特性，它可以非常方便地配置和定制。缓存可以极大的提升查询效率。MyBatis系统中默认定义了两级缓存。<a id="more"></a></p>
<h1 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h1><p>一级缓存：（本地缓存）：sqlSession级别的缓存。一级缓存是一直开启的；SqlSession级别的一个Map</p>
<p>&nbsp&nbsp&nbsp&nbsp 以后如果需要获取相同的数据，直接从缓存中拿，没必要再去查询数据库</p>
<p>&nbsp&nbsp&nbsp&nbsp 一级缓存失效情况（没有使用到当前一级缓存的情况，效果就是，还需要再向数据库发出查询）：
</p>
<p>&nbsp&nbsp&nbsp&nbsp 1、sqlSession不同。</p>
<p>&nbsp&nbsp&nbsp&nbsp 2、sqlSession相同，查询条件不同(当前一级缓存中还没有这个数据)</p>
<p>&nbsp&nbsp&nbsp&nbsp 3、sqlSession相同，两次查询之间执行了增删改操作(这次增删改可能对当前数据有影响)</p>
<p>&nbsp&nbsp&nbsp&nbsp 4、sqlSession相同，手动清除了一级缓存(sqlSession.clearCache())（缓存清空）</p>

<h1 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h1><p>二级缓存：（全局缓存）：基于namespace级别的缓存：一个namespace对应一个二级缓存：</p>
<p>&nbsp 工作机制：</p>
<p>&nbsp&nbsp&nbsp 1、一个会话，查询一条数据，这个数据就会被放在当前会话的一级缓存中；</p>
<p>&nbsp&nbsp&nbsp 2、如果会话关闭；一级缓存中的数据会被保存到二级缓存中；新的会话查询信息，就可以参照二级缓存中的内容</p>
<p>&nbsp&nbsp&nbsp 3、sqlSession===StudentMapper==>Student</p>
<p>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp BanMapper===>Ban</p>
<p>&nbsp&nbsp&nbsp&nbsp 不同namespace查出的数据会放在自己对应的缓存中（map）</p>            
<p>&nbsp&nbsp&nbsp&nbsp 效果：数据会从二级缓存中获取</p>
<p>&nbsp&nbsp&nbsp&nbsp 查出的数据都会被默认先放在一级缓存中。</p>
<p>&nbsp&nbsp&nbsp&nbsp 只有会话提交或者关闭以后，一级缓存中的数据才会转移到二级缓存中</p>
<p>&nbsp&nbsp 使用：</p>              
<p>&nbsp&nbsp&nbsp&nbsp&nbsp 1、开启全局二级缓存配置：<setting name="cacheEnabled" value="true"></setting></p>
<p>&nbsp&nbsp&nbsp&nbsp&nbsp 2、去mapper.xml中配置使用二级缓存</p>    
<p>&nbsp&nbsp&nbsp&nbsp&nbsp 3、我们的POJO需要实现序列化接口(implement Serializable)</p>

<h2 id="和缓存有关的设置-属性："><a href="#和缓存有关的设置-属性：" class="headerlink" title="和缓存有关的设置/属性："></a>和缓存有关的设置/属性：</h2><p>&nbsp&nbsp&nbsp 1、cacheEnabled=true：false：关闭缓存（二级缓存关闭）(一级缓存一直可用的)</p>
<p>&nbsp&nbsp&nbsp 2、每个select标签都有useCache="true"</p>
<p>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp  false：不使用缓存（一级缓存依然使用，二级缓存不使用）</p>    
<p>&nbsp&nbsp&nbsp 3、每个增删改标签的：flushCache="true"：（一级二级都会清除默认就是ture）</p>
<p>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp 增删改执行完成后就会清除缓存</p>
<p>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp 测试：flushCache="true"：一级缓存就清空了；二级也会被清除</p>        
<p>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp 查询标签：flushCache="false"(查询标签默认false)</p>            
<p>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp 如果flushCache=true;每次查询之后都会清空缓存；缓存是没有被使用的</p>
<p>&nbsp&nbsp&nbsp 4、sqlSession.clearCache();只是清除当前session的一级缓存</p>
<p>&nbsp&nbsp&nbsp 5、localCacheScope：本地缓存作用域:(一级缓存SESSION(默认))当前会话的所有数据保存在会话缓存中</p>
<p>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp  STATEMENT：可以禁用一级缓存</p>

<h1 id="cache标签"><a href="#cache标签" class="headerlink" title="cache标签"></a>cache标签</h1><p>cache标签在Xml文件中的属性。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;cache eviction="FIFO" flushInterval="60000" readOnly="false" size="1024"&gt;&lt;/cache&gt; --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">cache</span>&gt;</span><span class="tag">&lt;/<span class="name">cache</span>&gt;</span>(完全使用默认值)</span><br><span class="line">	<span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">	eviction:缓存的回收策略</span></span><br><span class="line"><span class="comment">		• LRU – 最近最少使用的：移除最长时间不被使用的对象。</span></span><br><span class="line"><span class="comment">		• FIFO – 先进先出：按对象进入缓存的顺序来移除它们。</span></span><br><span class="line"><span class="comment">		• SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。</span></span><br><span class="line"><span class="comment">		• WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。</span></span><br><span class="line"><span class="comment">		• 默认的是 LRU。</span></span><br><span class="line"><span class="comment">	flushInterval：缓存刷新间隔</span></span><br><span class="line"><span class="comment">		缓存多长时间清空一次，默认不清空，设置一个毫秒值。</span></span><br><span class="line"><span class="comment">	readOnly:是否只读</span></span><br><span class="line"><span class="comment">		true：只读；mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据。</span></span><br><span class="line"><span class="comment">				 mybatis为了加快获取速度，直接就会将数据在缓存中的引用交给用户。不安全，速度快。</span></span><br><span class="line"><span class="comment">		false(默认)：非只读：mybatis觉得获取的数据可能会被修改。</span></span><br><span class="line"><span class="comment">				mybatis会利用序列化&amp;反序列的技术克隆一份新的数据给你。安全，速度慢。</span></span><br><span class="line"><span class="comment">	size：缓存存放多少元素</span></span><br><span class="line"><span class="comment">	type=""：指定自定义缓存的全类名</span></span><br><span class="line"><span class="comment">			实现Cache接口即可</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring xml学习</title>
    <url>/2020/04/02/Spring%20xml%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>Spring xml 的一些基本配置。<a id="more"></a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置bean 需要有相对应的setter方法--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloWord"</span> <span class="attr">class</span>=<span class="string">"HelloWord.HelloWord"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Spring"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 配置单独的bean --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"HelloWord.Person"</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 使用构造器来填充数据，需按照属性顺序 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"小丽"</span> &gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"女"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"45000"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 空值填充 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span><span class="tag">&lt;<span class="name">null</span>/&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"HelloWord.Student"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"张三 "</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"男 "</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>	</span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">value</span>=<span class="string">"2019-1-2"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>	</span><br><span class="line">	<span class="comment">&lt;!-- 使用ref进行调用定义的bean --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"person"</span>  <span class="attr">ref</span>=<span class="string">"person"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line">	<span class="comment">&lt;!-- 使用自动装配(根据名字进行自动装配)  这里还使用了P命名空间(需开启)--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">class</span>=<span class="string">"List.Test"</span> <span class="attr">p:name</span>=<span class="string">"测试"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 测试配置的继承 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 可以使用bean的 abstract="true" 属性来设置抽象bean，不能被IOC容器实例化 只用来被继承配置--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 如果没有指定class 必须将Bean设定为抽象Bean --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address"</span> <span class="attr">class</span>=<span class="string">"List.Address"</span> <span class="attr">p:address</span>=<span class="string">"重庆"</span> <span class="attr">p:street</span>=<span class="string">"万盛"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address2"</span> <span class="attr">class</span>=<span class="string">"List.Address"</span>  <span class="attr">p:street</span>=<span class="string">"渝北"</span> <span class="attr">parent</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">		使用bean 的scope 属性来设置bean 的作用域</span></span><br><span class="line"><span class="comment">		singleton：默认值，容器初始时创建bean 实例，在整个容器的生命周期内只创建这一个bean，单例的。</span></span><br><span class="line"><span class="comment">		prototype：原型的，容器初始化时不创建bean 的实例，而在每次请求时都创建一个新的bean 实例并返回。</span></span><br><span class="line"><span class="comment">	 --&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"Person"</span> <span class="attr">class</span>=<span class="string">"HelloWord.Person"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	 <span class="comment">&lt;!-- 外部文件 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:pro.properties"</span>/&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbc"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">	 <span class="comment">&lt;!-- 使用外部文件的属性 --&gt;</span></span><br><span class="line">	  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;user&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">		        <span class="comment">//1.创建Spring的IOC 容器对象</span></span><br><span class="line">				ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">				<span class="comment">//2.从IOC 容器中获取Bean 示例</span></span><br><span class="line">				Test test = (Test) ctx.getBean(<span class="string">"test"</span>);</span><br><span class="line">				System.out.println(test);</span><br><span class="line">				</span><br><span class="line">				ApplicationContext ctx1 = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"Student2.xml"</span>);</span><br><span class="line">				<span class="comment">//2.从IOC 容器中获取Bean 示例</span></span><br><span class="line">				Address test1 = (Address) ctx1.getBean(<span class="string">"address"</span>);</span><br><span class="line">				System.out.println(test1);</span><br><span class="line">				</span><br><span class="line">				test1 = (Address) ctx.getBean(<span class="string">"address2"</span>);</span><br><span class="line">				System.out.println(test);</span><br><span class="line">				</span><br><span class="line">			ApplicationContext ctx2 = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"Student2.xml"</span>);</span><br><span class="line">			DataSource dataSource =  (DataSource) ctx2.getBean(<span class="string">"jdbc"</span>);</span><br><span class="line">			System.out.println(dataSource.getConnection());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 测试 SpEL: 可以为属性进行动态的赋值(了解) --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"girl"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.spring.helloworld.User"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">value</span>=<span class="string">"周迅"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"boy"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.spring.helloworld.User"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"destroy"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">value</span>=<span class="string">"高胜远"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"wifeName"</span> <span class="attr">value</span>=<span class="string">"#&#123;girl.userName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 配置 bean 后置处理器: 不需要配置 id 属性, IOC 容器会识别到他是一个 bean 后置处理器, 并调用其方法 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.atguigu.spring.ref.MyBeanPostProcessor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 通过工厂方法的方式来配置 bean --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 1. 通过静态工厂方法: 一个类中有一个静态方法, 可以返回一个类的实例(了解) --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 在 class 中指定静态工厂方法的全类名, 在 factory-method 中指定静态工厂方法的方法名 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dateFormat"</span> <span class="attr">class</span>=<span class="string">"java.text.DateFormat"</span> <span class="attr">factory-method</span>=<span class="string">"getDateInstance"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 可以通过 constructor-arg 子节点为静态工厂方法指定参数 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 2. 实例工厂方法: 先需要创建工厂对象, 再调用工厂的非静态方法返回实例(了解) --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- ①. 创建工厂对应的 bean --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"simpleDateFormat"</span> <span class="attr">class</span>=<span class="string">"java.text.SimpleDateFormat"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"yyyy-MM-dd hh:mm:ss"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- ②. 有实例工厂方法来创建 bean 实例 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- factory-bean 指向工厂 bean, factory-method 指定工厂方法(了解) --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"datetime"</span> <span class="attr">factory-bean</span>=<span class="string">"simpleDateFormat"</span> <span class="attr">factory-method</span>=<span class="string">"parse"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 通过 constructor-arg 执行调用工厂方法需要传入的参数 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"1990-12-12 12:12:12"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 配置通过 FactroyBean 的方式来创建 bean 的实例(了解) --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.spring.ref.UserBean"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring 基础</category>
      </categories>
      <tags>
        <tag>Spring 基础</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP单向通讯</title>
    <url>/2019/08/15/TCP%E5%8D%95%E5%90%91%E9%80%9A%E8%AE%AF/</url>
    <content><![CDATA[<h1 id="TCP单向通讯"><a href="#TCP单向通讯" class="headerlink" title="TCP单向通讯"></a>TCP单向通讯</h1><p>在网络通讯中，第一次主动发起通讯的程序被称作客户端(Client)程序，简称客户端，而在第一次通讯中等待连接的程序被称作服务器端(Server)程序，简称服务器。一旦通讯建立，则客户端和服务器端完全一样，没有本质的区别。<a id="more"></a></p>
<h1 id="请求-响应模式："><a href="#请求-响应模式：" class="headerlink" title="请求-响应模式："></a>请求-响应模式：</h1><ol>
<li>Socket类：发送TCP消息。</li>
<li>ServerSocket类：创建服务器。<br>套接字是一种进程间的数据交换机制。这些进程既可以在同一机器上，也可以在通过网络连接的不同机器上。换句话说，套接字起到通信端点的作用。单个套接字是一个端点，而一对套接字则构成一个双向通信信道，使非关联进程可以在本地或通过网络进行数据交换。一旦建立套接字连接，数据即可在相同或不同的系统中双向或单向发送，直到其中一个端点关闭连接。套接字与主机地址和端口地址相关联。主机地址就是客户端或服务器程序所在的主机的IP地址。端口地址是指客户端或服务器程序使用的主机的通信端口。<br>在客户端和服务器中，分别创建独立的Socket，并通过Socket的属性，将两个Socket进行连接，这样，客户端和服务器通过套接字所建立的连接使用输入输出流进行通信。<br>TCP/IP套接字是最可靠的双向流协议，使用TCP/IP可以发送任意数量的数据。<br>实际上，套接字只是计算机上已编号的端口。如果发送方和接收方计算机确定好端口，他们就可以通信了。<h1 id="TCP-IP通信连接的简单过程："><a href="#TCP-IP通信连接的简单过程：" class="headerlink" title="TCP/IP通信连接的简单过程："></a>TCP/IP通信连接的简单过程：</h1>位于A计算机上的TCP/IP软件向B计算机发送包含端口号的消息，B计算机的TCP/IP软件接收该消息，并进行检查，查看是否有它知道的程序正在该端口上接收消息。如果有，他就将该消息交给这个程序。<br>要使程序有效地运行，就必须有一个客户端和一个服务器。<h1 id="通过Socket的编程顺序："><a href="#通过Socket的编程顺序：" class="headerlink" title="通过Socket的编程顺序："></a>通过Socket的编程顺序：</h1></li>
<li>创建服务器ServerSocket，在创建时，定义ServerSocket的监听端口(在这个端口接收客户端发来的消息)。</li>
<li>ServerSocket调用accept()方法，使之处于阻塞状态。</li>
<li>创建客户端Socket，并设置服务器的IP及端口。</li>
<li>客户端发出连接请求，建立连接。</li>
<li>分别取得服务器和客户端Socket的InputStream和OutputStream。</li>
<li>利用Socket和ServerSocket进行数据传输。</li>
<li>关闭流及Socket。<h1 id="单项通讯服务器："><a href="#单项通讯服务器：" class="headerlink" title="单项通讯服务器："></a>单项通讯服务器：</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务器：</span></span><br><span class="line"><span class="comment"> * 1.指定端口，使用ServerSocket创建服务器</span></span><br><span class="line"><span class="comment"> * 2.阻塞式等待链接 accept 返回一个Socket</span></span><br><span class="line"><span class="comment"> * 3.操作：输入输出流</span></span><br><span class="line"><span class="comment"> * 4.释放资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCP_Server</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"-------Server-------"</span>);</span><br><span class="line">		<span class="comment">//1.指定端口，使用ServerSocket创建服务器</span></span><br><span class="line">		ServerSocket SS=<span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">		<span class="comment">// 2.阻塞式等待链接 accept</span></span><br><span class="line">		Socket Client=SS.accept();</span><br><span class="line">		System.out.println(<span class="string">"客户端连接已建立"</span>);</span><br><span class="line">		<span class="comment">// 3.操作：输入输出流</span></span><br><span class="line">		DataInputStream dis=<span class="keyword">new</span> DataInputStream(Client.getInputStream());</span><br><span class="line">		String st=dis.readUTF();</span><br><span class="line">		System.out.println(st);</span><br><span class="line">		<span class="comment">// 4.释放资源</span></span><br><span class="line">		dis.close();</span><br><span class="line">		Client.close();</span><br><span class="line">	&#125;<span class="comment">//先启动服务器在启动客户端</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h2><blockquote><p>——-Server——-</p>
</blockquote>
<h1 id="单项通讯客户端："><a href="#单项通讯客户端：" class="headerlink" title="单项通讯客户端："></a>单项通讯客户端：</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端：</span></span><br><span class="line"><span class="comment"> * 1.建立连接：使用Socket创建客户端：服务器地址和端口</span></span><br><span class="line"><span class="comment"> * 2.操作：输入输出流</span></span><br><span class="line"><span class="comment"> * 3.释放资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCP_Client</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"-------Client-------"</span>);</span><br><span class="line">		<span class="comment">//1.建立连接：使用Socket创建客户端：服务器地址和端口</span></span><br><span class="line">		Socket S=<span class="keyword">new</span> Socket(<span class="string">"localhost"</span>,<span class="number">6666</span>);</span><br><span class="line">		<span class="comment">// 3.操作：输入输出流</span></span><br><span class="line">		DataOutputStream out=<span class="keyword">new</span> DataOutputStream(S.getOutputStream());</span><br><span class="line">		String st=<span class="string">"你好"</span>;</span><br><span class="line">		out.writeUTF(st);</span><br><span class="line">		out.flush();</span><br><span class="line">		<span class="comment">// 4.释放资源</span></span><br><span class="line">		out.close();</span><br><span class="line">		S.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="结果：-1"><a href="#结果：-1" class="headerlink" title="结果："></a>结果：</h2><blockquote><p>——-Server——-<br>客户端连接已建立<br>你好</p>
</blockquote>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>网络编程</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP文件上传</title>
    <url>/2019/08/15/TCP%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<h1 id="TCP文件上传"><a href="#TCP文件上传" class="headerlink" title="TCP文件上传"></a>TCP文件上传</h1><p>实现文件上传与服务器文件下载与拷贝。<a id="more"></a></p>
<h1 id="文件服务器："><a href="#文件服务器：" class="headerlink" title="文件服务器："></a>文件服务器：</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件服务器（下载|拷贝）：</span></span><br><span class="line"><span class="comment"> * 1.指定端口，使用ServerSocket创建服务器</span></span><br><span class="line"><span class="comment"> * 2.阻塞式等待链接 accept 返回一个Socket</span></span><br><span class="line"><span class="comment"> * 3.操作：输入输出流</span></span><br><span class="line"><span class="comment"> * 4.释放资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">File_Server</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"-------Server-------"</span>);</span><br><span class="line">		<span class="comment">//1.指定端口，使用ServerSocket创建服务器</span></span><br><span class="line">		ServerSocket SS=<span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">		<span class="comment">// 2.阻塞式等待链接 accept</span></span><br><span class="line">		Socket Client=SS.accept();</span><br><span class="line">		System.out.println(<span class="string">"客户端连接已建立"</span>);</span><br><span class="line">		<span class="comment">// 3.操作：输入输出流</span></span><br><span class="line">		InputStream buf=<span class="keyword">new</span> BufferedInputStream(Client.getInputStream());</span><br><span class="line">		OutputStream bof=<span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"c.txt"</span>));</span><br><span class="line">		<span class="keyword">byte</span> b[]=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">			<span class="keyword">while</span>(buf.read(b)!=-<span class="number">1</span>) &#123;</span><br><span class="line">				bof.write(b);				</span><br><span class="line">			&#125;</span><br><span class="line">			bof.flush();</span><br><span class="line">		<span class="comment">// 4.释放资源</span></span><br><span class="line">		bof.close();</span><br><span class="line">		buf.close();</span><br><span class="line">		Client.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="文件客户端："><a href="#文件客户端：" class="headerlink" title="文件客户端："></a>文件客户端：</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件客户端（上传）：</span></span><br><span class="line"><span class="comment"> * 1.建立连接：使用Socket创建客户端：服务器地址和端口</span></span><br><span class="line"><span class="comment"> * 2.操作：输入输出流</span></span><br><span class="line"><span class="comment"> * 3.释放资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">File_Client</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"-------Client-------"</span>);</span><br><span class="line">		<span class="comment">//1.建立连接：使用Socket创建客户端：服务器地址和端口</span></span><br><span class="line">		Socket S=<span class="keyword">new</span> Socket(<span class="string">"localhost"</span>,<span class="number">6666</span>);</span><br><span class="line">		<span class="comment">// 3.操作：输入输出流</span></span><br><span class="line">		InputStream buf=<span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"D:/javawork/java 17级软工学生体测数据统计系统/用户信息.txt"</span>));</span><br><span class="line">		OutputStream bof=<span class="keyword">new</span> BufferedOutputStream(S.getOutputStream());</span><br><span class="line">		<span class="keyword">byte</span> b[]=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">			<span class="keyword">while</span>(buf.read(b)!=-<span class="number">1</span>) &#123;</span><br><span class="line">				bof.write(b);				</span><br><span class="line">			&#125;</span><br><span class="line">			bof.flush();</span><br><span class="line">		<span class="comment">// 4.释放资源</span></span><br><span class="line">		S.close();</span><br><span class="line">		buf.close();</span><br><span class="line">		bof.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>网络编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring xml学习2</title>
    <url>/2020/04/05/Spring-xml%E5%AD%A6%E4%B9%A02/</url>
    <content><![CDATA[<p>通过注解配置 Bean。<a id="more"></a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 需要开启context --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 指定IOC容器的扫描的包  resource-pattern可以过滤特定的类--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- &lt;context:component-scan base-package="ContextTest"</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	resource-pattern="repository/*.class"&gt;&lt;/context:component-scan&gt; </span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- context:exclude-filter 子节点指定排除哪些指定表达式的组件 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- context:include-filter 子节点指定包含哪些表达式的组件,该子节点需要 use-default-filters 配合使用--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--  type="annotation 标注了XXXannotation 的类  type="assinable" 继承或扩展 XXXService 的类  --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"ContextTest"</span> </span></span><br><span class="line"><span class="tag">	 <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span> <span class="comment">&lt;!-- use-default-filters 是否使用默认filter 默认值 true --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--  &lt;context:exclude-filter type="annotation"</span></span><br><span class="line"><span class="comment">		expression="org.springframework.stereotype.Repository"/&gt;  --&gt;</span></span><br><span class="line">		</span><br><span class="line">		  <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> </span></span><br><span class="line"><span class="tag">		  		<span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Repository"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里包括主包和它的子包</span></span><br><span class="line"><span class="keyword">package</span> ContextTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRespository</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> ContextTest.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>  <span class="comment">//@Controller: 标识表现层组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"UserController"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> ContextTest.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>   <span class="comment">//@Service: 标识服务层(业务层)组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"UserService"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> ContextTest.testObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//@Component: 基本注解, 标识了一个受 Spring 管理的组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> ContextTest.UserRespositoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ContextTest.UserRespository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span>(<span class="string">"userRespository"</span>) <span class="comment">//@Respository: 标识持久层组件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRespositoryImpl</span> <span class="keyword">implements</span> <span class="title">UserRespository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"UserRespository"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="keyword">package</span> ContextTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ContextTest.controller.UserController;</span><br><span class="line"><span class="keyword">import</span> ContextTest.service.UserService;</span><br><span class="line"><span class="keyword">import</span> ContextTest.testObject.TestObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.annotation.xml"</span>);</span><br><span class="line">		TestObject test = (TestObject) ctx.getBean(<span class="string">"testObject"</span>);</span><br><span class="line">		System.out.println(test);</span><br><span class="line">		</span><br><span class="line">		UserController user = (UserController) ctx.getBean(<span class="string">"userController"</span>);</span><br><span class="line">		System.out.println(user);</span><br><span class="line">		</span><br><span class="line">		UserService service = (UserService) ctx.getBean(<span class="string">"userService"</span>);</span><br><span class="line">		System.out.println(service);</span><br><span class="line">		</span><br><span class="line">		UserRespository UserRespositor = (UserRespository) ctx.getBean(<span class="string">"userRespository"</span>);</span><br><span class="line">		System.out.println(UserRespositor);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="context:component-scan" target="_blank" rel="noopener">context:component-scan</a>元素还会自动注册 AutowiredAnnotationBeanPostProcessor 实例, 该实例可以自动装配具有 @Autowired 和 @Resource 、@Inject注解的属性.<br>@Autowired 注解自动装配具有兼容类型的单个 Bean属性<br>构造器, 普通字段(即使是非 public), 一切具有参数的方法都可以应用@Authwired 注解<br>默认情况下, 所有使用 @Authwired 注解的属性都需要被设置. 当 Spring 找不到匹配的 Bean 装配属性时, 会抛出异常, 若某一属性允许不被设置, 可以设置 @Authwired 注解的 required 属性为 false<br>默认情况下, 当 IOC 容器里存在多个类型兼容的 Bean 时, 通过类型的自动装配将无法工作. 此时可以在 @Qualifier 注解里提供 Bean 的名称. Spring 允许对方法的入参标注 @Qualifiter 已指定注入 Bean 的名称<br>@Authwired 注解也可以应用在数组类型的属性上, 此时 Spring 将会把所有匹配的 Bean 进行自动装配.<br>@Authwired 注解也可以应用在集合属性上, 此时 Spring 读取该集合的类型信息, 然后自动装配所有与之兼容的 Bean.<br>@Authwired 注解用在 java.util.Map 上时, 若该 Map 的键值为 String, 那么 Spring 将自动装配与之 Map 值类型兼容的 Bean, 此时 Bean 的名称作为键值<br>Spring 还支持 @Resource 和 @Inject 注解，这两个注解和 @Autowired 注解的功用类似<br>@Resource 注解要求提供一个 Bean 名称的属性，若该属性为空，则自动采用标注处的变量或方法名作为 Bean 的名称<br>@Inject 和 @Autowired 注解一样也是按类型匹配注入的 Bean， 但没有 reqired 属性<br>建议使用 @Autowired 注解</p>
]]></content>
      <categories>
        <category>Spring 基础</category>
      </categories>
      <tags>
        <tag>Spring 基础</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP双向通讯</title>
    <url>/2019/08/15/TCP%E5%8F%8C%E5%90%91%E9%80%9A%E8%AE%AF/</url>
    <content><![CDATA[<h1 id="TCP双向通讯"><a href="#TCP双向通讯" class="headerlink" title="TCP双向通讯"></a>TCP双向通讯</h1><p>实现双向通讯<a id="more"></a></p>
<h1 id="双向通讯服务器："><a href="#双向通讯服务器：" class="headerlink" title="双向通讯服务器："></a>双向通讯服务器：</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务器(双向)：</span></span><br><span class="line"><span class="comment"> * 1.指定端口，使用ServerSocket创建服务器</span></span><br><span class="line"><span class="comment"> * 2.阻塞式等待链接 accept 返回一个Socket</span></span><br><span class="line"><span class="comment"> * 3.操作：输入输出流</span></span><br><span class="line"><span class="comment"> * 4.释放资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCP_TwoWayServer</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"-------Server-------"</span>);</span><br><span class="line">		<span class="comment">//1.指定端口，使用ServerSocket创建服务器</span></span><br><span class="line">		ServerSocket SS=<span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">		<span class="comment">// 2.阻塞式等待链接 accept</span></span><br><span class="line">		Socket Client=SS.accept();</span><br><span class="line">		System.out.println(<span class="string">"客户端连接已建立"</span>);</span><br><span class="line">		<span class="comment">// 3.操作：输入输出流</span></span><br><span class="line">		DataInputStream dis=<span class="keyword">new</span> DataInputStream(Client.getInputStream());</span><br><span class="line">		String st=dis.readUTF();</span><br><span class="line">		String[] data =st.split(<span class="string">"&amp;"</span>);</span><br><span class="line">		String name=<span class="string">""</span>;</span><br><span class="line">		String pwd=<span class="string">""</span>;</span><br><span class="line">		<span class="keyword">for</span>(String b:data ) &#123;</span><br><span class="line">			String[] c=b.split(<span class="string">"="</span>);</span><br><span class="line">			<span class="keyword">if</span>(c[<span class="number">0</span>].equals(<span class="string">"name"</span>)) &#123;</span><br><span class="line">			<span class="comment">//System.out.println("用户名是："+c[1]);</span></span><br><span class="line">				name=c[<span class="number">1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">//System.out.println("密码是："+c[1]);</span></span><br><span class="line">				pwd=c[<span class="number">1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		DataOutputStream out=<span class="keyword">new</span> DataOutputStream(Client.getOutputStream());</span><br><span class="line">		<span class="keyword">if</span>(name.equals(<span class="string">"123"</span>)&amp;&amp;pwd.equals(<span class="string">"456"</span>)) &#123;</span><br><span class="line">			out.writeUTF(<span class="string">"登陆成功"</span>);	</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			out.writeUTF(<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="comment">// 4.释放资源</span></span><br><span class="line">		dis.close();</span><br><span class="line">		Client.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="双向通讯客户端："><a href="#双向通讯客户端：" class="headerlink" title="双向通讯客户端："></a>双向通讯客户端：</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端(双向)：</span></span><br><span class="line"><span class="comment"> * 1.建立连接：使用Socket创建客户端：服务器地址和端口</span></span><br><span class="line"><span class="comment"> * 2.操作：输入输出流</span></span><br><span class="line"><span class="comment"> * 3.释放资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCP_TwoWayClient</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"-------Client-------"</span>);</span><br><span class="line">		BufferedReader bf=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">		System.out.println(<span class="string">"请输入姓名："</span>);</span><br><span class="line">		String name=bf.readLine();</span><br><span class="line">		System.out.println(<span class="string">"请输入密码："</span>);</span><br><span class="line">		String pwd=bf.readLine();</span><br><span class="line">		<span class="comment">//1.建立连接：使用Socket创建客户端：服务器地址和端口</span></span><br><span class="line">		Socket S=<span class="keyword">new</span> Socket(<span class="string">"localhost"</span>,<span class="number">6666</span>);</span><br><span class="line">		<span class="comment">// 3.操作：输入输出流</span></span><br><span class="line">		DataOutputStream out=<span class="keyword">new</span> DataOutputStream(S.getOutputStream());</span><br><span class="line">		out.writeUTF(<span class="string">"name="</span>+name+<span class="string">"&amp;"</span>+<span class="string">"pwd="</span>+pwd);</span><br><span class="line">		out.flush();</span><br><span class="line">		DataInputStream dis=<span class="keyword">new</span> DataInputStream(S.getInputStream());</span><br><span class="line">		String sss=dis.readUTF();</span><br><span class="line">		System.out.println(sss);</span><br><span class="line">		<span class="comment">// 4.释放资源</span></span><br><span class="line">		out.close();</span><br><span class="line">		S.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h2><blockquote><p>——-Server——-<br>客户端连接已建立</p>
<p>——-Client——-<br>请输入姓名：<br>123<br>请输入密码：<br>123<br>用户名或密码错误</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>网络编程</tag>
      </tags>
  </entry>
  <entry>
    <title>UDP通讯实现</title>
    <url>/2019/08/14/UDP%E9%80%9A%E8%AE%AF%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="UDP通讯实现"><a href="#UDP通讯实现" class="headerlink" title="UDP通讯实现"></a>UDP通讯实现</h1><p>简单实现UDP网络编程。<a id="more"></a></p>
<h1 id="DatagramSocket：用于发送或接收数据报包"><a href="#DatagramSocket：用于发送或接收数据报包" class="headerlink" title="DatagramSocket：用于发送或接收数据报包"></a>DatagramSocket：用于发送或接收数据报包</h1><p>当服务器要向客户端发送数据时，需要在服务器端产生一个DatagramSocket对象，在客户端产生一个DatagramSocket对象。服务器端的DatagramSocket将DatagramPacket发送到网络上，然后被客户端的DatagramSocket接收。</p>
<p>DatagramSocket有两种常用的构造函数。一种是无需任何参数的，常用于客户端;另一种需要指定端口，常用于服务器端。如下所示：</p>
<p>DatagramSocket() ：构造数据报套接字并将其绑定到本地主机上任何可用的端口。</p>
<p>DatagramSocket(int port) ：创建数据报套接字并将其绑定到本地主机上的指定端口。</p>
<h2 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h2><p>send(DatagramPacket p) ：从此套接字发送数据报包。</p>
<p>receive(DatagramPacket p) ：从此套接字接收数据报包。</p>
<p>close() ：关闭此数据报套接字。</p>
<h1 id="DatagramPacket：数据容器-封包-的作用"><a href="#DatagramPacket：数据容器-封包-的作用" class="headerlink" title="DatagramPacket：数据容器(封包)的作用"></a>DatagramPacket：数据容器(封包)的作用</h1><p>此类表示数据报包。 数据报包用来实现封包的功能。</p>
<h2 id="常用方法：-1"><a href="#常用方法：-1" class="headerlink" title="常用方法："></a>常用方法：</h2><p>DatagramPacket(byte[] buf, int length) ：构造数据报包，用来接收长度为 length 的数据包。</p>
<p>DatagramPacket(byte[] buf, int length, InetAddress address, int port) ：构造数据报包，用来将长度为 length 的包发送到指定主机上的指定端口号。</p>
<p>getAddress() ：获取发送或接收方计算机的IP地址，此数据报将要发往该机器或者是从该机器接收到的。</p>
<p>getData() ：获取发送或接收的数据。</p>
<p>setData(byte[] buf) ：设置发送的数据。</p>
<h1 id="UDP通信编程基本步骤："><a href="#UDP通信编程基本步骤：" class="headerlink" title="UDP通信编程基本步骤："></a>UDP通信编程基本步骤：</h1><ol>
<li><p>创建客户端的DatagramSocket，创建时，定义客户端的监听端口。</p>
</li>
<li><p>创建服务器端的DatagramSocket，创建时，定义服务器端的监听端口。</p>
</li>
<li><p>在服务器端定义DatagramPacket对象，封装待发送的数据包。</p>
</li>
<li><p>客户端将数据报包发送出去。</p>
</li>
<li><p>服务器端接收数据报包。</p>
<h1 id="UDP客户端："><a href="#UDP客户端：" class="headerlink" title="UDP客户端："></a>UDP客户端：</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDP_Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">byte</span>[] b = <span class="string">"你好"</span>.getBytes();</span><br><span class="line">        <span class="comment">//必须告诉数据报包要发到哪台计算机的哪个端口，发送的数据以及数据的长度</span></span><br><span class="line">        DatagramPacket d = <span class="keyword">new</span> DatagramPacket(b,b.length,<span class="keyword">new</span> </span><br><span class="line">        InetSocketAddress(<span class="string">"localhost"</span>,<span class="number">7777</span>));</span><br><span class="line">        <span class="comment">//创建数据报套接字：指定发送信息的端口</span></span><br><span class="line">        DatagramSocket ds = <span class="keyword">new</span> DatagramSocket(<span class="number">6000</span>);</span><br><span class="line">        <span class="comment">//发送数据报包</span></span><br><span class="line">        ds.send(d);</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        ds.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="UDP服务器端："><a href="#UDP服务器端：" class="headerlink" title="UDP服务器端："></a>UDP服务器端：</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDP_Test2</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">//创建数据报套接字：指定接收信息的端口</span></span><br><span class="line">        DatagramSocket d = <span class="keyword">new</span> DatagramSocket(<span class="number">7777</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">//创建数据报包，指定要接收的数据的缓存位置和长度</span></span><br><span class="line">        DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(b, b.length);</span><br><span class="line">        <span class="comment">//接收客户端发送的数据报</span></span><br><span class="line">        d.receive(dp); <span class="comment">// 阻塞式方法</span></span><br><span class="line">        <span class="comment">//dp.getLength()返回实际收到的数据的字节数</span></span><br><span class="line">        String string = <span class="keyword">new</span> String(dp.getData(), <span class="number">0</span>, dp.getLength());</span><br><span class="line">        System.out.println(string);</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        d.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="UDP基本数据类型传递客户端："><a href="#UDP基本数据类型传递客户端：" class="headerlink" title="UDP基本数据类型传递客户端："></a>UDP基本数据类型传递客户端：</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> n = <span class="number">2000L</span>;</span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(bos);</span><br><span class="line">        dos.writeLong(n);</span><br><span class="line">        <span class="comment">//获取字节数组流中的字节数组（我们要发送的数据）</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = bos.toByteArray();</span><br><span class="line">        <span class="comment">//必须告诉数据报包要发到哪台计算机的哪个端口，发送的数据以及数据的长度</span></span><br><span class="line">        DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(b,b.length,<span class="keyword">new</span>   </span><br><span class="line">                                             InetSocketAddress(<span class="string">"localhost"</span>,<span class="number">8999</span>));</span><br><span class="line">        <span class="comment">//创建数据报套接字：指定发送信息的端口</span></span><br><span class="line">        DatagramSocket ds = <span class="keyword">new</span> DatagramSocket(<span class="number">9000</span>);</span><br><span class="line">        <span class="comment">//发送数据报包</span></span><br><span class="line">        ds.send(dp);</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        dos.close();</span><br><span class="line">        bos.close();</span><br><span class="line">        ds.close();</span><br><span class="line">        <span class="comment">//来源于尚学堂</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="UDP基本数据类型传递服务器端："><a href="#UDP基本数据类型传递服务器端：" class="headerlink" title="UDP基本数据类型传递服务器端："></a>UDP基本数据类型传递服务器端：</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建数据报套接字：指定接收信息的端口</span></span><br><span class="line">        DatagramSocket ds = <span class="keyword">new</span> DatagramSocket(<span class="number">8999</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">//创建数据报包，指定要接收的数据的缓存位置和长度</span></span><br><span class="line">        DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(b, b.length);</span><br><span class="line">        <span class="comment">//接收客户端发送的数据报</span></span><br><span class="line">        ds.receive(dp); <span class="comment">// 阻塞式方法</span></span><br><span class="line">        <span class="comment">//dp.getData():获取客户端发送的数据，返回值是一个字节数组</span></span><br><span class="line">        ByteArrayInputStream bis = <span class="keyword">new</span> ByteArrayInputStream(dp.getData());</span><br><span class="line">        DataInputStream dis = <span class="keyword">new</span> DataInputStream(bis);</span><br><span class="line">        System.out.println(dis.readLong());</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        dis.close();</span><br><span class="line">        bis.close();</span><br><span class="line">        ds.close();</span><br><span class="line">	<span class="comment">//来源于尚学堂</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>网络编程</tag>
      </tags>
  </entry>
  <entry>
    <title>初次使用</title>
    <url>/2019/07/15/%E5%88%9D%E6%AC%A1%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>第一次搭建自己的个人博客，遇到很多困难。</p>
]]></content>
      <categories>
        <category>初步学习</category>
      </categories>
      <tags>
        <tag>初步学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet生命周期</title>
    <url>/2020/02/15/Servlet%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<h1 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h1><p>   Servlet生命周期由构造器、init方法、service方法和destroy方法组成。<a id="more"></a></p>
<h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><p>   只被调用一次，只有第一次请求Servlet时，创建Servlet的实例，调用构造器。</p>
<h2 id="init方法"><a href="#init方法" class="headerlink" title="init方法"></a>init方法</h2><p>   只被调用一次，再创建好实例后立即被调用，用于初始当前的Servlet。</p>
<h2 id="service方法"><a href="#service方法" class="headerlink" title="service方法"></a>service方法</h2><p>   被多次调用，每次请求都会调用service方法。实际用于响应请求的。</p>
<h2 id="destroy方法"><a href="#destroy方法" class="headerlink" title="destroy方法"></a>destroy方法</h2><p>   只被调用一次，在当前Servlet所在的WEB应用被卸载前调用，用于释放当前Servlet所占用的资源。</p>
<h1 id="load-on-startup"><a href="#load-on-startup" class="headerlink" title="load-on-startup"></a>load-on-startup</h1><p>  补充说一下，load-on-startup可以指定Servlet被创建的时机，若为负数，则在第一次请求时被创建，若为0或正数，则在当前WEB应用被调用Servlet<br>容器加载时创建实例，且数字越小越早被创建。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;load-on-startup&gt;任意数字&lt;/load-on-startup&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>动态SQL</title>
    <url>/2020/05/05/%E5%8A%A8%E6%80%81SQL/</url>
    <content><![CDATA[<p>动态拼写SQL是MyBatis中很重要的一个内容。<a id="more"></a></p>
<style>
    p{margin:0px 0} 
</style>
<h1 id="动态SQL基本标签"><a href="#动态SQL基本标签" class="headerlink" title="动态SQL基本标签"></a>动态SQL基本标签</h1><p>在MyBatis中提供了一些标签，能够便于程序员动态拼写SQL语句。<br>MyBatis的标签:</p>
<p>&nbsp&nbsp&nbsp if:判断</p>
<p>&nbsp&nbsp&nbsp choose (when, otherwise):分支选择；带了break的swtich-case
    如果带了id就用id查，如果带了name就用name查;只会进入其中一个</p>
<p>&nbsp&nbsp&nbsp trim 字符串截取(where(封装查询条件), set(封装修改条件))</p>
<p>&nbsp&nbsp&nbsp foreach 遍历集合</p>

<h1 id="if标签"><a href="#if标签" class="headerlink" title="if标签"></a>if标签</h1><p>if标签顾名思义就是用来判断的标签，能够动态的判断程序传过来的值符不符合条件来进行动态拼接SQL。<br>这里还引用了where标签，where标签就相当于SQL语句中的where,update更新语句下也可以使用set标签。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- public List&lt;Student&gt; getStudentDynamicIF(Student student); 接口方法--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentDynamicIF"</span> <span class="attr">resultType</span>=<span class="string">"entity.Student"</span>&gt;</span></span><br><span class="line">	 select * from user <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span>id=#&#123;id&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> 		<span class="comment">&lt;!-- 双引号这用单引号 --&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name!=null and name!=''"</span>&gt;</span>and name like #&#123;name&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userclass!=null"</span>&gt;</span>and userclass=#&#123;userclass&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;/<span class="name">where</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="choose标签"><a href="#choose标签" class="headerlink" title="choose标签"></a>choose标签</h1><p>具有内部标签(when, otherwise):是一个分支选择；相当于带了break的swtich-case</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- public List&lt;Student&gt; getStudentDynamicChoose(Student student); 接口方法--&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentDynamicChoose"</span> <span class="attr">resultType</span>=<span class="string">"entity.Student"</span>&gt;</span></span><br><span class="line"> 		select * from user</span><br><span class="line"> 		<span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"> 			<span class="comment">&lt;!-- 如果带了id就用id查，如果带了name就用name查;只会进入其中一个 --&gt;</span></span><br><span class="line"> 			<span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line"> 				<span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span>id=#&#123;id&#125;<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"> 				<span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"name!=null and name!=''"</span>&gt;</span>name like #&#123;name&#125;<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"> 				<span class="comment">&lt;!-- 其它条件均不符合的时候 --&gt;</span></span><br><span class="line"> 				<span class="tag">&lt;<span class="name">otherwise</span>&gt;</span>userclass=2<span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line"> 			<span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="trim标签"><a href="#trim标签" class="headerlink" title="trim标签"></a>trim标签</h1><p>字符串截取，常用于SQL语句的一些连接符和结束标志。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- public List&lt;Student&gt; getStudentDynamicTrim(Student student); --&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentDynamicTrim"</span> <span class="attr">resultType</span>=<span class="string">"entity.Student"</span>&gt;</span></span><br><span class="line"> 		 select * from user </span><br><span class="line"> 		 <span class="comment">&lt;!-- 后面多出的and或者or where标签不能解决 </span></span><br><span class="line"><span class="comment">	 	prefix="":前缀：trim标签体中是整个字符串拼串 后的结果。</span></span><br><span class="line"><span class="comment">	 			prefix给拼串后的整个字符串加一个前缀 </span></span><br><span class="line"><span class="comment">	 	prefixOverrides="":</span></span><br><span class="line"><span class="comment">	 			前缀覆盖： 去掉整个字符串前面多余的字符</span></span><br><span class="line"><span class="comment">	 	suffix="":后缀</span></span><br><span class="line"><span class="comment">	 			suffix给拼串后的整个字符串加一个后缀 </span></span><br><span class="line"><span class="comment">	 	suffixOverrides=""</span></span><br><span class="line"><span class="comment">	 			后缀覆盖：去掉整个字符串后面多余的字符		</span></span><br><span class="line"><span class="comment">	 	--&gt;</span></span><br><span class="line">	 	<span class="comment">&lt;!-- 自定义字符串的截取规则 --&gt;</span></span><br><span class="line"> 		 <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"where"</span> <span class="attr">suffixOverrides</span>=<span class="string">"and"</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span>id=#&#123;id&#125; and<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> 		<span class="comment">&lt;!-- 双引号这用单引号 --&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name!=null and name!=''"</span>&gt;</span>  name like #&#123;name&#125; and<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userclass!=null"</span>&gt;</span> userclass=#&#123;userclass&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="foreach标签"><a href="#foreach标签" class="headerlink" title="foreach标签"></a>foreach标签</h1><p>用于遍历集合的标签，可以做很多事情，例如批量查询，批量更新，批量删除。<br>批量查询</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- public List&lt;Student&gt; getStudentDynamicforeach(List&lt;Integer&gt; list); 接口方法--&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentDynamicforeach"</span> <span class="attr">resultType</span>=<span class="string">"entity.Student"</span>&gt;</span></span><br><span class="line"> 		select * from user </span><br><span class="line"> 		<span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	 		collection：指定要遍历的集合：</span></span><br><span class="line"><span class="comment">	 			list类型的参数会特殊处理封装在map中，map的key就叫list</span></span><br><span class="line"><span class="comment">	 		item：将当前遍历出的元素赋值给指定的变量</span></span><br><span class="line"><span class="comment">	 		separator:每个元素之间的分隔符</span></span><br><span class="line"><span class="comment">	 		open：遍历出所有结果拼接一个开始的字符</span></span><br><span class="line"><span class="comment">	 		close:遍历出所有结果拼接一个结束的字符</span></span><br><span class="line"><span class="comment">	 		index:索引。遍历list的时候是index就是索引，item就是当前值</span></span><br><span class="line"><span class="comment">	 				      遍历map的时候index表示的就是map的key，item就是map的值</span></span><br><span class="line"><span class="comment">	 		</span></span><br><span class="line"><span class="comment">	 		#&#123;变量名&#125;就能取出变量的值也就是当前遍历出的元素</span></span><br><span class="line"><span class="comment">	 	  --&gt;</span></span><br><span class="line">	 	  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"list_id"</span> <span class="attr">separator</span>=<span class="string">","</span></span></span><br><span class="line"><span class="tag">	 	  	<span class="attr">open</span>=<span class="string">"where id in("</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">	 	  	#&#123;list_id&#125;</span><br><span class="line">	 	  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>批量保存</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 批量保存 --&gt;</span></span><br><span class="line">	 <span class="comment">&lt;!--public void addStudent(@Param("stu")List&lt;Student&gt; stu);  --&gt;</span></span><br><span class="line">	 <span class="comment">&lt;!--MySQL下批量保存：可以foreach遍历   mysql支持values(),(),()语法--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addStudent"</span>&gt;</span></span><br><span class="line">	 	insert into user(name,sex,userclass) </span><br><span class="line">		values</span><br><span class="line">		<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"stu"</span> <span class="attr">item</span>=<span class="string">"stus"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">			(#&#123;stus.name&#125;,#&#123;stus.sex&#125;,#&#123;stus.userclass&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">	 </span><br><span class="line">	 <span class="comment">&lt;!-- 这种方式需要数据库连接属性allowMultiQueries=true；</span></span><br><span class="line"><span class="comment">	 	这种分号分隔多个sql可以用于其他的批量操作（删除，修改） --&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addStudent"</span>&gt;</span></span><br><span class="line">	 	<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"stu"</span> <span class="attr">item</span>=<span class="string">"stus"</span> <span class="attr">separator</span>=<span class="string">";"</span>&gt;</span></span><br><span class="line">	 		insert into user(name,sex,userclass)</span><br><span class="line">	 		values(#&#123;stus.name&#125;,#&#123;stus.sex&#125;,#&#123;stus.userclass&#125;)</span><br><span class="line">	 	<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;/<span class="name">insert</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"># sql标签</span><br><span class="line">抽取可重用的sql片段。方便后面引用</span><br><span class="line">```Xml</span><br><span class="line"> <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	  	抽取可重用的sql片段。方便后面引用 </span></span><br><span class="line"><span class="comment">	  	1、sql抽取：经常将要查询的列名，或者插入用的列名抽取出来方便引用</span></span><br><span class="line"><span class="comment">	  	2、include来引用已经抽取的sql：</span></span><br><span class="line"><span class="comment">	  	3、include还可以自定义一些property，sql标签内部就能使用自定义的属性</span></span><br><span class="line"><span class="comment">	  			include-property：取值的正确方式$&#123;prop&#125;,</span></span><br><span class="line"><span class="comment">	  			#&#123;不能使用这种方式&#125;</span></span><br><span class="line"><span class="comment">	  --&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"insertColumn"</span>&gt;</span></span><br><span class="line">	  		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_databaseId=='oracle'"</span>&gt;</span></span><br><span class="line">	  			name,sex,user_class</span><br><span class="line">	  		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	  		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_databaseId=='mysql'"</span>&gt;</span></span><br><span class="line">	  			name,sex,userclass</span><br><span class="line">	  		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 引用例子 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addStudent"</span>&gt;</span></span><br><span class="line">	 	insert into user(</span><br><span class="line">		<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"insertColum"</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testColomn"</span> <span class="attr">value</span>=<span class="string">"abc"</span>/&gt;</span> <span class="comment">&lt;!-- 可以定义值 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">		) </span><br><span class="line">		values</span><br><span class="line">		<span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"stu"</span> <span class="attr">item</span>=<span class="string">"stus"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">			(#&#123;stus.name&#125;,#&#123;stus.sex&#125;,#&#123;stus.userclass&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>包装类的缓存问题</title>
    <url>/2019/07/20/%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="缓存问题"><a href="#缓存问题" class="headerlink" title="缓存问题"></a>缓存问题</h1><p>  缓存处理的原理为：如果数据在-128~127这个区间，那么在类加载时就已经为该区间的每个数值创建了对象，并将这256个对象存放到一个名为cache的数组中。每当自动装箱过程发生时(或者手动调用valueOf()时)，就会先判断数据是否在该区间，如果在则直接获取数组中对应的包装类对象的引用，如果不在该区间，则会通过new调用包装类的构造方法来创建对象。<a id="more"></a></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>  这里用Integer包装类来进行演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 这里会进行自动装箱，JDK在1.5以后可以这样写</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		Integer a = <span class="number">10</span>; <span class="comment">//Integer a = Integer.valueOf(10); </span></span><br><span class="line">		Integer b = <span class="number">10</span>; <span class="comment">//Integer b = Integer.valueOf(10); </span></span><br><span class="line">		System.out.println(a==b); <span class="comment">//输出 true</span></span><br><span class="line">		Integer c = <span class="number">129</span>;</span><br><span class="line">		Integer d = <span class="number">129</span>;</span><br><span class="line">		System.out.println(c==d); <span class="comment">//输出false</span></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 自动拆箱</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">int</span> e = a;  <span class="comment">//int e = a.intValue(); int e =new Integer(a);</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自动装箱代码"><a href="#自动装箱代码" class="headerlink" title="自动装箱代码"></a>自动装箱代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">            <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="自动拆箱代码"><a href="#自动拆箱代码" class="headerlink" title="自动拆箱代码"></a>自动拆箱代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">intValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="额外内容"><a href="#额外内容" class="headerlink" title="额外内容"></a>额外内容</h1><ol>
<li><p>JDK1.5以后，增加了自动装箱与拆箱功能。</p>
</li>
<li><p>自动装箱调用的是valueOf()方法，而不是new Integer()方法。</p>
</li>
<li><p>自动拆箱调用的xxxValue()方法。</p>
</li>
<li><p>包装类在自动装箱时为了提高效率，对于-128~127之间的值会进行缓存处理。超过范围后，对象之间不能再使用==进行数值的比较，而是使用equals方法。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>关于JSP</title>
    <url>/2020/02/22/%E5%85%B3%E4%BA%8EJSP/</url>
    <content><![CDATA[<p>对于JSP在现在这个技术发展的情况下，我认为可以不学习JSP了但可以去了解一下。<br><a href="https://www.zhihu.com/question/305924723/answer/557800752" target="_blank" rel="noopener"><br><font color="red">点击这里</font></a>有详细介绍Java后端现在该怎么学。</p>
<a id="more"></a>
<h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><p>  JSP 是简 Servlet 编写的一种技术, 它将 Java 代码和 HTML 语句混合在同一个文件中编写,只对网页中的要动态产生的内容采用 Java 代码来编写，而对固定不变的静态内容采用普通静态 HTML 页面的方式编写。<br>JSP：Java Server Page: Java 服务器端网页. 在 HTML 页面中编写 Java 代码的页面. </p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- 新建一个 JSP 页面, 在 body 节点内的 &lt;% %&gt; 即可编写 Java 代码. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">	&lt;% </span><br><span class="line">		Date date = <span class="keyword">new</span> Date();</span><br><span class="line">		System.out.print(date); </span><br><span class="line">	%&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>JSP 可以放置在 WEB 应用程序中的除了 <font color="red">WEB-INF</font> 及其子目录外的其他任何目录中,<br>JSP 页面的访问路径与普通 HTML 页面的访问路径形式也完全一样。</p>
<h1 id="JSP的运行原理-JSP-本质上是一个-Servlet"><a href="#JSP的运行原理-JSP-本质上是一个-Servlet" class="headerlink" title="JSP的运行原理: JSP 本质上是一个 Servlet."></a>JSP的运行原理: JSP 本质上是一个 Servlet.</h1><p>  每个JSP 页面在第一次被访问时, JSP 引擎将它翻译成一个 Servlet 源程序, 接着再把这个 Servlet 源程序编译成 Servlet 的 class 类文件.<br>然后再由WEB容器（Servlet引擎）像调用普通Servlet程序一样的方式来装载和解释执行这个由JSP页面翻译成的Servlet程序。 </p>
<h1 id="JSP-页面的隐含变量"><a href="#JSP-页面的隐含变量" class="headerlink" title="JSP 页面的隐含变量"></a>JSP 页面的隐含变量</h1><p>  没有声明就可以使用的对象. JSP页面一共有 9 个隐含对象. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    PageContext pageContext = <span class="keyword">null</span>;</span><br><span class="line">    HttpSession session = <span class="keyword">null</span>;</span><br><span class="line">    ServletContext application = <span class="keyword">null</span>;</span><br><span class="line">    ServletConfig config = <span class="keyword">null</span>;</span><br><span class="line">    JspWriter out = <span class="keyword">null</span>;</span><br><span class="line">    Object page = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//使用  &lt;% %&gt; 编写的代码在此位置. 可以用到 request, response, pageContext, session</span></span><br><span class="line">	<span class="comment">//application, config, out, page 这 8 个隐含对象. (实际上还可以使用一个叫 exception 的隐含对象)</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>①. request: HttpServletRequest 的一个对象. *</p>
<p>②. response: HttpServletResponse 的一个对象(在 JSP 页面中几乎不会调用 response 的任何方法.)</p>
<p>③. pageContext: 页面的上下文, 是 PageContext 的一个对象. 可以从该对象中获取到其他 8 个隐含对象. 也可以从中获取到当前<br>页面的其他信息. (自定义标签时使用它) *</p>
<p>④. session: 代表浏览器和服务器的一次会话, 是 HttpSession 的一个对象. *</p>
<p>⑤. application: 代表当前 WEB 应用. 是 ServletContext 对象. *</p>
<p>⑥. config: 当前 JSP 对应的 Servlet 的 ServletConfig 对象(几乎不使用). 若需要访问当前 JSP 配置的初始化参数,<br>需要通过映射的地址才可以.</p>
<p>映射 JSP:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hellojsp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">jsp-file</span>&gt;</span>/hello.jsp<span class="tag">&lt;/<span class="name">jsp-file</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>test<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>testValue<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hellojsp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hellojsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  	</span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>⑦. out: JspWriter 对象. 调用 out.println() 可以直接把字符串打印到浏览器上. *</p>
<p>⑧. page: 指向当前 JSP 对应的 Servlet 对象的引用, 但为 Object 类型, 只能调用 Object 类的方法(几乎不使用) </p>
<p>⑨. exception: 在声明了 page 指令的 isErrorPage=”true” 时, 才可以使用. *</p>
<p>&lt;%@ page isErrorPage=”true” %&gt;</p>
<p>pageContext, request, session, application(对属性的作用域的范围从小到大)<br>out, response, config, page<br>exception</p>
<h1 id="JSP模版元素"><a href="#JSP模版元素" class="headerlink" title="JSP模版元素"></a>JSP模版元素</h1><p>JSP页面中的静态HTML内容称 </p>
<h1 id="JSP表达式（expression）"><a href="#JSP表达式（expression）" class="headerlink" title="JSP表达式（expression）"></a>JSP表达式（expression）</h1><p>提供了将一个 java 变量或表达式的计算结果输出到客户端的简化方式，它将要输出的变量或表达式直接封装在&lt;%= 和 %&gt;之中。</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;% </span><br><span class="line">	Date date = <span class="keyword">new</span> Date();</span><br><span class="line">	out.print(date);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%= date %&gt;</span><br></pre></td></tr></table></figure>

<h1 id="JSP脚本片断（scriptlet）"><a href="#JSP脚本片断（scriptlet）" class="headerlink" title="JSP脚本片断（scriptlet）"></a>JSP脚本片断（scriptlet）</h1><p>指嵌套在&lt;% 和 %&gt;之中的一条或多条Java程序代码，多个脚本片断中的代码可以相互访问</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;% </span><br><span class="line">	String ageStr = request.getParameter(<span class="string">"age"</span>);</span><br><span class="line">	Integer age = Integer.parseInt(ageStr);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(age &gt;= <span class="number">18</span>)&#123;</span><br><span class="line">%&gt;</span><br><span class="line">		成人...</span><br><span class="line">&lt;%</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">%&gt;</span><br><span class="line">		未成人...</span><br><span class="line">&lt;%</span><br><span class="line">	&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<h1 id="JSP-声明"><a href="#JSP-声明" class="headerlink" title="JSP 声明"></a>JSP 声明</h1><p>  JSP 声明将 Java 代码封装在&lt;%！和 %&gt;之中，它里面的代码将被插入进 Servle t的 _jspService 方法的外面(在 JSP 页面中几乎从不这样使用)</p>
<h1 id="JSP注释的格式"><a href="#JSP注释的格式" class="headerlink" title="JSP注释的格式"></a>JSP注释的格式</h1><p>“&lt;%– JSP 注释 –%&gt;” “<!-- HTML 注释 -->“<br>区别: JSP 注释可以阻止 Java 代码的执行. </p>
<h1 id="域对象的属性操作"><a href="#域对象的属性操作" class="headerlink" title="域对象的属性操作"></a>域对象的属性操作</h1><p>方法：<br>void setAttribute(String name, Object o): 设置属性  </p>
<p>Object getAttribute(String name): 获取指定的属性</p>
<p>Enumeration getAttributeNames(): 获取所有的属性的名字组成的 Enumeration 对象</p>
<p>removeAttribute(String name): 移除指定的属性<br>pageContext, request, session, application 对象都有这些方法，这四个对象也称之为域对象. </p>
<p>pageContext: 属性的作用范围仅限于当前 JSP 页面<br>request:  属性的作用范围仅限于同一个请求.<br>session: 属性的作用范围限于一次会话: 浏览器打开直到关闭称之为一次会话(在此期间会话不失效)<br>application: 属性的作用范围限于当前 WEB 应用. 是范围最大的属性作用范围, 只要在一处设置属性, 在其他各处的 JSP 或 Servlet 中<br>都可以获取到. </p>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JSP</tag>
      </tags>
  </entry>
  <entry>
    <title>基于TCP的多人聊天室（一）</title>
    <url>/2019/08/16/%E5%9F%BA%E4%BA%8ETCP%E7%9A%84%E5%A4%9A%E4%BA%BA%E8%81%8A%E5%A4%A9%E5%AE%A4%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="基于TCP的多人聊天室（一）"><a href="#基于TCP的多人聊天室（一）" class="headerlink" title="基于TCP的多人聊天室（一）"></a>基于TCP的多人聊天室（一）</h1><p>利用TCP来实现网络多人聊天室，此版本只能实现发送接收，不能随意发言，还没实现客户端互相传输，只能自己发送自己接收。<a id="more"></a></p>
<h1 id="聊天室服务器："><a href="#聊天室服务器：" class="headerlink" title="聊天室服务器："></a>聊天室服务器：</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 聊天室服务器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chat_Server</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"-------Server-------"</span>);</span><br><span class="line">		<span class="comment">// 1.指定端口，使用ServerSocket创建服务器</span></span><br><span class="line">		ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">		<span class="comment">// 2.阻塞式等待链接 accept</span></span><br><span class="line">		<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">			Socket Server = server.accept();</span><br><span class="line">			System.out.println(<span class="string">"客户端连接已建立"</span>);</span><br><span class="line">			<span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">				DataInputStream dis = <span class="keyword">null</span>;</span><br><span class="line">				DataOutputStream dos = <span class="keyword">null</span>;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					dis = <span class="keyword">new</span> DataInputStream(Server.getInputStream());</span><br><span class="line">					dos = <span class="keyword">new</span> DataOutputStream(Server.getOutputStream());</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">					e1.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">				<span class="comment">// 3.操作：输入输出流</span></span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					<span class="keyword">while</span> (flag) &#123;</span><br><span class="line">						dos.writeUTF(dis.readUTF());</span><br><span class="line">						dos.flush();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">					flag=<span class="keyword">false</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">// 4.释放资源</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						<span class="keyword">if</span> (<span class="keyword">null</span> == dis)</span><br><span class="line">							dis.close();</span><br><span class="line">						<span class="keyword">if</span> (<span class="keyword">null</span> == dis) &#123;</span><br><span class="line">							dos.close();</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">if</span> (<span class="keyword">null</span> == dis) &#123;</span><br><span class="line">							Server.close();</span><br><span class="line">						&#125;</span><br><span class="line">					&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">						<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">						e.printStackTrace();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">			&#125;).start();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="聊天室客户端："><a href="#聊天室客户端：" class="headerlink" title="聊天室客户端："></a>聊天室客户端：</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 聊天室客户端</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chat_Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException, IOException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"-------Client-------"</span>);</span><br><span class="line">		<span class="comment">// 1.建立连接：使用Socket创建客户端：服务器地址和端口</span></span><br><span class="line">		Socket Client = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>, <span class="number">6666</span>);</span><br><span class="line">		<span class="comment">// 2.操作：输入输出流</span></span><br><span class="line">		DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(Client.getOutputStream());</span><br><span class="line">		BufferedReader bf = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">		DataInputStream dis = <span class="keyword">new</span> DataInputStream(Client.getInputStream());</span><br><span class="line">		<span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">		<span class="keyword">while</span> (flag) &#123;</span><br><span class="line">			String st = bf.readLine();</span><br><span class="line">			dos.writeUTF(st);</span><br><span class="line">			dos.flush();</span><br><span class="line">			String sss = dis.readUTF();</span><br><span class="line">			System.out.println(sss);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 释放资源</span></span><br><span class="line">		dis.close();</span><br><span class="line">		dos.close();</span><br><span class="line">		Client.close();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>网络编程</tag>
      </tags>
  </entry>
  <entry>
    <title>基于TCP的多人聊天室（二）</title>
    <url>/2019/08/20/%E5%9F%BA%E4%BA%8ETCP%E7%9A%84%E5%A4%9A%E4%BA%BA%E8%81%8A%E5%A4%A9%E5%AE%A4%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="基于TCP的多人聊天室（二）"><a href="#基于TCP的多人聊天室（二）" class="headerlink" title="基于TCP的多人聊天室（二）"></a>基于TCP的多人聊天室（二）</h1><p>进行了封装，没有写单独的一个类，可自行实现，实现了多人聊天，没有实现私聊和一些细节问题，等有空再实现。<a id="more"></a></p>
<h1 id="关闭流："><a href="#关闭流：" class="headerlink" title="关闭流："></a>关闭流：</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Closed</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Closeable... targets)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(Closeable target:targets) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">if</span>(<span class="keyword">null</span>!=target)</span><br><span class="line">				target.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="聊天室服务器："><a href="#聊天室服务器：" class="headerlink" title="聊天室服务器："></a>聊天室服务器：</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 聊天室服务器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chat_Server</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> CopyOnWriteArrayList&lt;Channel&gt; list=<span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"-------Server-------"</span>);</span><br><span class="line">		<span class="comment">// 1.指定端口，使用ServerSocket创建服务器</span></span><br><span class="line">		ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">		<span class="comment">// 2.阻塞式等待链接 accept</span></span><br><span class="line">		<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">			Socket Server = server.accept();</span><br><span class="line">			System.out.println(<span class="string">"客户端连接已建立"</span>);</span><br><span class="line">			Channel C=<span class="keyword">new</span> Channel(Server);</span><br><span class="line">			list.add(C);</span><br><span class="line">			<span class="keyword">new</span> Thread(C).start();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> CopyOnWriteArrayList&lt;Channel&gt; <span class="title">List</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> list;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个客户端代表一个用户（Channel）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Channel</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> DataInputStream dis;</span><br><span class="line">	<span class="keyword">private</span> DataOutputStream dos;</span><br><span class="line">	<span class="keyword">private</span> Socket Server;</span><br><span class="line">	<span class="keyword">private</span>  CopyOnWriteArrayList&lt;Channel&gt; list=<span class="keyword">new</span> Chat_Server().List();</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;		</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Channel</span><span class="params">(Socket server)</span> </span>&#123;</span><br><span class="line">		Server = server;</span><br><span class="line">		<span class="comment">// 3.操作：输入输出流</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			dis = <span class="keyword">new</span> DataInputStream(Server.getInputStream());</span><br><span class="line">			dos = <span class="keyword">new</span> DataOutputStream(Server.getOutputStream());</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			<span class="comment">// 4.释放资源</span></span><br><span class="line">			<span class="keyword">new</span> Closed().close(dos,dis,Server);</span><br><span class="line">			<span class="keyword">this</span>.flag=<span class="keyword">false</span>;</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//发送</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">					dos.writeUTF(msg);</span><br><span class="line">					dos.flush();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">				<span class="comment">// 4.释放资源</span></span><br><span class="line">				<span class="keyword">new</span> Closed().close(dos,dis,Server);</span><br><span class="line">				<span class="keyword">this</span>.flag=<span class="keyword">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//获取消息</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		 String msg = <span class="string">""</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			msg = dis.readUTF();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="keyword">new</span> Closed().close(dos,dis,Server);</span><br><span class="line">			<span class="keyword">this</span>.flag=<span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> msg;		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//发给其他人</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendOther</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(Channel c:list) &#123;</span><br><span class="line">			<span class="keyword">if</span>(c==<span class="keyword">this</span>) &#123;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			c.send(msg);</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(flag) &#123;</span><br><span class="line">			String msg=getMsg();</span><br><span class="line">			<span class="keyword">if</span>(!msg.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">				sendOther(msg);	</span><br><span class="line">		&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="聊天室客户端："><a href="#聊天室客户端：" class="headerlink" title="聊天室客户端："></a>聊天室客户端：</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 聊天室客户端</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chat_Client</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException, IOException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"-------Client-------"</span>);</span><br><span class="line">		<span class="comment">// 1.建立连接：使用Socket创建客户端：服务器地址和端口</span></span><br><span class="line">		Socket Client = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>, <span class="number">6666</span>);</span><br><span class="line">		BufferedReader bf=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">		System.out.println(<span class="string">"请输入用户名："</span>);</span><br><span class="line">		String name=bf.readLine();</span><br><span class="line">		<span class="comment">//发送接收	</span></span><br><span class="line">		<span class="keyword">new</span> Thread(<span class="keyword">new</span> Send(Client,name)).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(<span class="keyword">new</span> Receive(Client)).start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送端</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Send</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> DataOutputStream dos;</span><br><span class="line">	<span class="keyword">private</span> BufferedReader bf; </span><br><span class="line">	<span class="keyword">private</span> Socket Client;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Send</span><span class="params">(Socket client,String name)</span> </span>&#123;</span><br><span class="line">		Client = client;</span><br><span class="line">		<span class="keyword">this</span>.name=name;</span><br><span class="line">		bf= <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			dos= <span class="keyword">new</span> DataOutputStream(Client.getOutputStream());</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="comment">// 释放资源</span></span><br><span class="line">			<span class="keyword">new</span> Closed().close(dos,bf,Client);</span><br><span class="line">			<span class="keyword">this</span>.flag=<span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//发送</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String msg)</span> </span>&#123;	</span><br><span class="line">			<span class="keyword">try</span> &#123;	</span><br><span class="line">				dos.writeUTF(msg);</span><br><span class="line">				dos.flush();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">				<span class="comment">// 释放资源</span></span><br><span class="line">				<span class="keyword">new</span> Closed().close(dos,bf,Client);</span><br><span class="line">				<span class="keyword">this</span>.flag=<span class="keyword">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//控制台信息</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		 String msg = <span class="string">""</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			msg = bf.readLine();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="keyword">new</span> Closed().close(dos,Client,bf);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> msg;		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span> (flag) &#123;</span><br><span class="line">			String msg=getMsg();</span><br><span class="line">			<span class="keyword">if</span>(!msg.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">			send(<span class="keyword">this</span>.name+<span class="string">"说："</span>+msg);	</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接收端</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Receive</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> DataInputStream dis; </span><br><span class="line">	<span class="keyword">private</span> Socket Client;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Receive</span><span class="params">(Socket client)</span> </span>&#123;</span><br><span class="line">		Client = client;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			dis= <span class="keyword">new</span> DataInputStream(Client.getInputStream());</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="comment">// 释放资源</span></span><br><span class="line">			<span class="keyword">new</span> Closed().close(dis,Client);</span><br><span class="line">			<span class="keyword">this</span>.flag=<span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//接收</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> String <span class="title">receive</span><span class="params">()</span> </span>&#123;	</span><br><span class="line">		String msg=<span class="string">""</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			msg = dis.readUTF();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="comment">// 释放资源</span></span><br><span class="line">			<span class="keyword">new</span> Closed().close(dis,Client);</span><br><span class="line">			<span class="keyword">this</span>.flag=<span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> msg;	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;	</span><br><span class="line">		<span class="keyword">while</span>(flag) &#123;</span><br><span class="line">		String msg=receive();</span><br><span class="line">		<span class="keyword">if</span>(!msg.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">			System.out.println(msg);</span><br><span class="line">		&#125;</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简易实现基于TCP的网络聊天室。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>网络编程</tag>
      </tags>
  </entry>
  <entry>
    <title>多人登录验证</title>
    <url>/2019/08/16/%E5%A4%9A%E4%BA%BA%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<h1 id="多人登录验证"><a href="#多人登录验证" class="headerlink" title="多人登录验证"></a>多人登录验证</h1><p>请求响应模式下多人验证模式<a id="more"></a></p>
<h1 id="服务器："><a href="#服务器：" class="headerlink" title="服务器："></a>服务器：</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务器(双向)多人登录： </span></span><br><span class="line"><span class="comment"> * 1.指定端口，使用ServerSocket创建服务器 </span></span><br><span class="line"><span class="comment"> * 2.阻塞式等待链接 accept 返回一个Socket </span></span><br><span class="line"><span class="comment"> * 3.操作：输入输出流</span></span><br><span class="line"><span class="comment"> * 4.释放资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCP_MultiWayServer</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"-------Server-------"</span>);</span><br><span class="line">		<span class="comment">// 1.指定端口，使用ServerSocket创建服务器</span></span><br><span class="line">		ServerSocket SS = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">		<span class="comment">// 2.阻塞式等待链接 accept</span></span><br><span class="line">		<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">			Socket Client = SS.accept();</span><br><span class="line">			<span class="keyword">new</span> Thread(<span class="keyword">new</span> Server(Client)).start();</span><br><span class="line">			System.out.println(<span class="string">"客户端连接已建立"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Socket Client;</span><br><span class="line">	<span class="comment">// 3.操作：输入输出流</span></span><br><span class="line">	<span class="keyword">private</span> DataInputStream dis;</span><br><span class="line">	<span class="keyword">private</span> DataOutputStream out;</span><br><span class="line">	<span class="keyword">private</span> String name = <span class="string">""</span>;</span><br><span class="line">	<span class="keyword">private</span> String pwd = <span class="string">""</span>;</span><br><span class="line">	<span class="keyword">private</span> String st;</span><br><span class="line"></span><br><span class="line">	Server(Socket client) &#123;</span><br><span class="line">		Client = client;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			dis = <span class="keyword">new</span> DataInputStream(Client.getInputStream());</span><br><span class="line">			out = <span class="keyword">new</span> DataOutputStream(Client.getOutputStream());</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				Client.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">				e1.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			st = dis.readUTF();</span><br><span class="line">			String[] data = st.split(<span class="string">"&amp;"</span>);</span><br><span class="line">			<span class="keyword">for</span> (String b : data) &#123;</span><br><span class="line">				String[] c = b.split(<span class="string">"="</span>);</span><br><span class="line">				<span class="keyword">if</span> (c[<span class="number">0</span>].equals(<span class="string">"name"</span>)) &#123;</span><br><span class="line">					name = c[<span class="number">1</span>];</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					pwd = c[<span class="number">1</span>];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			SendandReceive();</span><br><span class="line">			<span class="comment">// 4.释放资源</span></span><br><span class="line">			dis.close();</span><br><span class="line">			out.close();</span><br><span class="line">			Client.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendandReceive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (name.equals(<span class="string">"123"</span>) &amp;&amp; pwd.equals(<span class="string">"456"</span>)) &#123;</span><br><span class="line">				out.writeUTF(<span class="string">"登陆成功"</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				out.writeUTF(<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="客户端："><a href="#客户端：" class="headerlink" title="客户端："></a>客户端：</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端(双向)多人登录：</span></span><br><span class="line"><span class="comment"> * 1.建立连接：使用Socket创建客户端：服务器地址和端口</span></span><br><span class="line"><span class="comment"> * 2.操作：输入输出流</span></span><br><span class="line"><span class="comment"> * 3.释放资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCP_MultiWayClient</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"-------Client-------"</span>);		</span><br><span class="line">		<span class="comment">//1.建立连接：使用Socket创建客户端：服务器地址和端口</span></span><br><span class="line">		Socket S=<span class="keyword">new</span> Socket(<span class="string">"localhost"</span>,<span class="number">6666</span>);</span><br><span class="line">		<span class="keyword">new</span> Client(S).in();		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Socket client;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Client</span><span class="params">(Socket client)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.client = client;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">private</span> BufferedReader bf=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> String pwd;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span> </span>&#123;		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">"请输入姓名："</span>);</span><br><span class="line">			 name=bf.readLine();</span><br><span class="line">			System.out.println(<span class="string">"请输入密码："</span>);</span><br><span class="line">			 pwd=bf.readLine();</span><br><span class="line">			 SendandReceive();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendandReceive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 2.操作：输入输出流</span></span><br><span class="line">		DataOutputStream out;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			out = <span class="keyword">new</span> DataOutputStream(client.getOutputStream());</span><br><span class="line">			out.writeUTF(<span class="string">"name="</span>+name+<span class="string">"&amp;"</span>+<span class="string">"pwd="</span>+pwd);</span><br><span class="line">			out.flush();</span><br><span class="line">			DataInputStream dis=<span class="keyword">new</span> DataInputStream(client.getInputStream());</span><br><span class="line">			String sss=dis.readUTF();</span><br><span class="line">			System.out.println(sss);</span><br><span class="line">			<span class="comment">// 3.释放资源</span></span><br><span class="line">			dis.close();</span><br><span class="line">			out.close();</span><br><span class="line">			client.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>网络编程</tag>
      </tags>
  </entry>
  <entry>
    <title>多态(Polymorphism)</title>
    <url>/2019/07/17/%E5%A4%9A%E6%80%81-Polymorphism/</url>
    <content><![CDATA[<h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>  多态指的是同一个方法调用，由于对象不同可能会有不同的行为。现实生活中，同一个方法，具体实现会完全不同。 比如：同样是调用人的“休息”方法，张三是睡觉，李四是旅游，数学教授是做数学题; 同样是调用人“吃饭”的方法，中国人用筷子吃饭，英国人用刀叉吃饭，印度人用手吃饭。<a id="more"></a></p>
<h1 id="多态的要点："><a href="#多态的要点：" class="headerlink" title="多态的要点："></a>多态的要点：</h1><p> 1.多态是方法的多态，不是属性的多态(多态与属性无关)。</p>
<p> 2.多态的存在要有3个必要条件：继承，方法重写，父类引用指向子类对象。</p>
<p> 3.父类引用指向子类对象后，用该父类引用调用子类重写的方法，此时多态就出现了。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">asd</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        AnimalCry(<span class="keyword">new</span> Dog());</span><br><span class="line">        AnimalCry(<span class="keyword">new</span> Cat());</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AnimalCry</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">        a.shout();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"叫了一声...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> 	<span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">   	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"汪汪汪.."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seeDoor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"看门中...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"喵喵喵...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>  多态的主要优势是提高了代码的可扩展性，符合开闭原则。但是多态也有弊端，就是无法调用子类特有的功能，比如，我不能使用父类的引用变量调用Dog类特有的seeDoor()方法。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>抽象方法和抽象类</title>
    <url>/2019/07/19/%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h1><p>  使用abstract修饰的方法，没有方法体，只有声明。定义的是一种“规范”，就是告诉子类必须要给抽象方法提供具体的实现。<a id="more"></a></p>
<h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><p>  包含抽象方法的类就是抽象类。通过abstract方法定义规范，然后要求子类必须定义具体实现。通过抽象类，我们就可以做到严格限制子类的设计，使子类之间更加通用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">			Dog d=<span class="keyword">new</span> Dog();</span><br><span class="line">			d.shot();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">shot</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">	<span class="comment">//继承抽象类必须实现抽象方法</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">shot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"汪汪汪"</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">shot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"喵喵喵"</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="抽象类使用要点"><a href="#抽象类使用要点" class="headerlink" title="抽象类使用要点"></a>抽象类使用要点</h1><ol>
<li>有抽象方法的类只能定义成抽象类</li>
<li>抽象类不能实例化，即不能用new来实例化抽象类。</li>
<li>抽象类可以包含属性、方法、构造方法。但是构造方法不能用来new实例，只能用来被子类调用。</li>
<li>抽象类只能用来被继承。</li>
<li>抽象方法必须被子类实现。</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>开始学习</title>
    <url>/2019/07/15/%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="开始学习"><a href="#开始学习" class="headerlink" title="开始学习"></a>开始学习</h2><p>  搭建好个人博客就要开始从头学习java了，定一个目标，在9月3号前学习完300集java基础，加油吧。</p>
]]></content>
      <categories>
        <category>初步学习</category>
      </categories>
      <tags>
        <tag>初步学习</tag>
      </tags>
  </entry>
  <entry>
    <title>实现线程同步</title>
    <url>/2019/08/05/%E5%AE%9E%E7%8E%B0%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<h1 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h1><p>  由于同一进程的多个线程共享同一块存储空间，在带来方便的同时，也带来了访问冲突的问题。Java语言提供了专门机制以解决这种冲突，有效避免了同一个数据对象被多个线程同时访问造成的这种问题。<br>由于我们可以通过 private 关键字来保证数据对象只能被方法访问，所以我们只需针对方法提出一套机制，这套机制就是synchronized关键字，它包括两种用法：synchronized 方法和 synchronized 块。<a id="more"></a></p>
<h1 id="synchronized-方法"><a href="#synchronized-方法" class="headerlink" title="synchronized 方法"></a>synchronized 方法</h1><p>通过在方法声明中加入 synchronized关键字来声明，语法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">Test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(ticket&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">		 flag=<span class="keyword">false</span>;</span><br><span class="line">		 <span class="keyword">return</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Thread.sleep(<span class="number">10</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(Thread.currentThread().getName()+<span class="string">"---"</span>+ticket--);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>synchronized 方法控制对“对象的类成员变量”的访问：每个对象对应一把锁，每个 synchronized 方法都必须获得调用该方法的对象的锁方能执行，否则所属线程阻塞，方法一旦执行，就独占该锁，直到从该方法返回时才将锁释放，此后被阻塞的线程方能获得该锁，重新进入可执行状态。</p>
<h1 id="synchronized-块"><a href="#synchronized-块" class="headerlink" title="synchronized 块"></a>synchronized 块</h1><p> synchronized 方法的缺陷：若将一个大的方法声明为synchronized 将会大大影响效率。Java 为我们提供了更好的解决办法，那就是 synchronized 块。 块可以让我们精确地控制到具体的“成员变量”，缩小同步的范围，提高效率。synchronized 块：通过 synchronized关键字来声明synchronized 块，语法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span>(ticket&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">		 flag=<span class="keyword">false</span>;</span><br><span class="line">		 <span class="keyword">return</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Thread.sleep(<span class="number">100</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(Thread.currentThread().getName()+<span class="string">"---"</span>+ticket--);</span><br><span class="line">	&#125; <span class="comment">//   同步块执行到此处</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="同步块性能分析"><a href="#同步块性能分析" class="headerlink" title="同步块性能分析"></a>同步块性能分析</h1><p>  在使用同步块的过程中，需要程序员根据事件应用来锁定资源，同步块锁大了效率低下，同步块锁小了无法保证线程安全。</p>
<h2 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Synchronized_Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		App12306 test =<span class="keyword">new</span> App12306();</span><br><span class="line">		<span class="keyword">new</span> Thread(test,<span class="string">"黄牛"</span>).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(test,<span class="string">"黑牛"</span>).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(test,<span class="string">"白牛"</span>).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(test,<span class="string">"灰牛"</span>).start();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App12306</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> ticket=<span class="number">100</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> flag=<span class="keyword">true</span>;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">while</span>(flag) &#123;</span><br><span class="line">			Test3(); <span class="comment">//  最优</span></span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//同步块性能分析 </span></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 这里没有考虑没有票的时候，都需要等待，浪费了时间。效率较低</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span>(ticket&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">			 flag=<span class="keyword">false</span>;</span><br><span class="line">			 <span class="keyword">return</span> ;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				Thread.sleep(<span class="number">100</span>);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(Thread.currentThread().getName()+<span class="string">"---"</span>+ticket--);</span><br><span class="line">		&#125; <span class="comment">//   同步块执行到此处</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//同步块 此方法错误</span></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 此方法没有正确地锁住资源池。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(ticket&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">			 flag=<span class="keyword">false</span>;</span><br><span class="line">			 <span class="keyword">return</span> ;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				Thread.sleep(<span class="number">100</span>);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(Thread.currentThread().getName()+<span class="string">"---"</span>+ticket--);</span><br><span class="line">		&#125; <span class="comment">//  同步块执行到此处</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//同步块 此方法最优</span></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 此方法正确，效率高，一般被称为double checking</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(ticket&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">		 flag=<span class="keyword">false</span>;</span><br><span class="line">		 <span class="keyword">return</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span>(ticket&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">				 flag=<span class="keyword">false</span>;</span><br><span class="line">				 <span class="keyword">return</span> ;</span><br><span class="line">				&#125;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Thread.sleep(<span class="number">100</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(Thread.currentThread().getName()+<span class="string">"---"</span>+ticket--);</span><br><span class="line">	&#125; <span class="comment">//  同步块执行到此处</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//同步方法，不推荐使用！！</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">Test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(ticket&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">		 flag=<span class="keyword">false</span>;</span><br><span class="line">		 <span class="keyword">return</span> ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Thread.sleep(<span class="number">10</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(Thread.currentThread().getName()+<span class="string">"---"</span>+ticket--);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法</title>
    <url>/2019/07/19/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><p>  冒泡排序是最常用的排序算法，在笔试中也非常常见，能手写出冒泡排序算法可以说是基本的素养 算法重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来，这样越大的元素会经由交换慢慢“浮”到数列的顶端。<a id="more"></a></p>
<h1 id="优化冒泡算法"><a href="#优化冒泡算法" class="headerlink" title="优化冒泡算法"></a>优化冒泡算法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bubblesort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">int</span>[] arr= &#123;<span class="number">32</span>,<span class="number">42</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">48</span>,<span class="number">52</span>,<span class="number">1</span>,<span class="number">74</span>,<span class="number">58</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">41</span>,<span class="number">85</span>&#125;;</span><br><span class="line">		<span class="keyword">int</span> t;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;arr.length-<span class="number">1</span>;j++) &#123;</span><br><span class="line">			<span class="keyword">boolean</span> flag=<span class="keyword">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>-j;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(arr[i]&gt;arr[i+<span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				t=arr[i+<span class="number">1</span>];</span><br><span class="line">				arr[i+<span class="number">1</span>]=arr[i];</span><br><span class="line">				arr[i]=t;</span><br><span class="line">				flag =<span class="keyword">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(Arrays.toString(arr));</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"------------------------------------------------------------------"</span>);</span><br><span class="line">		<span class="keyword">if</span>(flag==<span class="keyword">true</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">			</span><br><span class="line">		&#125;System.out.println(Arrays.toString(arr));	</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i,j,temp,t;</span><br><span class="line">        <span class="keyword">if</span>(left&gt;=right)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i=left;</span><br><span class="line">        j=right;</span><br><span class="line">        temp = arr[left];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (i&lt;j) &#123;</span><br><span class="line">            <span class="keyword">while</span> (temp&lt;=arr[j]&amp;&amp;i&lt;j) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (temp&gt;=arr[i]&amp;&amp;i&lt;j) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果满足条件则交换</span></span><br><span class="line">            <span class="keyword">if</span> (i&lt;j) &#123;</span><br><span class="line">                t = arr[j];</span><br><span class="line">                arr[j] = arr[i];</span><br><span class="line">                arr[i] = t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//交换位置</span></span><br><span class="line">         arr[left] = arr[i];</span><br><span class="line">         arr[i] = temp;</span><br><span class="line">        <span class="comment">//递归调用左半数组</span></span><br><span class="line">        quickSort(arr, left, j-<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//递归调用右半数组</span></span><br><span class="line">        quickSort(arr, j+<span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">10</span>,<span class="number">9</span>,<span class="number">45645</span>,<span class="number">33</span>,<span class="number">25</span>,<span class="number">62</span>,<span class="number">3</span>,<span class="number">36</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">78</span>,<span class="number">188</span>&#125;;</span><br><span class="line">        quickSort(arr, <span class="number">0</span>, arr.length-<span class="number">1</span>);</span><br><span class="line">		 <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123; </span><br><span class="line">			 System.out.print(arr[i]+<span class="string">" "</span>); </span><br><span class="line">			 &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>日历表</title>
    <url>/2019/07/22/%E6%97%A5%E5%8E%86%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="日历表"><a href="#日历表" class="headerlink" title="日历表"></a>日历表</h1><p>  利用日期类写了一个日历表.<a id="more"></a></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.GregorianCalendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalendarWatch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		System.out.println(<span class="string">"请输入日期（格式为：2000-1-1）："</span>);</span><br><span class="line">		String s=sc.nextLine();</span><br><span class="line">		<span class="comment">//日期类的使用</span></span><br><span class="line">		Date d=<span class="keyword">new</span> Date();</span><br><span class="line">		SimpleDateFormat sd=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">		Calendar c=<span class="keyword">new</span> GregorianCalendar();</span><br><span class="line">		d=sd.parse(s);</span><br><span class="line">		System.out.println(d);</span><br><span class="line">		c.setTime(d);</span><br><span class="line">		System.out.println(<span class="string">"你输入了："</span>+s);</span><br><span class="line">		System.out.print(<span class="string">"日\t一\t二\t三\t四\t五\t六\t"</span>);</span><br><span class="line">		System.out.println();</span><br><span class="line">		<span class="keyword">int</span> Day=c.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">		c.set(Calendar.DAY_OF_MONTH,<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">int</span> MaxDay=c.getActualMaximum(Calendar.DATE);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;c.get(Calendar.DAY_OF_WEEK);i++) &#123;</span><br><span class="line">			System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> b=<span class="number">1</span>;b&lt;=MaxDay;b++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(c.get(Calendar.DAY_OF_MONTH)==Day) &#123;</span><br><span class="line">				System.out.print(c.get(Calendar.DAY_OF_MONTH)+<span class="string">"*"</span>+<span class="string">"\t"</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			<span class="keyword">else</span>			</span><br><span class="line">			System.out.print(c.get(Calendar.DAY_OF_MONTH)+<span class="string">"\t"</span>);</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span>(c.get(Calendar.DAY_OF_WEEK)==<span class="number">7</span>)</span><br><span class="line">				System.out.println();</span><br><span class="line">			c.add(Calendar.DAY_OF_MONTH, <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>  月份的表示，一月是0，二月是1，以此类推，12月是11。 因为大多数人习惯于使用单词而不是使用数字来表示月份，这样程序也许更易读，父类Calendar使用常量来表示月份：JANUARY、FEBRUARY等等。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库连接池</title>
    <url>/2020/03/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
    <content><![CDATA[<p>这里使用常用的两种创建数据库连接池的方法,dbcp与c3p0<a id="more"></a></p>
<h1 id="DBCP"><a href="#DBCP" class="headerlink" title="DBCP"></a>DBCP</h1><p>使用 DBCP 数据库连接池， 加入 jar 包(2 个jar 包). 依赖于 Commons Pool。</p>
<p>配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username=root</span><br><span class="line">password=123456</span><br><span class="line">driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql://localhost:3306/text</span><br></pre></td></tr></table></figure>

<p>代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 1. 加载 dbcp 的 properties 配置文件: 配置文件中的键需要来自 BasicDataSource</span></span><br><span class="line"><span class="comment">	 * 的属性.</span></span><br><span class="line"><span class="comment">	 * 2. 调用 BasicDataSourceFactory 的 createDataSource 方法创建 DataSource</span></span><br><span class="line"><span class="comment">	 * 实例</span></span><br><span class="line"><span class="comment">	 * 3. 从 DataSource 实例中获取数据库连接. </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDBCPWithDataSourceFactory</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		</span><br><span class="line">		Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">		InputStream inStream = JDBCTest.class.getClassLoader()</span><br><span class="line">				.getResourceAsStream(<span class="string">"dbcp.properties"</span>);</span><br><span class="line">		properties.load(inStream);</span><br><span class="line">		</span><br><span class="line">		DataSource dataSource = </span><br><span class="line">				BasicDataSourceFactory.createDataSource(properties);</span><br><span class="line">		System.out.println(dataSource.getConnection()); </span><br><span class="line">		<span class="comment">//需要在配置文件添加相关属性</span></span><br><span class="line"><span class="comment">//		BasicDataSource basicDataSource = </span></span><br><span class="line"><span class="comment">//				(BasicDataSource) dataSource;</span></span><br><span class="line"><span class="comment">//		System.out.println(basicDataSource.getMaxWait()); </span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h1 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h1><p>C3P0推荐是用xml配置文件，格式为c3p0-config.xml。依赖于mchange-commons-java-0.2.19.jar</p>
<p>配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">"helloc3p0"</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 指定连接数据源的基本属性 --&gt;</span></span><br><span class="line">	      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span>jdbc:mysql://localhost:3306/text<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 若数据库中连接数不足时, 一次向数据库服务器申请多少个连接 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireIncrement"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 初始化数据库连接池时连接的数量 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 数据库连接池中的最小的数据库连接数 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 数据库连接池中的最大的数据库连接数 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- C3P0 数据库连接池可以维护的 Statement 的个数 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 每个连接同时可以使用的 Statement 对象的个数 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatementsPerConnection"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></span><br><span class="line">		</span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testC3poWithConfigFile</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		DataSource dataSource = </span><br><span class="line">				<span class="keyword">new</span> ComboPooledDataSource(<span class="string">"helloc3p0"</span>);  		</span><br><span class="line">		System.out.println(dataSource.getConnection()); </span><br><span class="line">		ComboPooledDataSource comboPooledDataSource = </span><br><span class="line">				(ComboPooledDataSource) dataSource;</span><br><span class="line">		<span class="comment">//System.out.println(comboPooledDataSource.getMaxStatements()); </span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>数据库处理</tag>
      </tags>
  </entry>
  <entry>
    <title>生产者/消费者模式（一）</title>
    <url>/2019/08/10/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="生产者-消费者模式"><a href="#生产者-消费者模式" class="headerlink" title="生产者/消费者模式"></a>生产者/消费者模式</h1><p> 多线程环境下，我们经常需要多个线程的并发和协作。这个时候，就需要了解一个重要的多线程并发协作模型“生产者/消费者模式”。<a id="more"></a></p>
<h1 id="什么是生产者"><a href="#什么是生产者" class="headerlink" title="什么是生产者?"></a>什么是生产者?</h1><p>  生产者指的是负责生产数据的模块(这里模块可能是：方法、对象、线程、进程)。</p>
<h1 id="什么是消费者"><a href="#什么是消费者" class="headerlink" title="什么是消费者?"></a>什么是消费者?</h1><p>  消费者指的是负责处理数据的模块(这里模块可能是：方法、对象、线程、进程)。</p>
<h1 id="什么是缓冲区"><a href="#什么是缓冲区" class="headerlink" title="什么是缓冲区?"></a>什么是缓冲区?</h1><p>  消费者不能直接使用生产者的数据，它们之间有个“缓冲区”。生产者将生产好的数据放入“缓冲区”，消费者从“缓冲区”拿要处理的数据。</p>
<h1 id="实现线程的并发协作"><a href="#实现线程的并发协作" class="headerlink" title="实现线程的并发协作"></a>实现线程的并发协作</h1><p>  有了缓冲区以后，生产者线程只需要往缓冲区里面放置数据，而不需要管消费者消费的情况;同样，消费者只需要从缓冲区拿数据处理即可，也不需要管生产者生产的情况。 这样，就从逻辑上实现了“生产者线程”和“消费者线程”的分离。</p>
<h1 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者/消费者模式：管程法。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer_Model</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		Business bus=<span class="keyword">new</span> Business();</span><br><span class="line">		Warehouse wa=<span class="keyword">new</span> Warehouse(bus);</span><br><span class="line">		Thread th=<span class="keyword">new</span> Thread(wa);</span><br><span class="line">		th.start();</span><br><span class="line">		Consumer wb=<span class="keyword">new</span> Consumer(bus);</span><br><span class="line">		wb.start();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//厂家</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Warehouse</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Business bus;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Warehouse</span><span class="params">(Business bus)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.bus = bus;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 生产</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">50</span>;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.println(<span class="string">"---------------------"</span>);</span><br><span class="line">			System.out.println(<span class="string">"生产第"</span>+(i+<span class="number">1</span>)+<span class="string">"个产品"</span>);</span><br><span class="line">			bus.put(<span class="keyword">new</span> Commodity(i));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Business bus;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(Business bus)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.bus = bus;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 消费</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">50</span>;i++)</span><br><span class="line">		&#123;	</span><br><span class="line">			System.out.println(<span class="string">"消费第"</span>+(bus.take().id+<span class="number">1</span>)+<span class="string">"个产品"</span>);</span><br><span class="line">			System.out.println(<span class="string">"---------------------"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中间商</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Business</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Commodity[] con=<span class="keyword">new</span> Commodity[<span class="number">10</span>];</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">	<span class="comment">//存放数据</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Commodity  co)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(i==con.length) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">this</span>.wait();</span><br><span class="line">				System.out.println(<span class="string">"没有位置停止生产"</span>);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		con[i]=co;</span><br><span class="line">		i++;</span><br><span class="line">		<span class="keyword">this</span>.notifyAll();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//取出数据</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Commodity <span class="title">take</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(i==<span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">this</span>.wait();<span class="comment">//线程阻塞</span></span><br><span class="line">				System.out.println(<span class="string">"没有商品停止消费"</span>);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		i--;</span><br><span class="line">		Commodity cob=con[i];</span><br><span class="line">		<span class="keyword">this</span>.notifyAll();</span><br><span class="line">		<span class="keyword">return</span> cob;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//商品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Commodity</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> id;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Commodity</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>生产者/消费者模式（二）</title>
    <url>/2019/08/10/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="生产者-消费者模式"><a href="#生产者-消费者模式" class="headerlink" title="生产者/消费者模式"></a>生产者/消费者模式</h1><p>第二种方法,信号灯法<a id="more"></a></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者模式：信号灯法。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer_Model2</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Shoping s=<span class="keyword">new</span> Shoping();</span><br><span class="line">		Warehouse1 wa =<span class="keyword">new</span> Warehouse1(s);</span><br><span class="line">		people pe= <span class="keyword">new</span> people(s);</span><br><span class="line">		wa.start();</span><br><span class="line">		pe.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生产商</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Warehouse1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Shoping shop;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Warehouse1</span><span class="params">(Shoping shop)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.shop = shop;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">			System.out.println(<span class="string">"---------------------"</span>);</span><br><span class="line">			System.out.println(<span class="string">"生产第"</span>+(i+<span class="number">1</span>)+<span class="string">"个产品"</span>);</span><br><span class="line">			shop.put(<span class="keyword">new</span> Wood(i));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">people</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Shoping shop;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">people</span><span class="params">(Shoping shop)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.shop = shop;</span><br><span class="line">&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.println(<span class="string">"消费第"</span>+(shop.take().getId()+<span class="number">1</span>)+<span class="string">"个产品"</span>);</span><br><span class="line">			System.out.println(<span class="string">"---------------------"</span>);</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中间商</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shoping</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Wood []i=<span class="keyword">new</span> Wood[<span class="number">10</span>];</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> flag=<span class="keyword">true</span>;</span><br><span class="line">	<span class="comment">//放入数据</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span>  <span class="keyword">void</span> <span class="title">put</span><span class="params">(Wood wood)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!flag)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">this</span>.wait();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		i[count]=wood;</span><br><span class="line">		count++;</span><br><span class="line">		flag=<span class="keyword">false</span>;</span><br><span class="line">		<span class="keyword">this</span>.notifyAll();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//取出数据</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Wood <span class="title">take</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(flag) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">this</span>.wait();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		count--;</span><br><span class="line">		Wood b=i[count];</span><br><span class="line">		flag=<span class="keyword">true</span>;</span><br><span class="line">		<span class="keyword">this</span>.notifyAll();</span><br><span class="line">		<span class="keyword">return</span> b;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//商品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wood</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Wood</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="线程并发协作-也叫线程通信-，通常用于生产者-消费者模式，情景如下："><a href="#线程并发协作-也叫线程通信-，通常用于生产者-消费者模式，情景如下：" class="headerlink" title="线程并发协作(也叫线程通信)，通常用于生产者/消费者模式，情景如下："></a>线程并发协作(也叫线程通信)，通常用于生产者/消费者模式，情景如下：</h2><h3 id="1-生产者和消费者共享同一个资源，并且生产者和消费者之间相互依赖，互为条件。"><a href="#1-生产者和消费者共享同一个资源，并且生产者和消费者之间相互依赖，互为条件。" class="headerlink" title="1. 生产者和消费者共享同一个资源，并且生产者和消费者之间相互依赖，互为条件。"></a>1. 生产者和消费者共享同一个资源，并且生产者和消费者之间相互依赖，互为条件。</h3><h3 id="2-对于生产者，没有生产产品之前，消费者要进入等待状态。而生产了产品之后，又需要马上通知消费者消费。"><a href="#2-对于生产者，没有生产产品之前，消费者要进入等待状态。而生产了产品之后，又需要马上通知消费者消费。" class="headerlink" title="2. 对于生产者，没有生产产品之前，消费者要进入等待状态。而生产了产品之后，又需要马上通知消费者消费。"></a>2. 对于生产者，没有生产产品之前，消费者要进入等待状态。而生产了产品之后，又需要马上通知消费者消费。</h3><h3 id="3-对于消费者，在消费之后，要通知生产者已经消费结束，需要继续生产新产品以供消费。"><a href="#3-对于消费者，在消费之后，要通知生产者已经消费结束，需要继续生产新产品以供消费。" class="headerlink" title="3. 对于消费者，在消费之后，要通知生产者已经消费结束，需要继续生产新产品以供消费。"></a>3. 对于消费者，在消费之后，要通知生产者已经消费结束，需要继续生产新产品以供消费。</h3><h3 id="4-在生产者消费者问题中，仅有synchronized是不够的。"><a href="#4-在生产者消费者问题中，仅有synchronized是不够的。" class="headerlink" title="4. 在生产者消费者问题中，仅有synchronized是不够的。"></a>4. 在生产者消费者问题中，仅有synchronized是不够的。</h3><h4 id="synchronized可阻止并发更新同一个共享资源，实现了同步"><a href="#synchronized可阻止并发更新同一个共享资源，实现了同步" class="headerlink" title="synchronized可阻止并发更新同一个共享资源，实现了同步;"></a>synchronized可阻止并发更新同一个共享资源，实现了同步;</h4><h4 id="synchronized不能用来实现不同线程之间的消息传递-通信-。"><a href="#synchronized不能用来实现不同线程之间的消息传递-通信-。" class="headerlink" title="synchronized不能用来实现不同线程之间的消息传递(通信)。"></a>synchronized不能用来实现不同线程之间的消息传递(通信)。</h4><h3 id="5-以上方法均是java-lang-Object类的方法"><a href="#5-以上方法均是java-lang-Object类的方法" class="headerlink" title="5. 以上方法均是java.lang.Object类的方法;"></a>5. 以上方法均是java.lang.Object类的方法;</h3><p>都只能在同步方法或者同步代码块中使用，否则会抛出异常。</p>
]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程实现</title>
    <url>/2019/08/04/%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p> 多线程是Java语言的重要特性，大量应用于网络编程、服务器端程序的开发，最常见的UI界面底层原理、操作系统底层原理都大量使用了多线程。我们可以流畅的点击软件或者游戏中的各种按钮，其实，底层就是多线程的应用。UI界面的主线程绘制界面，如果有一个耗时的操作发生则启动新的线程，完全不影响主线程的工作。当这个线程工作完毕后，再更新到主界面上。我们可以上百人、上千人、上万人同时访问某个网站，其实，也是基于网站服务器的多线程原理。如果没有多线程，服务器处理速度会极大降低。<a id="more"></a></p>
<h1 id="通过继承Thread类实现多线程"><a href="#通过继承Thread类实现多线程" class="headerlink" title="通过继承Thread类实现多线程"></a>通过继承Thread类实现多线程</h1><p> 继承Thread类实现多线程的步骤：<br>      1. 在Java中负责实现线程功能的类是java.lang.Thread 类。<br>      2. 可以通过创建 Thread的实例来创建新的线程。<br>      3. 每个线程都是通过某个特定的Thread对象所对应的方法run( )来完成其操作的，方法run( )称为线程体。<br>      4. 通过调用Thread类的start()方法来启动一个线程。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Study_01</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">		System.out.println(<span class="string">"Sleep"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">			System.out.println(<span class="string">"Study"</span>);</span><br><span class="line">		Study_01 st=<span class="keyword">new</span> Study_01();</span><br><span class="line">		st.start();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="缺点：Java不可以多继承。"><a href="#缺点：Java不可以多继承。" class="headerlink" title="缺点：Java不可以多继承。"></a>缺点：Java不可以多继承。</h3><h1 id="通过Runnable接口实现多线程"><a href="#通过Runnable接口实现多线程" class="headerlink" title="通过Runnable接口实现多线程"></a>通过Runnable接口实现多线程</h1><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Study_02</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		Study_02 st= <span class="keyword">new</span> Study_02();</span><br><span class="line">		Thread th=<span class="keyword">new</span> Thread(st);</span><br><span class="line">		th.start();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">			System.out.println(<span class="string">"eat"</span>);</span><br><span class="line">		<span class="comment">//new Thread(new Study_02()).start(); 只使用一次线程</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">			System.out.println(<span class="string">"Study"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>  推荐使用Runnable接口，即在实现Runnable接口的同时还可以继承某个类。所以实现Runnable接口的方式要通用一些。</p>
]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>线程状态</title>
    <url>/2019/08/05/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/</url>
    <content><![CDATA[<h1 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h1><p>一个线程对象在它的生命周期内，需要经历5个状态。<a id="more"></a></p>
<h1 id="新生状态-New"><a href="#新生状态-New" class="headerlink" title="新生状态(New)"></a>新生状态(New)</h1><p>  用new关键字建立一个线程对象后，该线程对象就处于新生状态。处于新生状态的线程有自己的内存空间，通过调用start方法进入就绪状态。</p>
<h1 id="就绪状态-Runnable"><a href="#就绪状态-Runnable" class="headerlink" title="就绪状态(Runnable)"></a>就绪状态(Runnable)</h1><p>  处于就绪状态的线程已经具备了运行条件，但是还没有被分配到CPU，处于“线程就绪队列”，等待系统为其分配CPU。就绪状态并不是执行状态，当系统选定一个等待执行的Thread对象后，它就会进入执行状态。一旦获得CPU，线程就进入运行状态并自动调用自己的run方法。有4中原因会导致线程进入就绪状态：<br>      1. 新建线程：调用start()方法，进入就绪状态;<br>      2. 阻塞线程：阻塞解除，进入就绪状态;<br>      3. 运行线程：调用yield()方法，直接进入就绪状态;<br>      4. 运行线程：JVM将CPU资源从本线程切换到其他线程。</p>
<h1 id="运行状态-Running"><a href="#运行状态-Running" class="headerlink" title="运行状态(Running)"></a>运行状态(Running)</h1><p>在运行状态的线程执行自己run方法中的代码，直到调用其他方法而终止或等待某资源而阻塞或完成任务而死亡。如果在给定的时间片内没有执行结束，就会被系统给换下来回到就绪状态。也可能由于某些“导致阻塞的事件”而进入阻塞状态。</p>
<h1 id="阻塞状态-Blocked"><a href="#阻塞状态-Blocked" class="headerlink" title="阻塞状态(Blocked)"></a>阻塞状态(Blocked)</h1><p>阻塞指的是暂停一个线程的执行以等待某个条件发生(如某资源就绪)。有4种原因会导致阻塞：<br>      1. 执行sleep(int millsecond)方法，使当前线程休眠，进入阻塞状态。当指定的时间到了后，线程进入就绪状态。<br>      2. 执行wait()方法，使当前线程进入阻塞状态。当使用nofity()方法唤醒这个线程后，它进入就绪状态。<br>      3. 线程运行时，某个操作进入阻塞状态，比如执行IO流操作(read()/write()方法本身就是阻塞的方法)。只有当引起该操作阻塞的原因消失后，线程进入就绪状态。<br>      4. join()线程联合: 当某个线程等待另一个线程执行结束后，才能继续执行时，使用join()方法。</p>
<h1 id="死亡状态-Terminated"><a href="#死亡状态-Terminated" class="headerlink" title="死亡状态(Terminated)"></a>死亡状态(Terminated)</h1><p>死亡状态是线程生命周期中的最后一个阶段。线程死亡的原因有两个。一个是正常运行的线程完成了它run()方法内的全部工作; 另一个是线程被强制终止，如通过执行stop()或destroy()方法来终止一个线程(注：stop()/destroy()方法已经被JDK废弃，不推荐使用)。<br>当一个线程进入死亡状态以后，就不能再回到其它状态了。</p>
]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>电影院购票系统</title>
    <url>/2019/08/06/%E7%94%B5%E5%BD%B1%E9%99%A2%E8%B4%AD%E7%A5%A8%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="电影院购票系统"><a href="#电影院购票系统" class="headerlink" title="电影院购票系统"></a>电影院购票系统</h1><p>利用Java多线程实现电影院购票系统。<a id="more"></a></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cinema_Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		List&lt;Integer&gt; list =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		list.add(<span class="number">1</span>);list.add(<span class="number">4</span>);list.add(<span class="number">6</span>);list.add(<span class="number">7</span>);list.add(<span class="number">8</span>);list.add(<span class="number">2</span>);list.add(<span class="number">3</span>);</span><br><span class="line">		List&lt;Integer&gt; Min =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		Min.add(<span class="number">3</span>);Min.add(<span class="number">6</span>);Min.add(<span class="number">7</span>);</span><br><span class="line">		List&lt;Integer&gt; Wang =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		Wang.add(<span class="number">6</span>);Wang.add(<span class="number">10</span>);Wang.add(<span class="number">7</span>);</span><br><span class="line">		Cinema c=<span class="keyword">new</span> Cinema(list,<span class="string">"万达"</span>);</span><br><span class="line">		<span class="keyword">new</span> Thread(<span class="keyword">new</span> User(Min,c),<span class="string">"小明"</span>).start();</span><br><span class="line">		<span class="keyword">new</span> Thread(<span class="keyword">new</span> User(Wang,c),<span class="string">"老王"</span>).start();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//电影院</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cinema</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> List&lt;Integer&gt; Number;</span><br><span class="line">	String Name;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Cinema</span><span class="params">(List&lt;Integer&gt; number, String name)</span> </span>&#123;</span><br><span class="line">		Number = number;</span><br><span class="line">		Name = name;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//买票</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Choice</span><span class="params">(List&lt;Integer&gt; Position)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"可用位置："</span>+Number);</span><br><span class="line">		List&lt;Integer&gt; list =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		list.addAll(Number);</span><br><span class="line">		list.removeAll(Position);</span><br><span class="line">		<span class="comment">//判断大小</span></span><br><span class="line">		<span class="keyword">if</span>(Number.size()-Position.size()!=list.size())</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		</span><br><span class="line">		 Number=list;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//用户</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> List&lt;Integer&gt; Position;</span><br><span class="line">	Cinema C;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(List&lt;Integer&gt; position, Cinema c)</span> </span>&#123;</span><br><span class="line">		Position = position;</span><br><span class="line">		C = c;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">synchronized</span>(C) &#123;</span><br><span class="line">			<span class="keyword">boolean</span> flag=C.Choice(Position);</span><br><span class="line">			<span class="keyword">if</span>(flag) &#123;</span><br><span class="line">				System.out.println(<span class="string">"出票成功"</span>+Thread.currentThread().getName()+<span class="string">"的位置是："</span>+Position);</span><br><span class="line">				&#125;</span><br><span class="line">			<span class="keyword">else</span> </span><br><span class="line">				System.out.println(<span class="string">"你要的位置是："</span>+Position+<span class="string">"\n"</span>+<span class="string">"出票失败，没有位置"</span>);</span><br><span class="line">				</span><br><span class="line">		&#125; <span class="comment">//同步锁</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>可用位置：[1, 4, 6, 7, 8, 2, 3]<br>出票成功小明的位置是：[3, 6, 7]<br>可用位置：[1, 4, 8, 2]<br>你要的位置是：[6, 10, 7]<br>出票失败，没有位置</p>
</blockquote>]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>AOP 切面编程</title>
    <url>/2020/04/07/AOP-%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p>AOP(Aspect-Oriented Programming, 面向切面编程): 是一种新的方法论, 是对传统 OOP(Object-Oriented Programming, 面向对象编程) 的补充.<a id="more"></a><br>AOP 的主要编程对象是切面(aspect), 而切面模块化横切关注点.<br>在应用 AOP 编程时, 仍然需要定义公共功能, 但可以明确的定义这个功能在哪里, 以什么方式应用, 并且不必修改受影响的类. 这样一来横切关注点就被模块化到特殊的对象(切面)里.<br>AOP 的好处:<br>每个事物逻辑位于一个位置, 代码不分散, 便于维护和升级<br>业务模块更简洁, 只包含核心业务代码.</p>
<h1 id="AOP-术语"><a href="#AOP-术语" class="headerlink" title="AOP 术语"></a>AOP 术语</h1><font size="4">
切面(Aspect):  横切关注点(跨越应用程序多个模块的功能)被模块化的特殊对象<br>

<p>通知(Advice):  切面必须要完成的工作</p>
<p>目标(Target): 被通知的对象</p>
<p>代理(Proxy): 向目标对象应用通知之后创建的对象</p>
<p>连接点（Joinpoint）：程序执行的某个特定位置：如类某个方法调用前、调用后、方法抛出异常后等。连接点由两个信息确定：方法表示的程序执行点；相对点表示的方位。例如 ArithmethicCalculator#add() 方法执行前的连接点，执行点为 ArithmethicCalculator#add()； 方位为该方法执行前的位置</p>
<p>切点（pointcut）：每个类都拥有多个连接点：例如 ArithmethicCalculator 的所有方法实际上都是连接点，即连接点是程序类中客观存在的事务。AOP 通过切点定位到特定的连接点。类比：连接点相当于数据库中的记录，切点相当于查询条件。切点和连接点不是一对一的关系，一个切点匹配多个连接点，切点通过 org.springframework.aop.Pointcut 接口进行描述，它使用类和方法作为连接点的查询条件。<br></p></font><p></p>
<h1 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h1><p>这里使用的是AspectJ的注解方式 ,整个工程依赖的包有：</p>
<blockquote><font size="4">
spring-beans-4.1.1.RELEASE.jar<br>
spring-context-4.1.1.RELEASE.jar<br>
spring-core-4.1.1.RELEASE.jar<br>
spring-expression-4.1.1.RELEASE.jar<br>
commons-logging-1.2.jar<br>
spring-aop-4.1.1.RELEASE.jar<br>
aspectjrt.jar<br>
aspectjweaver.jar<br>
com.springsource.org.aopalliance-1.0.0.jar
</font></blockquote>

<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.AOP.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i ,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> i ,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> i ,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> i ,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.AOP.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorImpl</span> <span class="keyword">implements</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> i+b;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> i-b;	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> i*b;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> i/b;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="切面类"><a href="#切面类" class="headerlink" title="切面类"></a>切面类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.AOP.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterReturning;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterThrowing;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把这个类声明成切面 ：把该类放入IOC 容器中、再声明为一个切面</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Order</span>：可以指定切面的优先级</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">1</span>)</span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingAspect</span> </span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@Before</span>：声明该方法是一个前置通知：在目标方法开始执行之前执行</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> joinPoint：获取参数</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="comment">//第一个* 代表任何返回值 第二个*代表此类名下的所有方法 只要符合声明里的方法都能触发前置通知 ..代表任意参数</span></span><br><span class="line">	<span class="meta">@Before</span>(<span class="string">"execution(public * spring.AOP.impl.Calculator.*(..))"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforMethod</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">		String method = joinPoint.getSignature().getName();</span><br><span class="line">		List&lt;Object&gt; list = Arrays.asList(joinPoint.getArgs());</span><br><span class="line">		System.out.println(<span class="string">"开始于"</span>+ method +<span class="string">"参数"</span>+ list);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@After</span>：声明该方法是一个后置置通知：在目标方法开始执行之后执行</span></span><br><span class="line"><span class="comment">	 * 不受出错控制，程序错误依然可以输出结果</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@After</span>(<span class="string">"execution(public * spring.AOP.impl.Calculator.*(..))"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"结束"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@AfterReturning</span>：获取方法返回值</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> joinpoint：获取参数</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> result：获取返回值</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@AfterReturning</span>(value=<span class="string">"execution(public * spring.AOP.impl.Calculator.*(..))"</span>,</span><br><span class="line">			returning = <span class="string">"result"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(JoinPoint joinPoint,Object result)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"结果："</span>+ result);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@AfterThrowing</span>：异常通知，方法发生错误时才会生效的通知</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> joinpoint：获取参数</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> ex：异常</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@AfterThrowing</span>(value=<span class="string">"execution(public * spring.AOP.impl.Calculator.*(..))"</span>,</span><br><span class="line">			throwing = <span class="string">"ex"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(JoinPoint joinPoint,Exception ex)</span> </span>&#123;</span><br><span class="line">		String method = joinPoint.getSignature().getName();</span><br><span class="line">		System.out.println(<span class="string">"方法"</span>+method+<span class="string">"出错，错误："</span>+ ex);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 环绕通知需要携带 ProceedingJoinPoint 类型的参数. </span></span><br><span class="line"><span class="comment">	 * 环绕通知类似于动态代理的全过程: ProceedingJoinPoint 类型的参数可以决定是否执行目标方法.</span></span><br><span class="line"><span class="comment">	 * 且环绕通知必须有返回值, 返回值即为目标方法的返回值</span></span><br><span class="line"><span class="comment">	 * 一般不使用,使用环绕通知，前面的代码需要删除</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Around</span>(<span class="string">"execution(public * spring.AOP.impl.Calculator.*(..))"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">aroundMethod</span><span class="params">(ProceedingJoinPoint pdj)</span></span>&#123;</span><br><span class="line">		</span><br><span class="line">		Object result = <span class="keyword">null</span>;</span><br><span class="line">		String methodName = pdj.getSignature().getName();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//前置通知</span></span><br><span class="line">			System.out.println(<span class="string">"开始于 "</span> + methodName + <span class="string">" 参数 "</span> + Arrays.asList(pdj.getArgs()));</span><br><span class="line">			<span class="comment">//执行目标方法</span></span><br><span class="line">			result = pdj.proceed();</span><br><span class="line">			<span class="comment">//返回通知</span></span><br><span class="line">			System.out.println(<span class="string">"结果 "</span>+ result );</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">			<span class="comment">//异常通知</span></span><br><span class="line">			System.out.println(<span class="string">"方法 "</span> + methodName + <span class="string">"出错，错误:"</span> + e);</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//后置通知</span></span><br><span class="line">		System.out.println(<span class="string">"结束"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置自动扫描的包 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"spring.AOP.impl"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 使AspectJ 注解起作用：自动为匹配的类生成代理对象 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.AOP.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"ApplicationContextAOP.xml"</span>);</span><br><span class="line">		Calculator calculator = (Calculator) ctx.getBean(Calculator.class); <span class="comment">//.class 是因为 @Component 没有声明名字</span></span><br><span class="line">		calculator.add(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">		calculator.sub(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">		calculator.div(<span class="number">5</span>, <span class="number">0</span>);	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font size="4">结果：</font></p>
<blockquote><p>开始于add参数[2, 3]<br>结束<br>结果：5<br>开始于sub参数[3, 4]<br>结束<br>结果：-1<br>开始于div参数[5, 0]<br>结束<br>方法div出错：java.lang.ArithmeticException: / by zero</p>
</blockquote>

<h2 id="关于切面表达式"><a href="#关于切面表达式" class="headerlink" title="关于切面表达式"></a>关于切面表达式</h2><p>在编写 AspectJ 切面时, 可以直接在通知注解中书写切入点表达式. 但同一个切点表达式可能会在多个通知中重复出现.<br>在 AspectJ 切面中, 可以通过 @Pointcut 注解将一个切入点声明成简单的方法. 切入点的方法体通常是空的, 因为将切入点定义与应用程序逻辑混在一起是不合理的.<br>切入点方法的访问控制符同时也控制着这个切入点的可见性. 如果切入点要在多个切面中共用, 最好将它们集中在一个公共的类中. 在这种情况下, 它们必须被声明为 public. 在引入这个切入点时, 必须将类名也包括在内. 如果类没有与这个切面放在同一个包中, 还必须包含包名.<br>其他通知可以通过方法名称引入该切入点.</p>
<h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 定义一个方法, 用于声明切入点表达式. 一般地, 该方法中再不需要添入其他的代码. </span></span><br><span class="line"><span class="comment">	 * 使用 <span class="doctag">@Pointcut</span> 来声明切入点表达式. </span></span><br><span class="line"><span class="comment">	 * 后面的其他通知直接使用方法名来引用当前的切入点表达式. </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Pointcut</span>(<span class="string">"execution(public * spring.AOP.impl.Calculator.*(..))"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">declareJointPointExpression</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@Before</span>：声明该方法是一个前置通知：在目标方法开始执行之前执行</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> joinPoint：获取参数</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="comment">//第一个* 代表任何返回值 第二个*代表此类名下的所有方法 只要符合声明里的方法都能触发前置通知 ..代表任意参数</span></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Before</span>(<span class="string">"declareJointPointExpression()"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforMethod</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">		String method = joinPoint.getSignature().getName();</span><br><span class="line">		List&lt;Object&gt; list = Arrays.asList(joinPoint.getArgs());</span><br><span class="line">		System.out.println(<span class="string">"开始于"</span>+ method +<span class="string">"参数"</span>+ list);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>关于AspectJ还有基于xml配置文件的方式，这里就不多赘述了，自行学习。</p>
]]></content>
      <categories>
        <category>Spring 基础</category>
      </categories>
      <tags>
        <tag>Spring 基础</tag>
      </tags>
  </entry>
  <entry>
    <title>resultMap-学习</title>
    <url>/2020/05/03/ResultMap-%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>resultMap是MyBatis的自定义结果映射规则，使用频繁。<a id="more"></a></p>
<style>
    p{margin:0px 0} 
</style>

<h1 id="resultMap基础使用"><a href="#resultMap基础使用" class="headerlink" title="resultMap基础使用"></a>resultMap基础使用</h1><h2 id="映射文件"><a href="#映射文件" class="headerlink" title="映射文件"></a>映射文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--resultMap：自定义某个javaBean的封装规则</span></span><br><span class="line"><span class="comment">	type：自定义规则的Java类型</span></span><br><span class="line"><span class="comment">	id:唯一id方便引用</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"entity.Ban"</span> <span class="attr">id</span>=<span class="string">"resultMap1"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--指定主键列的封装规则</span></span><br><span class="line"><span class="comment">	id定义主键会底层有优化；</span></span><br><span class="line"><span class="comment">	column：指定哪一列,数据库中的列，在查询语句中使用别名，这里也可以写别名</span></span><br><span class="line"><span class="comment">	property：指定对应的javaBean属性</span></span><br><span class="line"><span class="comment">	 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 定义普通列封装规则 --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 其他不指定的列会自动封装 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"ban"</span> <span class="attr">property</span>=<span class="string">"ban"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- resultMap:自定义结果集映射规则；  --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- public Ban getClassInfo(Integer id); 接口方法--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getClassInfo"</span> <span class="attr">resultMap</span>=<span class="string">"resultMap1"</span>&gt;</span></span><br><span class="line">		select * from Student_class where id=#&#123;id&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">getSqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">	String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">	InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testResultMap1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">	SqlSessionFactory sessionFactory = getSqlSessionFactory();</span><br><span class="line">	SqlSession openSession = sessionFactory.openSession();</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">	BanDao classDao = openSession.getMapper(BanDao.class);</span><br><span class="line">	Ban classInfo = classDao.getClassInfo(<span class="number">2</span>);</span><br><span class="line">	System.out.println(classInfo);</span><br><span class="line">	&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">		openSession.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="resultMap单个对象联合查询"><a href="#resultMap单个对象联合查询" class="headerlink" title="resultMap单个对象联合查询"></a>resultMap单个对象联合查询</h1><p>场景一：</p>
<p>&nbsp&nbsp&nbsp 查询user的同时查询学生对应的班级</p>
<p>&nbsp&nbsp&nbsp user.userclass=Student_class.id</p>
<p>&nbsp&nbsp&nbsp 一个学生有与之对应的班级信息；</p>
<p>&nbsp&nbsp&nbsp id  name  sex   userclass  ||  id  ban</p>

<h2 id="映射文件-1"><a href="#映射文件-1" class="headerlink" title="映射文件"></a>映射文件</h2><p>在resultMap中使用使用association定义关联的单个对象的封装规则。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">联合查询：级联属性封装结果集</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">使用association定义关联的单个对象的封装规则；</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"entity.Student"</span> <span class="attr">id</span>=<span class="string">"resultMap2"</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userclass"</span> <span class="attr">property</span>=<span class="string">"Userclass"</span>/&gt;</span></span><br><span class="line"> 	<span class="comment">&lt;!--  association可以指定联合的javaBean对象</span></span><br><span class="line"><span class="comment">	property="ban"：指定哪个属性是联合的对象</span></span><br><span class="line"><span class="comment">	javaType:指定这个属性对象的类型[不能省略]</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"ban"</span> <span class="attr">javaType</span>=<span class="string">"entity.Ban"</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"ban"</span> <span class="attr">property</span>=<span class="string">"ban"</span>/&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- public Student getResultStudent(Integer id); 接口方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getResultStudent"</span> <span class="attr">resultMap</span>=<span class="string">"resultMap2"</span>&gt;</span></span><br><span class="line">	SELECT distinct u.id id,u.name name,u.sex sex,u.userclass userclass,s.id id,s.ban ban </span><br><span class="line">	FROM user u,student_class s </span><br><span class="line">	WHERE u.userclass=s.id AND u.id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testResultMap2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">	SqlSessionFactory sessionFactory = getSqlSessionFactory();</span><br><span class="line">	SqlSession openSession = sessionFactory.openSession();</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">	 BanDao banDao = openSession.getMapper(BanDao.class);</span><br><span class="line">	Student student = banDao.getResultStudent(<span class="number">1</span>);</span><br><span class="line">	Ban ban = student.getBan();</span><br><span class="line">	System.out.println(student);</span><br><span class="line">	System.out.println(ban);</span><br><span class="line">	&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">		openSession.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="resultMap联合分步查询"><a href="#resultMap联合分步查询" class="headerlink" title="resultMap联合分步查询"></a>resultMap联合分步查询</h1><p>使用association进行分步查询。</p>
<h2 id="映射文件-2"><a href="#映射文件-2" class="headerlink" title="映射文件"></a>映射文件</h2><p>使用分步查询需要新建一个班级的映射文件。<br>学生信息映射文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用association进行分步查询：</span></span><br><span class="line"><span class="comment">	1、先按照学生id查询学生信息</span></span><br><span class="line"><span class="comment">	2、根据查询学生信息中的userclass值去班级表查出班级信息</span></span><br><span class="line"><span class="comment">	3、班级设置到学生中；</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"entity.Student"</span> <span class="attr">id</span>=<span class="string">"resultMapstep"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userclass"</span> <span class="attr">property</span>=<span class="string">"Userclass"</span>/&gt;</span></span><br><span class="line">  	<span class="comment">&lt;!-- association定义关联对象的封装规则</span></span><br><span class="line"><span class="comment"> 		select:表明当前属性是调用select指定的方法查出的结果</span></span><br><span class="line"><span class="comment"> 		column:指定将哪一列的值传给这个方法</span></span><br><span class="line"><span class="comment"> 		</span></span><br><span class="line"><span class="comment"> 		流程：使用select指定的方法（传入column指定的这列参数的值）查出对象，并封装给property指定的属性</span></span><br><span class="line"><span class="comment"> 		这里调用的班级信息映射文件中的方法，调用方式为映射文件命名空间+方法id。</span></span><br><span class="line"><span class="comment"> 		property="ban" 这是实体类中的属性名</span></span><br><span class="line"><span class="comment"> 	 --&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"ban"</span> </span></span><br><span class="line"><span class="tag">  		<span class="attr">select</span>=<span class="string">"Dao.BanMapper.getBanbyId"</span> <span class="attr">column</span>=<span class="string">"userclass"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>班级信息映射文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta"> PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta"> "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"Dao.BanMapper"</span>&gt;</span></span><br><span class="line"> 		<span class="comment">&lt;!-- public Ban getBanbyId(Integer id); 新的接口类的接口方法--&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getBanbyId"</span> <span class="attr">resultType</span>=<span class="string">"entity.Ban"</span>&gt;</span></span><br><span class="line"> 		select id,ban from student_class where id=#&#123;id&#125;</span><br><span class="line"> 		<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> 	 <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testResultMapStep</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		SqlSessionFactory sessionFactory = getSqlSessionFactory();</span><br><span class="line">		SqlSession openSession = sessionFactory.openSession();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">		BanDao banDao = openSession.getMapper(BanDao.class);</span><br><span class="line">		Student banIdstep = banDao.getBanIdstep(<span class="number">3</span>);</span><br><span class="line">		System.out.println(banIdstep);</span><br><span class="line">		&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">			openSession.close();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h1 id="resultMap集合对象关联查询"><a href="#resultMap集合对象关联查询" class="headerlink" title="resultMap集合对象关联查询"></a>resultMap集合对象关联查询</h1><p>场景二：</p>
<p>&nbsp&nbsp&nbsp查询班级的时候将班级对应的所有学生信息也查询出来：注释在BanMapper.xml中</p>

<h2 id="BanMapper-xml-班级信息映射文件"><a href="#BanMapper-xml-班级信息映射文件" class="headerlink" title="BanMapper.xml(班级信息映射文件)"></a>BanMapper.xml(班级信息映射文件)</h2><p>嵌套结果集的方式，使用collection标签定义关联的集合类型的属性封装规则。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- public class Ban &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	private Integer id;</span></span><br><span class="line"><span class="comment">	private String ban;</span></span><br><span class="line"><span class="comment">	private List&lt;Student&gt; emp; 集合</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--嵌套结果集的方式，使用collection标签定义关联的集合类型的属性封装规则  --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"entity.Ban"</span> <span class="attr">id</span>=<span class="string">"ListResultMap"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--这里主键列名是用的是别名，详情看下方SQL语句--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"IDB"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"ban"</span> <span class="attr">property</span>=<span class="string">"ban"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">		collection定义关联集合类型的属性的封装规则 </span></span><br><span class="line"><span class="comment">		ofType:指定集合里面元素的类型</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"emp"</span> <span class="attr">ofType</span>=<span class="string">"entity.Student"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 定义这个集合中元素的封装规则 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userclass"</span> <span class="attr">property</span>=<span class="string">"Userclass"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- public Ban getbanIDList(Integer id); 接口方法--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getbanIDList"</span> <span class="attr">resultMap</span>=<span class="string">"ListResultMap"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 在使用级联查询的时候，如果主表和副表的主键都是相同的在MyBatis中查询结果只会出现一条 </span></span><br><span class="line"><span class="comment">		 需要启用别名，使用了别名需要在collection处也更改列的名称</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">		SELECT s.id IDB,s.ban,u.id,u.name,u.sex,u.userclass</span><br><span class="line">	FROM student_class s</span><br><span class="line">	LEFT JOIN user u</span><br><span class="line">	ON s.id=u.userclass</span><br><span class="line">	WHERE s.id=#&#123;id&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testResultMapcollection</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		SqlSessionFactory sessionFactory = getSqlSessionFactory();</span><br><span class="line">		SqlSession openSession = sessionFactory.openSession();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">		 BanMapper mapper = openSession.getMapper(BanMapper.class);</span><br><span class="line">		Ban list = mapper.getbanIDList(<span class="number">1</span>);</span><br><span class="line">		List&lt;Student&gt; list2 = list.getList();</span><br><span class="line">		System.out.println(list);</span><br><span class="line">		System.out.println(list2);</span><br><span class="line">		&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">			openSession.close();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h1 id="resultMap集合对象关联分步查询"><a href="#resultMap集合对象关联分步查询" class="headerlink" title="resultMap集合对象关联分步查询"></a>resultMap集合对象关联分步查询</h1><p>使用collection进行分步查询。</p>
<h2 id="映射文件-3"><a href="#映射文件-3" class="headerlink" title="映射文件"></a>映射文件</h2><p>班级映射文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta"> PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta"> "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"Dao.BanMapper"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"entity.Ban"</span> <span class="attr">id</span>=<span class="string">"ListResultMapStep"</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"ban"</span> <span class="attr">property</span>=<span class="string">"ban"</span>/&gt;</span></span><br><span class="line"> 		<span class="comment">&lt;!--跟association使用方式差不多--&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"emp"</span> </span></span><br><span class="line"><span class="tag"> 		<span class="attr">select</span>=<span class="string">"Dao.BanDao.getStudent"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"> 	<span class="comment">&lt;!-- public Ban getbanIDListStep(Integer id); 接口方法--&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getbanIDListStep"</span> <span class="attr">resultMap</span>=<span class="string">"ListResultMapStep"</span>&gt;</span></span><br><span class="line"> 		select * from student_class where id=#&#123;id&#125;</span><br><span class="line"> 	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br><span class="line">学生信息映射文件</span><br><span class="line">```Xml</span><br><span class="line"><span class="comment">&lt;!-- public List&lt;Student&gt; getStudent(Integer id); 接口方法--&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudent"</span> <span class="attr">resultType</span>=<span class="string">"entity.Student"</span>&gt;</span></span><br><span class="line">	 	select * from user where userclass=#&#123;id&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="测试-4"><a href="#测试-4" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testResultMapcollectionStep</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		SqlSessionFactory sessionFactory = getSqlSessionFactory();</span><br><span class="line">		SqlSession openSession = sessionFactory.openSession();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">		 BanMapper mapper = openSession.getMapper(BanMapper.class);</span><br><span class="line">		 Ban listStep = mapper.getbanIDListStep(<span class="number">1</span>);</span><br><span class="line">		 <span class="comment">//这里获取需关闭懒加载，否者获取不到list信息，全局配置文件中设置</span></span><br><span class="line">		 List&lt;Student&gt; list = listStep.getList();</span><br><span class="line">		 System.out.println(listStep);</span><br><span class="line">		 System.out.println(list);</span><br><span class="line">		&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">			openSession.close();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在使用分步查询的时候需要一个实体类拥有一个方法接口和相对应的映射文件，最重要的是一定要把映射文件注册到全局配置文件中。</p>
]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>第一个SSM项目</title>
    <url>/2020/05/21/%E7%AC%AC%E4%B8%80%E4%B8%AASSM%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="SSM-CRUD"><a href="#SSM-CRUD" class="headerlink" title="SSM-CRUD"></a>SSM-CRUD</h1><p>这是我写的第一个SSM框架的项目，写得很简单，写这个博客来梳理一下自己所学的知识点。<br><a href="https://github.com/JiskZcz/First_SSM" target="_blank" rel="noopener"><font color="red" size="5px">这是GitHub项目地址</font></a><br>SSM:SpringMVC+Spring+MyBatis<br>CRUD：    Create（创建）        Retrieve（查询）            Update（更新）        Delete（删除）<a id="more"></a></p>
<h1 id="功能点"><a href="#功能点" class="headerlink" title="功能点"></a>功能点</h1><p>• 1、分页<br>• 2、数据校验<br>• jquery前端校验+JSR303后端校验<br>• 3、ajax<br>• 4、Rest风格的URI；使用HTTP协议请求方式的动词，来表示对资源的操作（GET（查询），POST（新增），PUT（修改），DELETE（删除））</p>
<h1 id="技术点"><a href="#技术点" class="headerlink" title="技术点"></a>技术点</h1><p>• 基础框架-SSM（SpringMVC+Spring+MyBatis）<br>• 数据库-MySQL<br>• 前端框架-bootstrap快速搭建简洁美观的界面<br>• 项目的依赖管理-Maven<br>• 分页-pagehelper<br>• 逆向工程-MyBatis Generator</p>
<h1 id="基础环境搭建"><a href="#基础环境搭建" class="headerlink" title="基础环境搭建"></a>基础环境搭建</h1><p>• 1、创建一个maven工程<br>• 2、引入项目依赖的jar包<br>• spring<br>• springmvc<br>• MyBatis<br>• 数据库连接池，驱动包<br>• 其他（jstl，servlet-api，junit）<br>• 3、引入bootstrap前端框架<br>• 4、编写ssm整合的关键配置文件<br>• web.xml，spring,springmvc,MyBatis，使用MyBatis的逆向工程生成对应的bean以及mapper<br>• 5、测试mapper</p>
<h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><p><img src="/images/First_SSM/SSM%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="tip"></p>
<h1 id="Maven管理的jar包"><a href="#Maven管理的jar包" class="headerlink" title="Maven管理的jar包"></a>Maven管理的jar包</h1><p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.my<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SSM<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 分页插件 PageHelper --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- MyBatis --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- springmvc --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- MyBatis --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- MyBatis整合spring --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- c3p0 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.41<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 返回json字符串的支持 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- JSR303 数据校验 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="配置文件的编写"><a href="#配置文件的编写" class="headerlink" title="配置文件的编写"></a>配置文件的编写</h1><p>需要配置:<br>web.xml、spring的配置文件、MyBatis的配置文件、springmvc配置文件、Maven逆向工程文件、外部文件。</p>
<h2 id="web配置"><a href="#web配置" class="headerlink" title="web配置"></a>web配置</h2><p>web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.0"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 启动spring的容器 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- needed for ContextLoaderListener --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- Bootstraps the root web application context before servlet initialization --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- springMVC的前端控制器 拦截所有请求  这里没有使用 init-param 需要在当前目录下建立dispatcherServlet-servlet.xml  spring 配置文件--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- The front controller of this Spring Web application, responsible for handling all application requests --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- Map all requests to the DispatcherServlet for handling --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span>	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 字符编码过滤器，一定要放在所有过滤器之前 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 4、使用Rest风格的URI，将页面普通的post请求转为指定的delete或者put请求 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 官方文档 org.springframework 5.1之后使用 FormContentFilter 代替 HttpPutFormContentFilter --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FormContentFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.FormContentFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FormContentFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--配置读取spring文件的路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="springmvc配置文件"><a href="#springmvc配置文件" class="headerlink" title="springmvc配置文件"></a>springmvc配置文件</h2><p>由于web.xml文件中dispatcherServlet 没有使用 init-param 需要在当前文件下建立配置文件。<br>dispatcherServlet-servlet.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--SpringMVC的配置文件，包含网站跳转逻辑的控制，配置  --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.my"</span> <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--只扫描控制器。  --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!--配置视图解析器，方便页面返回  --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!--两个标准配置  --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 将springmvc不能处理的请求交给tomcat --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 能支持springmvc更高级的一些功能，JSR303校验，快捷的ajax...映射动态请求 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="spring配置文件"><a href="#spring配置文件" class="headerlink" title="spring配置文件"></a>spring配置文件</h2><p>applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.my"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span></span></span><br><span class="line"><span class="tag">			<span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- Spring的配置文件，这里主要配置和业务逻辑有关的 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--=================== 数据源，事务控制，xxx ================ --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:dbconfig.properties"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"pooledDataSource"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.jdbcUrl&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.user&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!--================== 配置和MyBatis的整合=============== --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 指定mybatis全局配置文件的位置 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span></span></span><br><span class="line"><span class="tag">			<span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"pooledDataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 指定mybatis，mapper文件的位置 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span></span></span><br><span class="line"><span class="tag">			<span class="attr">value</span>=<span class="string">"classpath:mapper/*.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 配置扫描器，将mybatis接口的实现加入到ioc容器中 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--扫描所有dao接口的实现，加入到ioc容器中 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.my.crud.dao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 配置一个可以执行批量的sqlSession --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSession"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionTemplate"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span></span></span><br><span class="line"><span class="tag">			<span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"executorType"</span> <span class="attr">value</span>=<span class="string">"BATCH"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--============================================= --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- ===============事务控制的配置 ================ --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--控制住数据源 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"pooledDataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--开启基于注解的事务，使用xml配置形式的事务（必要主要的都是使用配置式） --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 切入点表达式 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:pointcut</span></span></span><br><span class="line"><span class="tag">			<span class="attr">expression</span>=<span class="string">"execution(* com.my.crud.service..*(..))"</span> <span class="attr">id</span>=<span class="string">"txPoint"</span> /&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置事务增强 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"txPoint"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--配置事务增强，事务如何切入 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 所有方法都是事务方法 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> /&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--以get开始的所有方法 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- Spring配置文件的核心点（数据源、与mybatis的整合，事务控制） --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="MyBatis配置文件"><a href="#MyBatis配置文件" class="headerlink" title="MyBatis配置文件"></a>MyBatis配置文件</h2><p>mybatis-config.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">  "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 驼峰命名法 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.my.crud.bean"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.github.pagehelper.PageInterceptor"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--分页参数合理化  --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"reasonable"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Maven逆向工程文件"><a href="#Maven逆向工程文件" class="headerlink" title="Maven逆向工程文件"></a>Maven逆向工程文件</h2><p>MBG.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"DB2Tables"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置数据库连接 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">			<span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://localhost:3306/student"</span> <span class="attr">userId</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">			<span class="attr">password</span>=<span class="string">"123456"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 指定javaBean生成的位置 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.my.crud.bean"</span></span></span><br><span class="line"><span class="tag">			<span class="attr">targetProject</span>=<span class="string">".\src\main\java"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!--指定sql映射文件生成的位置 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"mapper"</span> <span class="attr">targetProject</span>=<span class="string">".\src\main\resources"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 指定dao接口生成的位置，mapper接口 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span></span></span><br><span class="line"><span class="tag">			<span class="attr">targetPackage</span>=<span class="string">"com.my.crud.dao"</span> <span class="attr">targetProject</span>=<span class="string">".\src\main\java"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- table指定每个表的生成策略 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"user"</span> <span class="attr">domainObjectName</span>=<span class="string">"Student"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"pos"</span> <span class="attr">domainObjectName</span>=<span class="string">"Pos"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="外部文件"><a href="#外部文件" class="headerlink" title="外部文件"></a>外部文件</h2><p>这里存放了连接数据库的数据。<br>dbconfig.properties</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdbc.jdbcUrl=jdbc:mysql://localhost:3306/student</span><br><span class="line">jdbc.driverClass=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.user=root</span><br><span class="line">jdbc.password=123456</span><br></pre></td></tr></table></figure>

<h1 id="使用逆向工程生成文件"><a href="#使用逆向工程生成文件" class="headerlink" title="使用逆向工程生成文件"></a>使用逆向工程生成文件</h1><p>使用MyBatis Generator。</p>
<h2 id="MyBatis通过Java代码生成逆向文件"><a href="#MyBatis通过Java代码生成逆向文件" class="headerlink" title="MyBatis通过Java代码生成逆向文件"></a>MyBatis通过Java代码生成逆向文件</h2><p>MBG.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> MBGTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.MyBatisGenerator;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.config.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.config.xml.ConfigurationParser;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.internal.DefaultShellCallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MBG</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">		<span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span><br><span class="line">		File configFile = <span class="keyword">new</span> File(<span class="string">"MBG.xml"</span>);</span><br><span class="line">		ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">		Configuration config = cp.parseConfiguration(configFile);</span><br><span class="line">		DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</span><br><span class="line">		MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config,</span><br><span class="line">				callback, warnings);</span><br><span class="line">		myBatisGenerator.generate(<span class="keyword">null</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="给逆向生成的Mapper文件添加方法"><a href="#给逆向生成的Mapper文件添加方法" class="headerlink" title="给逆向生成的Mapper文件添加方法"></a>给逆向生成的Mapper文件添加方法</h2><p>在使用逆向生成的Mapper时，只能进行单个表的查询，不能进行级联查询，需要自行添加查询方法，我这里因为学生信息里包含了职位的ID，需要进行级联查询，自行在Mapper文件中添加了查询方法和返回结果集,需要在生成的XXMapper.java 中添加相关方法。<br>StudentMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 包含职位信息 自定义结果集--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.my.crud.bean.Student"</span> <span class="attr">id</span>=<span class="string">"WithposResultMap"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"sex"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"posit"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"posit"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 级联查询 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"pos"</span> <span class="attr">javaType</span>=<span class="string">"com.my.crud.bean.Pos"</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"sid"</span> <span class="attr">property</span>=<span class="string">"sid"</span>/&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"position"</span> <span class="attr">property</span>=<span class="string">"position"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 将重复语句抽取出来 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"Withpos_Column_List"</span>&gt;</span></span><br><span class="line">    id, name, sex, posit,sid,position</span><br><span class="line">  <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 带职位的查询 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- List&lt;Student&gt; selectByExampleWithpos(StudentExample example); --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByExampleWithpos"</span> <span class="attr">resultMap</span>=<span class="string">"WithposResultMap"</span>&gt;</span></span><br><span class="line">  	 select</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"distinct"</span>&gt;</span></span><br><span class="line">      distinct</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Withpos_Column_List"</span> /&gt;</span></span><br><span class="line">    from user left JOIN pos on posit=sid</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_parameter != null"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Example_Where_Clause"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"orderByClause != null"</span>&gt;</span></span><br><span class="line">      order by $&#123;orderByClause&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Student selectByPrimaryKeyWithpos(Integer id); --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByPrimaryKeyWithpos"</span> <span class="attr">resultMap</span>=<span class="string">"WithposResultMap"</span>&gt;</span></span><br><span class="line">  	select </span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Withpos_Column_List"</span> /&gt;</span></span><br><span class="line">    from user left JOIN pos on posit=sid</span><br><span class="line">    where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="正式开始"><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h1><p>前面配置文件准备完成和测试完成后，就可以开始正式开始写项目了，这里在jsp文件中编写的页面，使用了bootstrap,非常的简陋。</p>
<h2 id="返回json的处理"><a href="#返回json的处理" class="headerlink" title="返回json的处理"></a>返回json的处理</h2><p>MSG.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.my.crud.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用的返回类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Msg</span> </span>&#123;</span><br><span class="line">	<span class="comment">//状态码  100-成功 200-失败</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">	<span class="comment">//提示信息</span></span><br><span class="line">	<span class="keyword">private</span> String msg;</span><br><span class="line">	<span class="comment">//用户返回给服务器的数据</span></span><br><span class="line">	<span class="keyword">private</span> Map&lt;String,Object&gt; extend = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Msg <span class="title">success</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Msg result = <span class="keyword">new</span> Msg();</span><br><span class="line">		result.setCode(<span class="number">100</span>);</span><br><span class="line">		result.setMsg(<span class="string">"处理成功"</span>);</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Msg <span class="title">fail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Msg result = <span class="keyword">new</span> Msg();</span><br><span class="line">		result.setCode(<span class="number">200</span>);</span><br><span class="line">		result.setMsg(<span class="string">"处理失败"</span>);</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Msg <span class="title">add</span><span class="params">(String key,Object value)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.getExtend().put(key, value);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> code;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.code = code;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> msg;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.msg = msg;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getExtend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> extend;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExtend</span><span class="params">(Map&lt;String, Object&gt; extend)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.extend = extend;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="职位信息的处理"><a href="#职位信息的处理" class="headerlink" title="职位信息的处理"></a>职位信息的处理</h2><p>由于只是一个查询职位信息，单独写出来。<br>Poscontroller.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.my.crud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.my.crud.bean.Msg;</span><br><span class="line"><span class="keyword">import</span> com.my.crud.bean.Pos;</span><br><span class="line"><span class="keyword">import</span> com.my.crud.service.PosService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Poscontroller</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> PosService posService;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@ResponseBody</span></span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/positAll"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Msg <span class="title">getPosAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		List&lt;Pos&gt; list = posService.getPosAll();</span><br><span class="line">		<span class="keyword">return</span> Msg.success().add(<span class="string">"posits"</span>, list);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PosService.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.my.crud.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.my.crud.bean.Pos;</span><br><span class="line"><span class="keyword">import</span> com.my.crud.dao.PosMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PosService</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> PosMapper posMapper;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;Pos&gt; <span class="title">getPosAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">		List&lt;Pos&gt; list = posMapper.selectByExample(<span class="keyword">null</span>);</span><br><span class="line">		<span class="keyword">return</span> list;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><p>• 1、访问index.jsp页面<br>• 2、index.jsp页面发送出查询学生列表请求<br>• 3、Studentcontroller来接受请求，查出学生数据,返回json<br>• 4、js解析json填充数据<br>• 5、pageHelper分页插件完成分页查询功能<br>• URI：/stus</p>
<h1 id="查询-ajax"><a href="#查询-ajax" class="headerlink" title="查询-ajax"></a>查询-ajax</h1><p>• 1、index.jsp页面直接发送ajax请求进行员工分页数据的查询<br>• 2、服务器将查出的数据，以json字符串的形式返回给浏览器<br>• 3、浏览器收到js字符串。可以使用js对json进行解析，使用js通过dom增删改改变页面。<br>• 4、返回json。实现客户端的无关性。</p>
<h2 id="主页展示"><a href="#主页展示" class="headerlink" title="主页展示"></a>主页展示</h2><p><img src="/images/First_SSM/%E4%B8%BB%E9%A1%B5.png" alt="tip"></p>
<h3 id="主页代码"><a href="#主页代码" class="headerlink" title="主页代码"></a>主页代码</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">	pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%<span class="meta">@taglib</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;学生列表&lt;/title&gt;</span><br><span class="line">&lt;%</span><br><span class="line">	pageContext.setAttribute(<span class="string">"APP_PATH"</span>, request.getContextPath());</span><br><span class="line">%&gt;</span><br><span class="line">&lt;!-- web路径：</span><br><span class="line">不以/开始的相对路径，找资源，以当前资源的路径为基准，经常容易出问题。</span><br><span class="line">以/开始的相对路径，找资源，以服务器的路径为标准(http:<span class="comment">//localhost:3306)；需要加上项目名</span></span><br><span class="line">		http:<span class="comment">//localhost:3306/crud</span></span><br><span class="line"> --&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span></span><br><span class="line">	src="$&#123;APP_PATH &#125;/static/js/jquery-3.5.1.min.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;link</span><br><span class="line">	href=<span class="string">"$&#123;APP_PATH &#125;/static/bootstrap-3.3.7-dist/css/bootstrap.min.css"</span></span><br><span class="line">	rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line">&lt;script</span><br><span class="line">	src="$&#123;APP_PATH &#125;/static/bootstrap-3.3.7-dist/js/bootstrap.min.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;!-- 搭建显示页面 --&gt;</span><br><span class="line">	&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;</span><br><span class="line">		&lt;!-- 标题 --&gt;</span><br><span class="line">		&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">			&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-12"</span>&gt;</span><br><span class="line">				&lt;h1&gt;SSM-CRUD&lt;/h1&gt;</span><br><span class="line">			&lt;/div&gt;</span><br><span class="line">		&lt;/div&gt;</span><br><span class="line">		&lt;!-- 按钮 --&gt;</span><br><span class="line">		&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">			&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-4 col-md-offset-8"</span>&gt;</span><br><span class="line">				&lt;button class="btn btn-primary" id="stu_add_modal_btn"&gt;新增&lt;/button&gt;</span><br><span class="line">				&lt;button class="btn btn-danger" id="stu_delete_all_btn"&gt;删除&lt;/button&gt;</span><br><span class="line">			&lt;/div&gt;</span><br><span class="line">		&lt;/div&gt;</span><br><span class="line">		&lt;!-- 显示表格数据 --&gt;</span><br><span class="line">		&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">			&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-12"</span>&gt;</span><br><span class="line">				&lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">"table table-hover"</span> id=<span class="string">"stus_table"</span>&gt;</span><br><span class="line">					&lt;thead&gt;</span><br><span class="line">						&lt;tr&gt;</span><br><span class="line">							&lt;th&gt;&lt;input type="checkbox" id="check_all" /&gt;&lt;/th&gt;</span><br><span class="line">							&lt;th&gt;#&lt;/th&gt;</span><br><span class="line">							&lt;th&gt;Name&lt;/th&gt;</span><br><span class="line">							&lt;th&gt;Sex&lt;/th&gt;</span><br><span class="line">							&lt;th&gt;Position&lt;/th&gt;</span><br><span class="line">							&lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">						&lt;/tr&gt;</span><br><span class="line">					&lt;/thead&gt;</span><br><span class="line">					&lt;tbody&gt;</span><br><span class="line"></span><br><span class="line">					&lt;/tbody&gt;</span><br><span class="line">				&lt;/table&gt;</span><br><span class="line">			&lt;/div&gt;</span><br><span class="line">		&lt;/div&gt;</span><br><span class="line">		&lt;!-- 显示分页信息 --&gt;</span><br><span class="line">		&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">			&lt;!--分页文字信息  --&gt;</span><br><span class="line">			&lt;div class="col-md-6" id="page_info_area"&gt;&lt;/div&gt;</span><br><span class="line">			&lt;!-- 分页条信息 --&gt;</span><br><span class="line">			&lt;div class="col-md-6" id="page_nav_area"&gt;&lt;/div&gt;</span><br><span class="line">		&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">	&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">var</span> totalRecord,currentPage;</span><br><span class="line">		<span class="comment">//1、页面加载完成以后，直接去发送ajax请求,要到分页数据</span></span><br><span class="line">		$(function()&#123;</span><br><span class="line">			<span class="comment">//去首页</span></span><br><span class="line">			to_page(<span class="number">1</span>);</span><br><span class="line">		&#125;);</span><br><span class="line">		</span><br><span class="line">		<span class="function">function <span class="title">to_page</span><span class="params">(pn)</span></span>&#123;</span><br><span class="line">			$.ajax(&#123;</span><br><span class="line">				url:<span class="string">"$&#123;APP_PATH&#125;/stus"</span>,</span><br><span class="line">				data:<span class="string">"pn="</span>+pn,</span><br><span class="line">				type:<span class="string">"GET"</span>,</span><br><span class="line">				success:function(result)&#123;</span><br><span class="line">					<span class="comment">//console.log(result);</span></span><br><span class="line">					<span class="comment">//1、解析并显示学生数据</span></span><br><span class="line">					build_stus_table(result);</span><br><span class="line">					<span class="comment">//2、解析并显示分页信息</span></span><br><span class="line">					build_page_info(result);</span><br><span class="line">					<span class="comment">//3、解析显示分页条数据</span></span><br><span class="line">					build_page_nav(result);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="function">function <span class="title">build_stus_table</span><span class="params">(result)</span></span>&#123;</span><br><span class="line">			<span class="comment">//清空table表格</span></span><br><span class="line">			$(<span class="string">"#stus_table tbody"</span>).empty();</span><br><span class="line">			<span class="keyword">var</span> stus = result.extend.pageInfo.list;</span><br><span class="line">			$.each(stus,function(index,item)&#123;</span><br><span class="line">				<span class="keyword">var</span> checkBoxTd = $(<span class="string">"&lt;td&gt;&lt;input type='checkbox' class='check_item'/&gt;&lt;/td&gt;"</span>);</span><br><span class="line">				<span class="keyword">var</span> IdTd = $(<span class="string">"&lt;td&gt;&lt;/td&gt;"</span>).append(item.id);</span><br><span class="line">				<span class="keyword">var</span> NameTd = $(<span class="string">"&lt;td&gt;&lt;/td&gt;"</span>).append(item.name);</span><br><span class="line">				<span class="keyword">var</span> SexTd = $(<span class="string">"&lt;td&gt;&lt;/td&gt;"</span>).append(item.sex);</span><br><span class="line">				<span class="keyword">var</span> PosTd = $(<span class="string">"&lt;td&gt;&lt;/td&gt;"</span>).append(item.pos.position);</span><br><span class="line">			</span><br><span class="line">				<span class="keyword">var</span> editBtn = $(<span class="string">"&lt;button&gt;&lt;/button&gt;"</span>).addClass(<span class="string">"btn btn-primary btn-sm edit_btn"</span>)</span><br><span class="line">								.append($(<span class="string">"&lt;span&gt;&lt;/span&gt;"</span>).addClass(<span class="string">"glyphicon glyphicon-pencil"</span>)).append(<span class="string">"编辑"</span>);</span><br><span class="line">				<span class="comment">//为编辑按钮添加一个自定义的属性，来表示当前学生id</span></span><br><span class="line">				editBtn.attr(<span class="string">"edit-id"</span>,item.id);</span><br><span class="line">				<span class="keyword">var</span> delBtn =  $(<span class="string">"&lt;button&gt;&lt;/button&gt;"</span>).addClass(<span class="string">"btn btn-danger btn-sm delete_btn"</span>)</span><br><span class="line">								.append($(<span class="string">"&lt;span&gt;&lt;/span&gt;"</span>).addClass(<span class="string">"glyphicon glyphicon-trash"</span>)).append(<span class="string">"删除"</span>);</span><br><span class="line">				<span class="comment">//为删除按钮添加一个自定义的属性来表示当前删除的学生id</span></span><br><span class="line">				delBtn.attr(<span class="string">"del-id"</span>,item.id);</span><br><span class="line">				<span class="keyword">var</span> btnTd = $(<span class="string">"&lt;td&gt;&lt;/td&gt;"</span>).append(editBtn).append(<span class="string">" "</span>).append(delBtn);</span><br><span class="line">				<span class="comment">//var delBtn = </span></span><br><span class="line">				<span class="comment">//append方法执行完成以后还是返回原来的元素</span></span><br><span class="line">				$(<span class="string">"&lt;tr&gt;&lt;/tr&gt;"</span>).append(checkBoxTd)</span><br><span class="line">					.append(IdTd)</span><br><span class="line">					.append(NameTd)</span><br><span class="line">					.append(SexTd)</span><br><span class="line">					.append(PosTd)</span><br><span class="line">					.append(btnTd)</span><br><span class="line">					.appendTo(<span class="string">"#stus_table tbody"</span>);</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//解析显示分页信息</span></span><br><span class="line">		<span class="function">function <span class="title">build_page_info</span><span class="params">(result)</span></span>&#123;</span><br><span class="line">			$(<span class="string">"#page_info_area"</span>).empty();</span><br><span class="line">			$(<span class="string">"#page_info_area"</span>).append(<span class="string">"当前"</span>+result.extend.pageInfo.pageNum+<span class="string">"页,总"</span>+</span><br><span class="line">					result.extend.pageInfo.pages+<span class="string">"页,总"</span>+</span><br><span class="line">					result.extend.pageInfo.total+<span class="string">"条记录"</span>);</span><br><span class="line">			<span class="comment">//总记录数</span></span><br><span class="line">			totalRecord = result.extend.pageInfo.total;</span><br><span class="line">			<span class="comment">//当前页</span></span><br><span class="line">			currentPage = result.extend.pageInfo.pageNum;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//解析显示分页条，点击分页要能去下一页....</span></span><br><span class="line">		<span class="function">function <span class="title">build_page_nav</span><span class="params">(result)</span></span>&#123;</span><br><span class="line">			<span class="comment">//清除全选框的属性</span></span><br><span class="line">			$(<span class="string">"#check_all"</span>).prop(<span class="string">"checked"</span>,<span class="keyword">false</span>);</span><br><span class="line">			<span class="comment">//page_nav_area</span></span><br><span class="line">			$(<span class="string">"#page_nav_area"</span>).empty();</span><br><span class="line">			<span class="keyword">var</span> ul = $(<span class="string">"&lt;ul&gt;&lt;/ul&gt;"</span>).addClass(<span class="string">"pagination"</span>);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//构建元素</span></span><br><span class="line">			<span class="keyword">var</span> firstPageLi = $(<span class="string">"&lt;li&gt;&lt;/li&gt;"</span>).append($(<span class="string">"&lt;a&gt;&lt;/a&gt;"</span>).append(<span class="string">"首页"</span>).attr(<span class="string">"href"</span>,<span class="string">"#"</span>));</span><br><span class="line">			<span class="keyword">var</span> prePageLi = $(<span class="string">"&lt;li&gt;&lt;/li&gt;"</span>).append($(<span class="string">"&lt;a&gt;&lt;/a&gt;"</span>).append(<span class="string">"&amp;laquo;"</span>));</span><br><span class="line">			<span class="keyword">if</span>(result.extend.pageInfo.hasPreviousPage == <span class="keyword">false</span>)&#123;</span><br><span class="line">				firstPageLi.addClass(<span class="string">"disabled"</span>);</span><br><span class="line">				prePageLi.addClass(<span class="string">"disabled"</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="comment">//为元素添加点击翻页的事件</span></span><br><span class="line">				firstPageLi.click(function()&#123;</span><br><span class="line">					to_page(<span class="number">1</span>);</span><br><span class="line">				&#125;);</span><br><span class="line">				prePageLi.click(function()&#123;</span><br><span class="line">					to_page(result.extend.pageInfo.pageNum -<span class="number">1</span>);</span><br><span class="line">				&#125;);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">var</span> nextPageLi = $(<span class="string">"&lt;li&gt;&lt;/li&gt;"</span>).append($(<span class="string">"&lt;a&gt;&lt;/a&gt;"</span>).append(<span class="string">"&amp;raquo;"</span>));</span><br><span class="line">			<span class="keyword">var</span> lastPageLi = $(<span class="string">"&lt;li&gt;&lt;/li&gt;"</span>).append($(<span class="string">"&lt;a&gt;&lt;/a&gt;"</span>).append(<span class="string">"末页"</span>).attr(<span class="string">"href"</span>,<span class="string">"#"</span>));</span><br><span class="line">			<span class="keyword">if</span>(result.extend.pageInfo.hasNextPage == <span class="keyword">false</span>)&#123;</span><br><span class="line">				nextPageLi.addClass(<span class="string">"disabled"</span>);</span><br><span class="line">				lastPageLi.addClass(<span class="string">"disabled"</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				nextPageLi.click(function()&#123;</span><br><span class="line">					to_page(result.extend.pageInfo.pageNum +<span class="number">1</span>);</span><br><span class="line">				&#125;);</span><br><span class="line">				lastPageLi.click(function()&#123;</span><br><span class="line">					to_page(result.extend.pageInfo.pages);</span><br><span class="line">				&#125;);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//添加首页和前一页 的提示</span></span><br><span class="line">			ul.append(firstPageLi).append(prePageLi);</span><br><span class="line">			<span class="comment">//1,2，3遍历给ul中添加页码提示</span></span><br><span class="line">			$.each(result.extend.pageInfo.navigatepageNums,function(index,item)&#123;</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">var</span> numLi = $(<span class="string">"&lt;li&gt;&lt;/li&gt;"</span>).append($(<span class="string">"&lt;a&gt;&lt;/a&gt;"</span>).append(item));</span><br><span class="line">				<span class="keyword">if</span>(result.extend.pageInfo.pageNum == item)&#123;</span><br><span class="line">					numLi.addClass(<span class="string">"active"</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				numLi.click(function()&#123;</span><br><span class="line">					to_page(item);</span><br><span class="line">				&#125;);</span><br><span class="line">				ul.append(numLi);</span><br><span class="line">			&#125;);</span><br><span class="line">			<span class="comment">//添加下一页和末页 的提示</span></span><br><span class="line">			ul.append(nextPageLi).append(lastPageLi);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//把ul加入到nav</span></span><br><span class="line">			<span class="keyword">var</span> navEle = $(<span class="string">"&lt;nav&gt;&lt;/nav&gt;"</span>).append(ul);</span><br><span class="line">			navEle.appendTo(<span class="string">"#page_nav_area"</span>);</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<h3 id="主页链接处理"><a href="#主页链接处理" class="headerlink" title="主页链接处理"></a>主页链接处理</h3><p>Studentcontroller.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 导入jackson包</span></span><br><span class="line"><span class="comment">	 * 返回json数据</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> pn 页码</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@ResponseBody</span></span><br><span class="line">	<span class="meta">@RequestMapping</span>(value = <span class="string">"/stus"</span>,method = RequestMethod.GET)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Msg <span class="title">getSstusWithJson</span><span class="params">(@RequestParam(value = <span class="string">"pn"</span>, defaultValue = <span class="string">"1"</span>)</span> Integer pn) </span>&#123;</span><br><span class="line">		<span class="comment">// 这不是一个分页查询；</span></span><br><span class="line">		<span class="comment">// 引入PageHelper分页插件</span></span><br><span class="line">		<span class="comment">// 在查询之前只需要调用，传入页码，以及每页的大小</span></span><br><span class="line">		PageHelper.startPage(pn, <span class="number">5</span>);</span><br><span class="line">		<span class="comment">// startPage后面紧跟的这个查询就是一个分页查询</span></span><br><span class="line">		List&lt;Student&gt; stus = studentService.getAll();</span><br><span class="line">		<span class="comment">// 使用pageInfo包装查询后的结果，只需要将pageInfo交给页面就行了。</span></span><br><span class="line">		<span class="comment">// 封装了详细的分页信息,包括有我们查询出来的数据，传入连续显示的页数</span></span><br><span class="line">		PageInfo page = <span class="keyword">new</span> PageInfo(stus, <span class="number">5</span>);</span><br><span class="line">		<span class="keyword">return</span> Msg.success().add(<span class="string">"pageInfo"</span>, page);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>StudentService.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有学生</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	StudentExample example = <span class="keyword">new</span> StudentExample();</span><br><span class="line">	<span class="comment">//添加排序 根据id 升序</span></span><br><span class="line">	example.setOrderByClause(<span class="string">"id asc"</span>);</span><br><span class="line">	<span class="keyword">return</span> studentMapper.selectByExampleWithpos(example);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h1><p>• 1、在index.jsp页面点击”新增”<br>• 2、弹出新增对话框<br>• 3、去数据库查询职位列表，显示在对话框中<br>• 4、用户输入数据，并进行校验<br>• jquery前端校验，ajax用户名重复校验，重要数据（后端校验(JSR303)，唯一约束）；<br>• 5、完成保存<br>• URI:<br>• /stus/{id} GET 查询学生信息<br>• /stus POST 保存学生信息<br>• /stus/{id} PUT 修改学生信息<br>• /stus/{id} DELETE 删除学生信息</p>
<h2 id="新增按钮展示"><a href="#新增按钮展示" class="headerlink" title="新增按钮展示"></a>新增按钮展示</h2><p><img src="/images/First_SSM/%E6%96%B0%E5%A2%9E.png" alt="tip"></p>
<h3 id="添加学生代码"><a href="#添加学生代码" class="headerlink" title="添加学生代码"></a>添加学生代码</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;!-- 学生添加的模态框 --&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal fade"</span> id=<span class="string">"stuAddModal"</span> tabindex=<span class="string">"-1"</span> role=<span class="string">"dialog"</span> aria-labelledby=<span class="string">"myModalLabel"</span>&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal-dialog"</span> role=<span class="string">"document"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal-content"</span>&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal-header"</span>&gt;</span><br><span class="line">        &lt;button type="button" class="close" data-dismiss="modal" aria-label="Close"&gt;&lt;span aria-hidden="true"&gt;&amp;times;&lt;/span&gt;&lt;/button&gt;</span><br><span class="line">        &lt;h4 class="modal-title" id="myModalLabel"&gt;学生添加&lt;/h4&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal-body"</span>&gt;</span><br><span class="line">        &lt;form <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-horizontal"</span>&gt;</span><br><span class="line">		  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">		    &lt;label class="col-sm-2 control-label"&gt;Name&lt;/label&gt;</span><br><span class="line">		    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-sm-10"</span>&gt;</span><br><span class="line">		      &lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> id=<span class="string">"stuName_add_input"</span> placeholder=<span class="string">"stuName"</span>&gt;</span><br><span class="line">		      &lt;span class="help-block"&gt;&lt;/span&gt;</span><br><span class="line">		    &lt;/div&gt;</span><br><span class="line">		  &lt;/div&gt;</span><br><span class="line">		  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">		    &lt;label class="col-sm-2 control-label"&gt;Sex&lt;/label&gt;</span><br><span class="line">		    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-sm-10"</span>&gt;</span><br><span class="line">		      &lt;label <span class="class"><span class="keyword">class</span></span>=<span class="string">"radio-inline"</span>&gt;</span><br><span class="line">				  &lt;input type=<span class="string">"radio"</span> name=<span class="string">"sex"</span> id=<span class="string">"sex1_add_input"</span> value=<span class="string">"男"</span> checked=<span class="string">"checked"</span>&gt; 男</span><br><span class="line">				&lt;/label&gt;</span><br><span class="line">				&lt;label <span class="class"><span class="keyword">class</span></span>=<span class="string">"radio-inline"</span>&gt;</span><br><span class="line">				  &lt;input type=<span class="string">"radio"</span> name=<span class="string">"sex"</span> id=<span class="string">"sex2_add_input"</span> value=<span class="string">"女"</span>&gt; 女</span><br><span class="line">				&lt;/label&gt;</span><br><span class="line">		    &lt;/div&gt;</span><br><span class="line">		  &lt;/div&gt;</span><br><span class="line">		  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">		    &lt;label class="col-sm-2 control-label"&gt;Position&lt;/label&gt;</span><br><span class="line">		    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-sm-4"</span>&gt;</span><br><span class="line">		    	&lt;!-- 职位提交职位id即可 --&gt;</span><br><span class="line">		      &lt;select <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> name=<span class="string">"posit"</span>&gt;</span><br><span class="line">		      &lt;/select&gt;</span><br><span class="line">		    &lt;/div&gt;</span><br><span class="line">		  &lt;/div&gt;</span><br><span class="line">		&lt;/form&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal-footer"</span>&gt;</span><br><span class="line">        &lt;button type="button" class="btn btn-default" data-dismiss="modal"&gt;关闭&lt;/button&gt;</span><br><span class="line">        &lt;button type="button" class="btn btn-primary" id="stu_save_btn"&gt;保存&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空表单样式及内容</span></span><br><span class="line">		<span class="function">function <span class="title">reset_form</span><span class="params">(ele)</span></span>&#123;</span><br><span class="line">			$(ele)[<span class="number">0</span>].reset();</span><br><span class="line">			<span class="comment">//清空表单样式</span></span><br><span class="line">			$(ele).find(<span class="string">"*"</span>).removeClass(<span class="string">"has-error has-success"</span>);</span><br><span class="line">			$(ele).find(<span class="string">".help-block"</span>).text(<span class="string">""</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//点击新增按钮弹出模态框。</span></span><br><span class="line">		$(<span class="string">"#stu_add_modal_btn"</span>).click(function()&#123;</span><br><span class="line">			<span class="comment">//清除表单数据（表单完整重置（表单的数据，表单的样式））</span></span><br><span class="line">			reset_form(<span class="string">"#stuAddModal form"</span>);</span><br><span class="line">			<span class="comment">//s$("")[0].reset();</span></span><br><span class="line">			<span class="comment">//发送ajax请求，查出职位信息，显示在下拉列表中</span></span><br><span class="line">			getpositS(<span class="string">"#stuAddModal select"</span>);</span><br><span class="line">			<span class="comment">//弹出模态框</span></span><br><span class="line">			$(<span class="string">"#stuAddModal"</span>).modal(&#123;</span><br><span class="line">				backdrop:<span class="string">"static"</span></span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//查出所有的职位信息并显示在下拉列表中</span></span><br><span class="line">		<span class="function">function <span class="title">getpositS</span><span class="params">(ele)</span></span>&#123;</span><br><span class="line">			<span class="comment">//清空之前下拉列表的值</span></span><br><span class="line">			$(ele).empty();</span><br><span class="line">			$.ajax(&#123;</span><br><span class="line">				url:<span class="string">"$&#123;APP_PATH&#125;/positAll"</span>,</span><br><span class="line">				type:<span class="string">"GET"</span>,</span><br><span class="line">				success:function(result)&#123;</span><br><span class="line">					<span class="comment">//&#123;"code":100,"msg":"处理成功！",</span></span><br><span class="line">						<span class="comment">//"extend":&#123;"posits":[&#123;"sid":1,"position":"班长"&#125;,&#123;"sid":2,"position":"学习委员"&#125;.....]&#125;&#125;</span></span><br><span class="line">					<span class="comment">//console.log(result);</span></span><br><span class="line">					<span class="comment">//显示部门信息在下拉列表中</span></span><br><span class="line">					$(<span class="string">"#stuAddModal select"</span>).append(<span class="string">""</span>)</span><br><span class="line">					$.each(result.extend.posits,function()&#123;</span><br><span class="line">						<span class="keyword">var</span> optionEle = $(<span class="string">"&lt;option&gt;&lt;/option&gt;"</span>).append(<span class="keyword">this</span>.position).attr(<span class="string">"value"</span>,<span class="keyword">this</span>.sid);</span><br><span class="line">						optionEle.appendTo(ele);</span><br><span class="line">					&#125;);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//校验表单数据</span></span><br><span class="line">		<span class="function">function <span class="title">validate_add_form</span><span class="params">()</span></span>&#123;</span><br><span class="line">			<span class="comment">//1、拿到要校验的数据，使用正则表达式</span></span><br><span class="line">			<span class="keyword">var</span> stuName = $(<span class="string">"#stuName_add_input"</span>).val();</span><br><span class="line">			<span class="comment">//英文a-z A-Z 0-9 _ - 6到16位  or  中文 2位-5位</span></span><br><span class="line">			<span class="keyword">var</span> regName = /(^[a-zA-Z0-<span class="number">9</span>_-]&#123;<span class="number">6</span>,<span class="number">16</span>&#125;$)|(^[\u2E80-\u9FFF]&#123;<span class="number">2</span>,<span class="number">5</span>&#125;)/;</span><br><span class="line">			<span class="keyword">if</span>(!regName.test(stuName))&#123;</span><br><span class="line">				<span class="comment">//alert("用户名可以是2-5位中文或者6-16位英文和数字的组合");</span></span><br><span class="line">				show_validate_msg(<span class="string">"#stuName_add_input"</span>, <span class="string">"error"</span>, <span class="string">"用户名必须是2-5位中文或者6-16位英文和数字的组合"</span>);</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				show_validate_msg(<span class="string">"#stuName_add_input"</span>, <span class="string">"success"</span>, <span class="string">""</span>);</span><br><span class="line">			&#125;;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">			<span class="comment">//显示校验结果的提示信息</span></span><br><span class="line">			<span class="function">function <span class="title">show_validate_msg</span><span class="params">(ele,status,msg)</span></span>&#123;</span><br><span class="line">				<span class="comment">//清除当前元素的校验状态</span></span><br><span class="line">				$(ele).parent().removeClass(<span class="string">"has-success has-error"</span>);</span><br><span class="line">				$(ele).next(<span class="string">"span"</span>).text(<span class="string">""</span>);</span><br><span class="line">				<span class="keyword">if</span>(<span class="string">"success"</span>==status)&#123;</span><br><span class="line">					$(ele).parent().addClass(<span class="string">"has-success"</span>);</span><br><span class="line">					$(ele).next(<span class="string">"span"</span>).text(msg);</span><br><span class="line">				&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"error"</span> == status)&#123;</span><br><span class="line">					$(ele).parent().addClass(<span class="string">"has-error"</span>);</span><br><span class="line">					$(ele).next(<span class="string">"span"</span>).text(msg);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//校验用户名是否可用</span></span><br><span class="line">			$(<span class="string">"#stuName_add_input"</span>).change(function()&#123;</span><br><span class="line">				<span class="comment">//发送ajax请求校验用户名是否可用</span></span><br><span class="line">				<span class="keyword">var</span> stuName = <span class="keyword">this</span>.value;</span><br><span class="line">				$.ajax(&#123;</span><br><span class="line">					url:<span class="string">"$&#123;APP_PATH&#125;/checkuser"</span>,</span><br><span class="line">					data:<span class="string">"stuName="</span>+stuName,</span><br><span class="line">					type:<span class="string">"POST"</span>,</span><br><span class="line">					success:function(result)&#123;</span><br><span class="line">						<span class="keyword">if</span>(result.code==<span class="number">100</span>)&#123;</span><br><span class="line">							show_validate_msg(<span class="string">"#stuName_add_input"</span>,<span class="string">"success"</span>,<span class="string">"用户名可用"</span>);</span><br><span class="line">							$(<span class="string">"#stu_save_btn"</span>).attr(<span class="string">"ajax-va"</span>,<span class="string">"success"</span>);</span><br><span class="line">						&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">							show_validate_msg(<span class="string">"#empName_add_input"</span>,<span class="string">"error"</span>,result.extend.va_msg);</span><br><span class="line">							$(<span class="string">"#stu_save_btn"</span>).attr(<span class="string">"ajax-va"</span>,<span class="string">"error"</span>);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;);</span><br><span class="line">			&#125;);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//点击保存，保存学生。</span></span><br><span class="line">			$(<span class="string">"#stu_save_btn"</span>).click(function()&#123;</span><br><span class="line">				<span class="comment">//1、模态框中填写的表单数据提交给服务器进行保存</span></span><br><span class="line">				<span class="comment">//1、先对要提交给服务器的数据进行校验</span></span><br><span class="line">				<span class="keyword">if</span>(!validate_add_form())&#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">				&#125;;</span><br><span class="line">				<span class="comment">//1、判断之前的ajax用户名校验是否成功。如果成功。</span></span><br><span class="line">				<span class="keyword">if</span>($(<span class="keyword">this</span>).attr(<span class="string">"ajax-va"</span>)==<span class="string">"error"</span>)&#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				<span class="comment">//2、发送ajax请求保存学生</span></span><br><span class="line">				$.ajax(&#123;</span><br><span class="line">					url:<span class="string">"$&#123;APP_PATH&#125;/stus"</span>,</span><br><span class="line">					type:<span class="string">"POST"</span>,</span><br><span class="line">					data:$(<span class="string">"#stuAddModal form"</span>).serialize(),</span><br><span class="line">					success:function(result)&#123;</span><br><span class="line">						<span class="comment">//alert(result.msg);</span></span><br><span class="line">						<span class="keyword">if</span>(result.code == <span class="number">100</span>)&#123;</span><br><span class="line">							<span class="comment">//学生保存成功；</span></span><br><span class="line">							<span class="comment">//1、关闭模态框</span></span><br><span class="line">							$(<span class="string">"#stuAddModal"</span>).modal(<span class="string">'hide'</span>);</span><br><span class="line">							</span><br><span class="line">							<span class="comment">//2、来到最后一页，显示刚才保存的数据</span></span><br><span class="line">							<span class="comment">//发送ajax请求显示最后一页数据即可</span></span><br><span class="line">							to_page(totalRecord);</span><br><span class="line">						&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">							<span class="comment">//显示失败信息</span></span><br><span class="line">							<span class="comment">//console.log(result);</span></span><br><span class="line">							<span class="comment">//有哪个字段的错误信息就显示哪个字段的；</span></span><br><span class="line">							<span class="keyword">if</span>(undefined != result.extend.errorFields.name)&#123;</span><br><span class="line">								<span class="comment">//显示学生名字的错误信息</span></span><br><span class="line">								show_validate_msg(<span class="string">"#stuName_add_input"</span>, <span class="string">"error"</span>, result.extend.errorFields.name);</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;);</span><br><span class="line">			&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="新增链接处理"><a href="#新增链接处理" class="headerlink" title="新增链接处理"></a>新增链接处理</h3><p>Studentcontroller.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据校验</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/checkuser"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Msg <span class="title">checkStuName</span><span class="params">(@RequestParam(<span class="string">"stuName"</span>)</span>String name) </span>&#123;</span><br><span class="line">	<span class="comment">//先判断用户名是否是合法的表达式</span></span><br><span class="line">	String regex = <span class="string">"(^[a-zA-Z0-9_-]&#123;6,16&#125;$)|(^[\\u2E80-\\u9FFF]&#123;2,5&#125;)"</span>;</span><br><span class="line">	<span class="keyword">if</span>(!name.matches(regex)) &#123;</span><br><span class="line">		<span class="keyword">return</span> Msg.fail().add(<span class="string">"va_msg"</span>, <span class="string">"用户名必须是2-5位中文或者6-16位英文和数字的组合"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//数据库校验</span></span><br><span class="line">	<span class="keyword">boolean</span> b = studentService.checkuser(name);</span><br><span class="line">	<span class="keyword">if</span>(b) &#123;</span><br><span class="line">		<span class="keyword">return</span> Msg.success();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>	</span><br><span class="line">	<span class="keyword">return</span> Msg.fail().add(<span class="string">"va_msg"</span>, <span class="string">"用户名不可用"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 学生新增保存</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/stus"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Msg <span class="title">saveStu</span><span class="params">(@Valid Student student,BindingResult result)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(result.hasErrors()) &#123;</span><br><span class="line">		Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">		<span class="comment">//校验失败，返回失败 模态框中显示信息</span></span><br><span class="line">		List&lt;FieldError&gt; errors = result.getFieldErrors();</span><br><span class="line">		<span class="keyword">for</span> (FieldError fieldError : errors) &#123;</span><br><span class="line">			System.out.println(<span class="string">"错误的字段名："</span>+fieldError.getField());</span><br><span class="line">			System.out.println(<span class="string">"错误信息："</span>+fieldError.getDefaultMessage());</span><br><span class="line">			map.put(fieldError.getField(), fieldError.getDefaultMessage());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> Msg.fail().add(<span class="string">"errorFields"</span>, map);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">	studentService.saveStu(student);</span><br><span class="line">	<span class="keyword">return</span> Msg.success();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>StudentService.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加学生</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> student</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveStu</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">	studentMapper.insertSelective(student);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 校验学生名是否可用</span></span><br><span class="line"><span class="comment"> * 1.支持JSR303校验</span></span><br><span class="line"><span class="comment"> * 2.导入hibernate-Validator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> ture:可用    false:不可用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkuser</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">	StudentExample example = <span class="keyword">new</span> StudentExample();</span><br><span class="line">	Criteria criteria = example.createCriteria();</span><br><span class="line">	criteria.andNameEqualTo(name);</span><br><span class="line">	<span class="keyword">long</span> count = studentMapper.countByExample(example);</span><br><span class="line">	<span class="keyword">return</span> count == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h1><p>• 1、点击编辑<br>• 2、弹出用户修改的模态框（显示学生信息）<br>• 3、点击更新，完成用户修改</p>
<h2 id="编辑-更新-展示"><a href="#编辑-更新-展示" class="headerlink" title="编辑(更新)展示"></a>编辑(更新)展示</h2><p><img src="/images/First_SSM/%E7%BC%96%E8%BE%91.png" alt="tips"></p>
<h3 id="编辑代码"><a href="#编辑代码" class="headerlink" title="编辑代码"></a>编辑代码</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//更新学生信息</span></span><br><span class="line">			$(document).on(<span class="string">"click"</span>,<span class="string">".edit_btn"</span>,function()&#123;</span><br><span class="line">				<span class="comment">//alert("edit");</span></span><br><span class="line">				<span class="comment">//1、查出职位信息，并显示职位列表</span></span><br><span class="line">				getpositS(<span class="string">"#stuUpdateModal select"</span>);</span><br><span class="line">				<span class="comment">//2、查出学生信息，显示学生信息</span></span><br><span class="line">				getStu($(<span class="keyword">this</span>).attr(<span class="string">"edit-id"</span>));</span><br><span class="line">				<span class="comment">//3、把学生的id传递给模态框的更新按钮</span></span><br><span class="line">				$(<span class="string">"#stu_update_btn"</span>).attr(<span class="string">"edit-id"</span>,$(<span class="keyword">this</span>).attr(<span class="string">"edit-id"</span>));</span><br><span class="line">				$(<span class="string">"#stuUpdateModal"</span>).modal(&#123;</span><br><span class="line">					backdrop:<span class="string">"static"</span></span><br><span class="line">				&#125;);</span><br><span class="line">			&#125;);</span><br><span class="line">			</span><br><span class="line">			<span class="function">function <span class="title">getStu</span><span class="params">(id)</span></span>&#123;</span><br><span class="line">				$.ajax(&#123;</span><br><span class="line">					url:<span class="string">"$&#123;APP_PATH&#125;/stu/"</span>+id,</span><br><span class="line">					type:<span class="string">"GET"</span>,</span><br><span class="line">					success:function(result)&#123;</span><br><span class="line">						<span class="comment">//console.log(result);</span></span><br><span class="line">						<span class="keyword">var</span> stuData = result.extend.stu;</span><br><span class="line">						$(<span class="string">"#stuName_update_static"</span>).text(stuData.name);</span><br><span class="line">						$(<span class="string">"#stuSex_update_static"</span>).text(stuData.sex);</span><br><span class="line">						$(<span class="string">"#stuUpdateModal select"</span>).val([stuData.posit]);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//点击更新，更新学生信息</span></span><br><span class="line">			$(<span class="string">"#stu_update_btn"</span>).click(function()&#123;			</span><br><span class="line">				<span class="comment">//发送ajax请求保存更新的学生数据</span></span><br><span class="line">				$.ajax(&#123;</span><br><span class="line">					url:<span class="string">"$&#123;APP_PATH&#125;/stu/"</span>+$(<span class="keyword">this</span>).attr(<span class="string">"edit-id"</span>),</span><br><span class="line">					type:<span class="string">"PUT"</span>,</span><br><span class="line">					data:$(<span class="string">"#stuUpdateModal form"</span>).serialize(),</span><br><span class="line">					success:function(result)&#123;</span><br><span class="line">						<span class="comment">//alert(result.msg);</span></span><br><span class="line">						<span class="comment">//1、关闭对话框</span></span><br><span class="line">						$(<span class="string">"#stuUpdateModal"</span>).modal(<span class="string">"hide"</span>);</span><br><span class="line">						<span class="comment">//2、回到本页面</span></span><br><span class="line">						to_page(currentPage);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;);</span><br><span class="line">			&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="编辑链接处理"><a href="#编辑链接处理" class="headerlink" title="编辑链接处理"></a>编辑链接处理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"stu/&#123;id&#125;"</span>,method = RequestMethod.PUT)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Msg <span class="title">updateStu</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">	studentService.updateStu(student);</span><br><span class="line">	<span class="keyword">return</span> Msg.success();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将要修改的数据发送去页面</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"stu/&#123;id&#125;"</span>,method = RequestMethod.GET)</span><br><span class="line"><span class="comment">//@PathVariable() 从路径中获取</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Msg <span class="title">getStu</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">	Student student = studentService.getStu(id);</span><br><span class="line">	<span class="keyword">return</span> Msg.success().add(<span class="string">"stu"</span>, student);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><p>• 1、单个删除<br>• URI:/stu/{id} DELETE<br>• 2、批量删除<br>• URI:/stu/{拼装字符串} DELETE</p>
<h2 id="删除展示"><a href="#删除展示" class="headerlink" title="删除展示"></a>删除展示</h2><p>单个删除<br><img src="/images/First_SSM/%E5%88%A0%E9%99%A4.png" alt="tip"><br>批量删除<br><img src="/images/First_SSM/%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4.png" alt="tip"></p>
<h3 id="删除代码"><a href="#删除代码" class="headerlink" title="删除代码"></a>删除代码</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单个删除</span></span><br><span class="line">			$(document).on(<span class="string">"click"</span>,<span class="string">".delete_btn"</span>,function()&#123;</span><br><span class="line">				<span class="comment">//1、弹出是否确认删除对话框</span></span><br><span class="line">				<span class="keyword">var</span> stuName = $(<span class="keyword">this</span>).parents(<span class="string">"tr"</span>).find(<span class="string">"td:eq(2)"</span>).text();</span><br><span class="line">				<span class="keyword">var</span> id = $(<span class="keyword">this</span>).attr(<span class="string">"del-id"</span>);</span><br><span class="line">				<span class="comment">//alert($(this).parents("tr").find("td:eq(1)").text()); 输出当前名字</span></span><br><span class="line">				<span class="keyword">if</span>(confirm(<span class="string">"确认删除【"</span>+stuName+<span class="string">"】吗？"</span>))&#123;</span><br><span class="line">					<span class="comment">//确认，发送ajax请求删除即可</span></span><br><span class="line">					$.ajax(&#123;</span><br><span class="line">						url:<span class="string">"$&#123;APP_PATH&#125;/stu/"</span>+id,</span><br><span class="line">						type:<span class="string">"DELETE"</span>,</span><br><span class="line">						success:function(result)&#123;</span><br><span class="line">							alert(result.msg);</span><br><span class="line">							<span class="comment">//回到本页</span></span><br><span class="line">							to_page(currentPage);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//完成全选/全不选功能</span></span><br><span class="line">			$(<span class="string">"#check_all"</span>).click(function()&#123;</span><br><span class="line">				<span class="comment">//attr获取checked是undefined;</span></span><br><span class="line">				<span class="comment">//dom原生的属性；attr获取自定义属性的值；</span></span><br><span class="line">				<span class="comment">//prop修改和读取dom原生属性的值</span></span><br><span class="line">				$(<span class="string">".check_item"</span>).prop(<span class="string">"checked"</span>,$(<span class="keyword">this</span>).prop(<span class="string">"checked"</span>));</span><br><span class="line">			&#125;);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//check_item</span></span><br><span class="line">			$(document).on(<span class="string">"click"</span>,<span class="string">".check_item"</span>,function()&#123;</span><br><span class="line">				<span class="comment">//判断当前选择中的元素是否5个</span></span><br><span class="line">				<span class="keyword">var</span> flag = $(<span class="string">".check_item:checked"</span>).length==$(<span class="string">".check_item"</span>).length;</span><br><span class="line">				$(<span class="string">"#check_all"</span>).prop(<span class="string">"checked"</span>,flag);</span><br><span class="line">			&#125;);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//点击全部删除，就批量删除</span></span><br><span class="line">			$(<span class="string">"#stu_delete_all_btn"</span>).click(function()&#123;</span><br><span class="line">				<span class="comment">//</span></span><br><span class="line">				<span class="keyword">var</span> stuNames = <span class="string">""</span>;</span><br><span class="line">				<span class="keyword">var</span> del_idstr = <span class="string">""</span>;</span><br><span class="line">				<span class="keyword">if</span>($(<span class="string">".check_item:checked"</span>).length==<span class="number">0</span>)&#123;</span><br><span class="line">					alert(<span class="string">"你还未选择需要删除的学生"</span>);</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				$.each($(<span class="string">".check_item:checked"</span>),function()&#123;</span><br><span class="line">					<span class="comment">//this</span></span><br><span class="line">					stuNames += $(<span class="keyword">this</span>).parents(<span class="string">"tr"</span>).find(<span class="string">"td:eq(2)"</span>).text()+<span class="string">","</span>;</span><br><span class="line">					<span class="comment">//组装学生id字符串</span></span><br><span class="line">					del_idstr += $(<span class="keyword">this</span>).parents(<span class="string">"tr"</span>).find(<span class="string">"td:eq(1)"</span>).text()+<span class="string">"-"</span>;</span><br><span class="line">				&#125;);</span><br><span class="line">				<span class="comment">//去除stuNames多余的,</span></span><br><span class="line">				stuNames = stuNames.substring(<span class="number">0</span>, stuNames.length-<span class="number">1</span>);</span><br><span class="line">				<span class="comment">//去除删除的id多余的-</span></span><br><span class="line">				del_idstr = del_idstr.substring(<span class="number">0</span>, del_idstr.length-<span class="number">1</span>);</span><br><span class="line">				<span class="keyword">if</span>(confirm(<span class="string">"确认删除【"</span>+stuNames+<span class="string">"】吗？"</span>))&#123;</span><br><span class="line">					<span class="comment">//发送ajax请求删除</span></span><br><span class="line">					$.ajax(&#123;</span><br><span class="line">						url:<span class="string">"$&#123;APP_PATH&#125;/stu/"</span>+del_idstr,</span><br><span class="line">						type:<span class="string">"DELETE"</span>,</span><br><span class="line">						success:function(result)&#123;</span><br><span class="line">							alert(result.msg);</span><br><span class="line">							<span class="comment">//回到当前页面</span></span><br><span class="line">							to_page(currentPage);</span><br><span class="line">							</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="删除链接处理"><a href="#删除链接处理" class="headerlink" title="删除链接处理"></a>删除链接处理</h3><p>Studentcontroller.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 删除单个或批量学生信息</span></span><br><span class="line"><span class="comment">	 * 批量删除 1-2-3 id由-隔开</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@ResponseBody</span></span><br><span class="line">	<span class="meta">@RequestMapping</span>(value = <span class="string">"stu/&#123;ids&#125;"</span>,method = RequestMethod.DELETE)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Msg <span class="title">deleteStuByid</span><span class="params">(@PathVariable(<span class="string">"ids"</span>)</span> String ids) </span>&#123;</span><br><span class="line">		<span class="comment">//批量删除</span></span><br><span class="line">		<span class="keyword">if</span>(ids.contains(<span class="string">"-"</span>)) &#123;</span><br><span class="line">			List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">			String[] id = ids.split(<span class="string">"-"</span>);</span><br><span class="line">			<span class="keyword">for</span> (String string : id) &#123;</span><br><span class="line">				list.add(Integer.parseInt(string));</span><br><span class="line">			&#125;	</span><br><span class="line">			studentService.deleteBatch(list);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">//单个删除</span></span><br><span class="line">			Integer id = Integer.parseInt(ids);</span><br><span class="line">			studentService.deleteStu(id);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> Msg.success();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>StudentService.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 删除单个学生</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteStu</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">		studentMapper.deleteByPrimaryKey(id);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 批量删除</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteBatch</span><span class="params">(List&lt;Integer&gt; ids)</span> </span>&#123;</span><br><span class="line">		StudentExample example = <span class="keyword">new</span> StudentExample();</span><br><span class="line">		Criteria criteria = example.createCriteria();</span><br><span class="line">		<span class="comment">//delete from xxx where id in(1,2,3)</span></span><br><span class="line">		criteria.andIdIn(ids);</span><br><span class="line">		studentMapper.deleteByExample(example);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="/images/First_SSM/%E6%80%BB%E7%BB%93.png" alt="tip"></p>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
</search>
