<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hello</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-05-07T08:11:03.210Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JiskZcz</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MyBatis缓存机制</title>
    <link href="http://yoursite.com/2020/05/07/MyBatis%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2020/05/07/MyBatis缓存机制/</id>
    <published>2020-05-07T07:32:27.000Z</published>
    <updated>2020-05-07T08:11:03.210Z</updated>
    
    <content type="html"><![CDATA[<style>    p{margin:0px 0} </style><p>MyBatis包含一个非常强大的查询缓存特性，它可以非常方便地配置和定制。缓存可以极大的提升查询效率。MyBatis系统中默认定义了两级缓存。<a id="more"></a></p><h1 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h1><p>一级缓存：（本地缓存）：sqlSession级别的缓存。一级缓存是一直开启的；SqlSession级别的一个Map</p><p>&nbsp&nbsp&nbsp&nbsp 以后如果需要获取相同的数据，直接从缓存中拿，没必要再去查询数据库</p><p>&nbsp&nbsp&nbsp&nbsp 一级缓存失效情况（没有使用到当前一级缓存的情况，效果就是，还需要再向数据库发出查询）：</p><p>&nbsp&nbsp&nbsp&nbsp 1、sqlSession不同。</p><p>&nbsp&nbsp&nbsp&nbsp 2、sqlSession相同，查询条件不同(当前一级缓存中还没有这个数据)</p><p>&nbsp&nbsp&nbsp&nbsp 3、sqlSession相同，两次查询之间执行了增删改操作(这次增删改可能对当前数据有影响)</p><p>&nbsp&nbsp&nbsp&nbsp 4、sqlSession相同，手动清除了一级缓存(sqlSession.clearCache())（缓存清空）</p><h1 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h1><p>二级缓存：（全局缓存）：基于namespace级别的缓存：一个namespace对应一个二级缓存：</p><p>&nbsp 工作机制：</p><p>&nbsp&nbsp&nbsp 1、一个会话，查询一条数据，这个数据就会被放在当前会话的一级缓存中；</p><p>&nbsp&nbsp&nbsp 2、如果会话关闭；一级缓存中的数据会被保存到二级缓存中；新的会话查询信息，就可以参照二级缓存中的内容</p><p>&nbsp&nbsp&nbsp 3、sqlSession===StudentMapper==>Student</p><p>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp BanMapper===>Ban</p><p>&nbsp&nbsp&nbsp&nbsp 不同namespace查出的数据会放在自己对应的缓存中（map）</p>            <p>&nbsp&nbsp&nbsp&nbsp 效果：数据会从二级缓存中获取</p><p>&nbsp&nbsp&nbsp&nbsp 查出的数据都会被默认先放在一级缓存中。</p><p>&nbsp&nbsp&nbsp&nbsp 只有会话提交或者关闭以后，一级缓存中的数据才会转移到二级缓存中</p><p>&nbsp&nbsp 使用：</p>              <p>&nbsp&nbsp&nbsp&nbsp&nbsp 1、开启全局二级缓存配置：<setting name="cacheEnabled" value="true"></setting></p><p>&nbsp&nbsp&nbsp&nbsp&nbsp 2、去mapper.xml中配置使用二级缓存</p>    <p>&nbsp&nbsp&nbsp&nbsp&nbsp 3、我们的POJO需要实现序列化接口(implement Serializable)</p><h2 id="和缓存有关的设置-属性："><a href="#和缓存有关的设置-属性：" class="headerlink" title="和缓存有关的设置/属性："></a>和缓存有关的设置/属性：</h2><p>&nbsp&nbsp&nbsp 1、cacheEnabled=true：false：关闭缓存（二级缓存关闭）(一级缓存一直可用的)</p><p>&nbsp&nbsp&nbsp 2、每个select标签都有useCache="true"</p><p>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp  false：不使用缓存（一级缓存依然使用，二级缓存不使用）</p>    <p>&nbsp&nbsp&nbsp 3、每个增删改标签的：flushCache="true"：（一级二级都会清除默认就是ture）</p><p>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp 增删改执行完成后就会清除缓存</p><p>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp 测试：flushCache="true"：一级缓存就清空了；二级也会被清除</p>        <p>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp 查询标签：flushCache="false"(查询标签默认false)</p>            <p>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp 如果flushCache=true;每次查询之后都会清空缓存；缓存是没有被使用的</p><p>&nbsp&nbsp&nbsp 4、sqlSession.clearCache();只是清除当前session的一级缓存</p><p>&nbsp&nbsp&nbsp 5、localCacheScope：本地缓存作用域:(一级缓存SESSION(默认))当前会话的所有数据保存在会话缓存中</p><p>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp  STATEMENT：可以禁用一级缓存</p><h1 id="cache标签"><a href="#cache标签" class="headerlink" title="cache标签"></a>cache标签</h1><p>cache标签在Xml文件中的属性。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;cache eviction="FIFO" flushInterval="60000" readOnly="false" size="1024"&gt;&lt;/cache&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span>&gt;</span><span class="tag">&lt;/<span class="name">cache</span>&gt;</span>(完全使用默认值)</span><br><span class="line"><span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">eviction:缓存的回收策略</span></span><br><span class="line"><span class="comment">• LRU – 最近最少使用的：移除最长时间不被使用的对象。</span></span><br><span class="line"><span class="comment">• FIFO – 先进先出：按对象进入缓存的顺序来移除它们。</span></span><br><span class="line"><span class="comment">• SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。</span></span><br><span class="line"><span class="comment">• WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。</span></span><br><span class="line"><span class="comment">• 默认的是 LRU。</span></span><br><span class="line"><span class="comment">flushInterval：缓存刷新间隔</span></span><br><span class="line"><span class="comment">缓存多长时间清空一次，默认不清空，设置一个毫秒值。</span></span><br><span class="line"><span class="comment">readOnly:是否只读</span></span><br><span class="line"><span class="comment">true：只读；mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据。</span></span><br><span class="line"><span class="comment"> mybatis为了加快获取速度，直接就会将数据在缓存中的引用交给用户。不安全，速度快。</span></span><br><span class="line"><span class="comment">false(默认)：非只读：mybatis觉得获取的数据可能会被修改。</span></span><br><span class="line"><span class="comment">mybatis会利用序列化&amp;反序列的技术克隆一份新的数据给你。安全，速度慢。</span></span><br><span class="line"><span class="comment">size：缓存存放多少元素</span></span><br><span class="line"><span class="comment">type=""：指定自定义缓存的全类名</span></span><br><span class="line"><span class="comment">实现Cache接口即可</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;style&gt;
    p{margin:0px 0} 
&lt;/style&gt;
&lt;p&gt;MyBatis包含一个非常强大的查询缓存特性，它可以非常方便地配置和定制。缓存可以极大的提升查询效率。MyBatis系统中默认定义了两级缓存。
    
    </summary>
    
      <category term="MyBatis" scheme="http://yoursite.com/categories/MyBatis/"/>
    
    
      <category term="MyBatis" scheme="http://yoursite.com/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis内置参数</title>
    <link href="http://yoursite.com/2020/05/06/MyBatis%E5%86%85%E7%BD%AE%E5%8F%82%E6%95%B0/"/>
    <id>http://yoursite.com/2020/05/06/MyBatis内置参数/</id>
    <published>2020-05-06T02:09:32.000Z</published>
    <updated>2020-05-07T08:02:21.826Z</updated>
    
    <content type="html"><![CDATA[<p>MyBatis拥有两个内置参数，工作时常用。<a id="more"></a></p><h1 id="parameter参数"><a href="#parameter参数" class="headerlink" title="_parameter参数"></a>_parameter参数</h1><p>代表整个传过来的参数:单个参数：_parameter就是这个参数;多个参数：参数会被封装为一个map；_parameter就是代表这个map</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- public List&lt;Employee&gt; getEmpsTestInnerParameter(Student student);  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStuTestInnerParameter"</span> <span class="attr">resultType</span>=<span class="string">"entity.Student"</span>&gt;</span></span><br><span class="line"> select * from user</span><br><span class="line"><span class="comment">&lt;!-- 判断传过来的student参数是否为空 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_parameter!=null"</span>&gt;</span></span><br><span class="line"> where name like #&#123;name&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="databaseId参数"><a href="#databaseId参数" class="headerlink" title="_databaseId参数"></a>_databaseId参数</h1><p>如果配置了databaseIdProvider标签，_databaseId就是代表当前数据库的别名。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  public List&lt;Employee&gt; getEmpsTestInnerParameter(Student student);  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStuTestInnerParameter"</span> <span class="attr">resultType</span>=<span class="string">"entity.Student"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 判断数据库，这里配置了databaseIdProvider --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_databaseId=='mysql'"</span>&gt;</span></span><br><span class="line">  select * from user</span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_parameter!=null"</span>&gt;</span></span><br><span class="line">  where name like #&#123;name&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_databaseId=='oracle'"</span>&gt;</span></span><br><span class="line">  select * from student</span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_parameter!=null"</span>&gt;</span></span><br><span class="line">  where name like #&#123;_parameter.name&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MyBatis拥有两个内置参数，工作时常用。
    
    </summary>
    
      <category term="MyBatis" scheme="http://yoursite.com/categories/MyBatis/"/>
    
    
      <category term="MyBatis" scheme="http://yoursite.com/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>动态SQL</title>
    <link href="http://yoursite.com/2020/05/05/%E5%8A%A8%E6%80%81SQL/"/>
    <id>http://yoursite.com/2020/05/05/动态SQL/</id>
    <published>2020-05-05T06:02:37.000Z</published>
    <updated>2020-05-06T02:15:35.203Z</updated>
    
    <content type="html"><![CDATA[<p>动态拼写SQL是MyBatis中很重要的一个内容。<a id="more"></a></p><style>    p{margin:0px 0} </style><h1 id="动态SQL基本标签"><a href="#动态SQL基本标签" class="headerlink" title="动态SQL基本标签"></a>动态SQL基本标签</h1><p>在MyBatis中提供了一些标签，能够便于程序员动态拼写SQL语句。<br>MyBatis的标签:</p><p>&nbsp&nbsp&nbsp if:判断</p><p>&nbsp&nbsp&nbsp choose (when, otherwise):分支选择；带了break的swtich-case    如果带了id就用id查，如果带了name就用name查;只会进入其中一个</p><p>&nbsp&nbsp&nbsp trim 字符串截取(where(封装查询条件), set(封装修改条件))</p><p>&nbsp&nbsp&nbsp foreach 遍历集合</p><h1 id="if标签"><a href="#if标签" class="headerlink" title="if标签"></a>if标签</h1><p>if标签顾名思义就是用来判断的标签，能够动态的判断程序传过来的值符不符合条件来进行动态拼接SQL。<br>这里还引用了where标签，where标签就相当于SQL语句中的where,update更新语句下也可以使用set标签。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- public List&lt;Student&gt; getStudentDynamicIF(Student student); 接口方法--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentDynamicIF"</span> <span class="attr">resultType</span>=<span class="string">"entity.Student"</span>&gt;</span></span><br><span class="line"> select * from user <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span>id=#&#123;id&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 双引号这用单引号 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name!=null and name!=''"</span>&gt;</span>and name like #&#123;name&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userclass!=null"</span>&gt;</span>and userclass=#&#123;userclass&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">where</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="choose标签"><a href="#choose标签" class="headerlink" title="choose标签"></a>choose标签</h1><p>具有内部标签(when, otherwise):是一个分支选择；相当于带了break的swtich-case</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- public List&lt;Student&gt; getStudentDynamicChoose(Student student); 接口方法--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentDynamicChoose"</span> <span class="attr">resultType</span>=<span class="string">"entity.Student"</span>&gt;</span></span><br><span class="line"> select * from user</span><br><span class="line"> <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 如果带了id就用id查，如果带了name就用name查;只会进入其中一个 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span>id=#&#123;id&#125;<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"name!=null and name!=''"</span>&gt;</span>name like #&#123;name&#125;<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 其它条件均不符合的时候 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span>userclass=2<span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="trim标签"><a href="#trim标签" class="headerlink" title="trim标签"></a>trim标签</h1><p>字符串截取，常用于SQL语句的一些连接符和结束标志。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- public List&lt;Student&gt; getStudentDynamicTrim(Student student); --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentDynamicTrim"</span> <span class="attr">resultType</span>=<span class="string">"entity.Student"</span>&gt;</span></span><br><span class="line">  select * from user </span><br><span class="line">  <span class="comment">&lt;!-- 后面多出的and或者or where标签不能解决 </span></span><br><span class="line"><span class="comment"> prefix="":前缀：trim标签体中是整个字符串拼串 后的结果。</span></span><br><span class="line"><span class="comment"> prefix给拼串后的整个字符串加一个前缀 </span></span><br><span class="line"><span class="comment"> prefixOverrides="":</span></span><br><span class="line"><span class="comment"> 前缀覆盖： 去掉整个字符串前面多余的字符</span></span><br><span class="line"><span class="comment"> suffix="":后缀</span></span><br><span class="line"><span class="comment"> suffix给拼串后的整个字符串加一个后缀 </span></span><br><span class="line"><span class="comment"> suffixOverrides=""</span></span><br><span class="line"><span class="comment"> 后缀覆盖：去掉整个字符串后面多余的字符</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 自定义字符串的截取规则 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"where"</span> <span class="attr">suffixOverrides</span>=<span class="string">"and"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span>id=#&#123;id&#125; and<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 双引号这用单引号 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name!=null and name!=''"</span>&gt;</span>  name like #&#123;name&#125; and<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userclass!=null"</span>&gt;</span> userclass=#&#123;userclass&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="foreach标签"><a href="#foreach标签" class="headerlink" title="foreach标签"></a>foreach标签</h1><p>用于遍历集合的标签，可以做很多事情，例如批量查询，批量更新，批量删除。<br>批量查询</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- public List&lt;Student&gt; getStudentDynamicforeach(List&lt;Integer&gt; list); 接口方法--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentDynamicforeach"</span> <span class="attr">resultType</span>=<span class="string">"entity.Student"</span>&gt;</span></span><br><span class="line"> select * from user </span><br><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> collection：指定要遍历的集合：</span></span><br><span class="line"><span class="comment"> list类型的参数会特殊处理封装在map中，map的key就叫list</span></span><br><span class="line"><span class="comment"> item：将当前遍历出的元素赋值给指定的变量</span></span><br><span class="line"><span class="comment"> separator:每个元素之间的分隔符</span></span><br><span class="line"><span class="comment"> open：遍历出所有结果拼接一个开始的字符</span></span><br><span class="line"><span class="comment"> close:遍历出所有结果拼接一个结束的字符</span></span><br><span class="line"><span class="comment"> index:索引。遍历list的时候是index就是索引，item就是当前值</span></span><br><span class="line"><span class="comment">       遍历map的时候index表示的就是map的key，item就是map的值</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> #&#123;变量名&#125;就能取出变量的值也就是当前遍历出的元素</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"list_id"</span> <span class="attr">separator</span>=<span class="string">","</span></span></span><br><span class="line"><span class="tag">   <span class="attr">open</span>=<span class="string">"where id in("</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">   #&#123;list_id&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>批量保存</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 批量保存 --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--public void addStudent(@Param("stu")List&lt;Student&gt; stu);  --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--MySQL下批量保存：可以foreach遍历   mysql支持values(),(),()语法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addStudent"</span>&gt;</span></span><br><span class="line"> insert into user(name,sex,userclass) </span><br><span class="line">values</span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"stu"</span> <span class="attr">item</span>=<span class="string">"stus"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">(#&#123;stus.name&#125;,#&#123;stus.sex&#125;,#&#123;stus.userclass&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!-- 这种方式需要数据库连接属性allowMultiQueries=true；</span></span><br><span class="line"><span class="comment"> 这种分号分隔多个sql可以用于其他的批量操作（删除，修改） --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addStudent"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"stu"</span> <span class="attr">item</span>=<span class="string">"stus"</span> <span class="attr">separator</span>=<span class="string">";"</span>&gt;</span></span><br><span class="line"> insert into user(name,sex,userclass)</span><br><span class="line"> values(#&#123;stus.name&#125;,#&#123;stus.sex&#125;,#&#123;stus.userclass&#125;)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">insert</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"># sql标签</span><br><span class="line">抽取可重用的sql片段。方便后面引用</span><br><span class="line">```Xml</span><br><span class="line"> <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">  抽取可重用的sql片段。方便后面引用 </span></span><br><span class="line"><span class="comment">  1、sql抽取：经常将要查询的列名，或者插入用的列名抽取出来方便引用</span></span><br><span class="line"><span class="comment">  2、include来引用已经抽取的sql：</span></span><br><span class="line"><span class="comment">  3、include还可以自定义一些property，sql标签内部就能使用自定义的属性</span></span><br><span class="line"><span class="comment">  include-property：取值的正确方式$&#123;prop&#125;,</span></span><br><span class="line"><span class="comment">  #&#123;不能使用这种方式&#125;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"insertColumn"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_databaseId=='oracle'"</span>&gt;</span></span><br><span class="line">  name,sex,user_class</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_databaseId=='mysql'"</span>&gt;</span></span><br><span class="line">  name,sex,userclass</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引用例子 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addStudent"</span>&gt;</span></span><br><span class="line"> insert into user(</span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"insertColum"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testColomn"</span> <span class="attr">value</span>=<span class="string">"abc"</span>/&gt;</span> <span class="comment">&lt;!-- 可以定义值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">) </span><br><span class="line">values</span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"stu"</span> <span class="attr">item</span>=<span class="string">"stus"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">(#&#123;stus.name&#125;,#&#123;stus.sex&#125;,#&#123;stus.userclass&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;动态拼写SQL是MyBatis中很重要的一个内容。
    
    </summary>
    
      <category term="MyBatis" scheme="http://yoursite.com/categories/MyBatis/"/>
    
    
      <category term="MyBatis" scheme="http://yoursite.com/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>resultMap-学习</title>
    <link href="http://yoursite.com/2020/05/03/ResultMap-%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2020/05/03/ResultMap-学习/</id>
    <published>2020-05-03T01:29:00.000Z</published>
    <updated>2020-05-03T02:20:45.901Z</updated>
    
    <content type="html"><![CDATA[<p>resultMap是MyBatis的自定义结果映射规则，使用频繁。<a id="more"></a></p><style>    p{margin:0px 0} </style><h1 id="resultMap基础使用"><a href="#resultMap基础使用" class="headerlink" title="resultMap基础使用"></a>resultMap基础使用</h1><h2 id="映射文件"><a href="#映射文件" class="headerlink" title="映射文件"></a>映射文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--resultMap：自定义某个javaBean的封装规则</span></span><br><span class="line"><span class="comment">type：自定义规则的Java类型</span></span><br><span class="line"><span class="comment">id:唯一id方便引用</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"entity.Ban"</span> <span class="attr">id</span>=<span class="string">"resultMap1"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定主键列的封装规则</span></span><br><span class="line"><span class="comment">id定义主键会底层有优化；</span></span><br><span class="line"><span class="comment">column：指定哪一列,数据库中的列，在查询语句中使用别名，这里也可以写别名</span></span><br><span class="line"><span class="comment">property：指定对应的javaBean属性</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义普通列封装规则 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 其他不指定的列会自动封装 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"ban"</span> <span class="attr">property</span>=<span class="string">"ban"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- resultMap:自定义结果集映射规则；  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- public Ban getClassInfo(Integer id); 接口方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getClassInfo"</span> <span class="attr">resultMap</span>=<span class="string">"resultMap1"</span>&gt;</span></span><br><span class="line">select * from Student_class where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">getSqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testResultMap1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">SqlSessionFactory sessionFactory = getSqlSessionFactory();</span><br><span class="line">SqlSession openSession = sessionFactory.openSession();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">BanDao classDao = openSession.getMapper(BanDao.class);</span><br><span class="line">Ban classInfo = classDao.getClassInfo(<span class="number">2</span>);</span><br><span class="line">System.out.println(classInfo);</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">openSession.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="resultMap单个对象联合查询"><a href="#resultMap单个对象联合查询" class="headerlink" title="resultMap单个对象联合查询"></a>resultMap单个对象联合查询</h1><p>场景一：</p><p>&nbsp&nbsp&nbsp 查询user的同时查询学生对应的班级</p><p>&nbsp&nbsp&nbsp user.userclass=Student_class.id</p><p>&nbsp&nbsp&nbsp 一个学生有与之对应的班级信息；</p><p>&nbsp&nbsp&nbsp id  name  sex   userclass  ||  id  ban</p><h2 id="映射文件-1"><a href="#映射文件-1" class="headerlink" title="映射文件"></a>映射文件</h2><p>在resultMap中使用使用association定义关联的单个对象的封装规则。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">联合查询：级联属性封装结果集</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">使用association定义关联的单个对象的封装规则；</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"entity.Student"</span> <span class="attr">id</span>=<span class="string">"resultMap2"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userclass"</span> <span class="attr">property</span>=<span class="string">"Userclass"</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--  association可以指定联合的javaBean对象</span></span><br><span class="line"><span class="comment">property="ban"：指定哪个属性是联合的对象</span></span><br><span class="line"><span class="comment">javaType:指定这个属性对象的类型[不能省略]</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"ban"</span> <span class="attr">javaType</span>=<span class="string">"entity.Ban"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"ban"</span> <span class="attr">property</span>=<span class="string">"ban"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- public Student getResultStudent(Integer id); 接口方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getResultStudent"</span> <span class="attr">resultMap</span>=<span class="string">"resultMap2"</span>&gt;</span></span><br><span class="line">SELECT distinct u.id id,u.name name,u.sex sex,u.userclass userclass,s.id id,s.ban ban </span><br><span class="line">FROM user u,student_class s </span><br><span class="line">WHERE u.userclass=s.id AND u.id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testResultMap2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">SqlSessionFactory sessionFactory = getSqlSessionFactory();</span><br><span class="line">SqlSession openSession = sessionFactory.openSession();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"> BanDao banDao = openSession.getMapper(BanDao.class);</span><br><span class="line">Student student = banDao.getResultStudent(<span class="number">1</span>);</span><br><span class="line">Ban ban = student.getBan();</span><br><span class="line">System.out.println(student);</span><br><span class="line">System.out.println(ban);</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">openSession.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="resultMap联合分步查询"><a href="#resultMap联合分步查询" class="headerlink" title="resultMap联合分步查询"></a>resultMap联合分步查询</h1><p>使用association进行分步查询。</p><h2 id="映射文件-2"><a href="#映射文件-2" class="headerlink" title="映射文件"></a>映射文件</h2><p>使用分步查询需要新建一个班级的映射文件。<br>学生信息映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用association进行分步查询：</span></span><br><span class="line"><span class="comment">1、先按照学生id查询学生信息</span></span><br><span class="line"><span class="comment">2、根据查询学生信息中的userclass值去班级表查出班级信息</span></span><br><span class="line"><span class="comment">3、班级设置到学生中；</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"entity.Student"</span> <span class="attr">id</span>=<span class="string">"resultMapstep"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userclass"</span> <span class="attr">property</span>=<span class="string">"Userclass"</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- association定义关联对象的封装规则</span></span><br><span class="line"><span class="comment"> select:表明当前属性是调用select指定的方法查出的结果</span></span><br><span class="line"><span class="comment"> column:指定将哪一列的值传给这个方法</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 流程：使用select指定的方法（传入column指定的这列参数的值）查出对象，并封装给property指定的属性</span></span><br><span class="line"><span class="comment"> 这里调用的班级信息映射文件中的方法，调用方式为映射文件命名空间+方法id。</span></span><br><span class="line"><span class="comment"> property="ban" 这是实体类中的属性名</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"ban"</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">select</span>=<span class="string">"Dao.BanMapper.getBanbyId"</span> <span class="attr">column</span>=<span class="string">"userclass"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>班级信息映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta"> PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta"> "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"Dao.BanMapper"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- public Ban getBanbyId(Integer id); 新的接口类的接口方法--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getBanbyId"</span> <span class="attr">resultType</span>=<span class="string">"entity.Ban"</span>&gt;</span></span><br><span class="line"> select id,ban from student_class where id=#&#123;id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testResultMapStep</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">SqlSessionFactory sessionFactory = getSqlSessionFactory();</span><br><span class="line">SqlSession openSession = sessionFactory.openSession();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">BanDao banDao = openSession.getMapper(BanDao.class);</span><br><span class="line">Student banIdstep = banDao.getBanIdstep(<span class="number">3</span>);</span><br><span class="line">System.out.println(banIdstep);</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">openSession.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="resultMap集合对象关联查询"><a href="#resultMap集合对象关联查询" class="headerlink" title="resultMap集合对象关联查询"></a>resultMap集合对象关联查询</h1><p>场景二：</p><p>&nbsp&nbsp&nbsp查询班级的时候将班级对应的所有学生信息也查询出来：注释在BanMapper.xml中</p><h2 id="BanMapper-xml-班级信息映射文件"><a href="#BanMapper-xml-班级信息映射文件" class="headerlink" title="BanMapper.xml(班级信息映射文件)"></a>BanMapper.xml(班级信息映射文件)</h2><p>嵌套结果集的方式，使用collection标签定义关联的集合类型的属性封装规则。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- public class Ban &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">private Integer id;</span></span><br><span class="line"><span class="comment">private String ban;</span></span><br><span class="line"><span class="comment">private List&lt;Student&gt; emp; 集合</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--嵌套结果集的方式，使用collection标签定义关联的集合类型的属性封装规则  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"entity.Ban"</span> <span class="attr">id</span>=<span class="string">"ListResultMap"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这里主键列名是用的是别名，详情看下方SQL语句--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"IDB"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"ban"</span> <span class="attr">property</span>=<span class="string">"ban"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">collection定义关联集合类型的属性的封装规则 </span></span><br><span class="line"><span class="comment">ofType:指定集合里面元素的类型</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"emp"</span> <span class="attr">ofType</span>=<span class="string">"entity.Student"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义这个集合中元素的封装规则 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userclass"</span> <span class="attr">property</span>=<span class="string">"Userclass"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- public Ban getbanIDList(Integer id); 接口方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getbanIDList"</span> <span class="attr">resultMap</span>=<span class="string">"ListResultMap"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在使用级联查询的时候，如果主表和副表的主键都是相同的在MyBatis中查询结果只会出现一条 </span></span><br><span class="line"><span class="comment"> 需要启用别名，使用了别名需要在collection处也更改列的名称</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">SELECT s.id IDB,s.ban,u.id,u.name,u.sex,u.userclass</span><br><span class="line">FROM student_class s</span><br><span class="line">LEFT JOIN user u</span><br><span class="line">ON s.id=u.userclass</span><br><span class="line">WHERE s.id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testResultMapcollection</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">SqlSessionFactory sessionFactory = getSqlSessionFactory();</span><br><span class="line">SqlSession openSession = sessionFactory.openSession();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"> BanMapper mapper = openSession.getMapper(BanMapper.class);</span><br><span class="line">Ban list = mapper.getbanIDList(<span class="number">1</span>);</span><br><span class="line">List&lt;Student&gt; list2 = list.getList();</span><br><span class="line">System.out.println(list);</span><br><span class="line">System.out.println(list2);</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">openSession.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="resultMap集合对象关联分步查询"><a href="#resultMap集合对象关联分步查询" class="headerlink" title="resultMap集合对象关联分步查询"></a>resultMap集合对象关联分步查询</h1><p>使用collection进行分步查询。</p><h2 id="映射文件-3"><a href="#映射文件-3" class="headerlink" title="映射文件"></a>映射文件</h2><p>班级映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta"> PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta"> "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"Dao.BanMapper"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"entity.Ban"</span> <span class="attr">id</span>=<span class="string">"ListResultMapStep"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"ban"</span> <span class="attr">property</span>=<span class="string">"ban"</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--跟association使用方式差不多--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"emp"</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">select</span>=<span class="string">"Dao.BanDao.getStudent"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- public Ban getbanIDListStep(Integer id); 接口方法--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getbanIDListStep"</span> <span class="attr">resultMap</span>=<span class="string">"ListResultMapStep"</span>&gt;</span></span><br><span class="line"> select * from student_class where id=#&#123;id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br><span class="line">学生信息映射文件</span><br><span class="line">```Xml</span><br><span class="line"><span class="comment">&lt;!-- public List&lt;Student&gt; getStudent(Integer id); 接口方法--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudent"</span> <span class="attr">resultType</span>=<span class="string">"entity.Student"</span>&gt;</span></span><br><span class="line"> select * from user where userclass=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="测试-4"><a href="#测试-4" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testResultMapcollectionStep</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">SqlSessionFactory sessionFactory = getSqlSessionFactory();</span><br><span class="line">SqlSession openSession = sessionFactory.openSession();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"> BanMapper mapper = openSession.getMapper(BanMapper.class);</span><br><span class="line"> Ban listStep = mapper.getbanIDListStep(<span class="number">1</span>);</span><br><span class="line"> <span class="comment">//这里获取需关闭懒加载，否者获取不到list信息，全局配置文件中设置</span></span><br><span class="line"> List&lt;Student&gt; list = listStep.getList();</span><br><span class="line"> System.out.println(listStep);</span><br><span class="line"> System.out.println(list);</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">openSession.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在使用分步查询的时候需要一个实体类拥有一个方法接口和相对应的映射文件，最重要的是一定要把映射文件注册到全局配置文件中。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;resultMap是MyBatis的自定义结果映射规则，使用频繁。
    
    </summary>
    
      <category term="MyBatis" scheme="http://yoursite.com/categories/MyBatis/"/>
    
    
      <category term="MyBatis" scheme="http://yoursite.com/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis-简单运行</title>
    <link href="http://yoursite.com/2020/04/29/MyBatis-%E7%AE%80%E5%8D%95%E8%BF%90%E8%A1%8C/"/>
    <id>http://yoursite.com/2020/04/29/MyBatis-简单运行/</id>
    <published>2020-04-29T06:34:43.000Z</published>
    <updated>2020-04-29T06:46:01.380Z</updated>
    
    <content type="html"><![CDATA[<p>MyBatis的简单运行<a id="more"></a></p><h1 id="全局配置文件"><a href="#全局配置文件" class="headerlink" title="全局配置文件"></a>全局配置文件</h1><p>配置文件与映射文件存在于根目录</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/test"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 将写好的sql映射文件（StudentMapper.xml）一定要注册到全局配置文件（mybatis-config.xml）中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"StudentMapper.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="映射文件"><a href="#映射文件" class="headerlink" title="映射文件"></a>映射文件</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta"> PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta"> "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"Dao.StudentDao"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">namespace:名称空间;这里指定为接口的全类名</span></span><br><span class="line"><span class="comment">id：唯一标识,使用接口的方法名称</span></span><br><span class="line"><span class="comment">resultType：返回值类型</span></span><br><span class="line"><span class="comment">#&#123;id&#125;：从传递过来的参数中取出id值</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!-- public Student getStudentId(Integer id); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentId"</span> <span class="attr">resultType</span>=<span class="string">"student.Student"</span>&gt;</span></span><br><span class="line">select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- public void updateStudent(Integer id,String Name,String sex); </span></span><br><span class="line"><span class="comment"> public void updateStudent(@Param("id")Integer id,@Param("name")String Name,@Param("sex")String sex);</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateStudent"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当有多个参数时无法使用属性名来进行绑定,可以使用param1.....paramN 来进行绑定</span></span><br><span class="line"><span class="comment">update user set name=#&#123;param2&#125;,sex=#&#123;param3&#125; where id=#&#123;param1&#125;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如要使用属性名绑定使用@param("")来进行绑定 --&gt;</span></span><br><span class="line">update user set name=#&#123;name&#125;,sex=#&#123;sex&#125; where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- public void addStudent(Student student); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addStudent"</span>&gt;</span></span><br><span class="line">insert into user(name,sex) values(#&#123;name&#125;,#&#123;sex&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- public void deleteStudent(Integer id); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteStudent"</span>&gt;</span></span><br><span class="line">delete from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer Id;</span><br><span class="line"><span class="keyword">private</span> String Name;</span><br><span class="line"><span class="keyword">private</span> String Sex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">Id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">Name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">Sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Student [Id="</span> + Id + <span class="string">", Name="</span> + Name + <span class="string">", Sex="</span> + Sex + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, String sex)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">Name = name;</span><br><span class="line">Sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> student.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Student <span class="title">getStudentId</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(Student student)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateStudent</span><span class="params">(@Param(<span class="string">"id"</span>)</span>Integer id,@<span class="title">Param</span><span class="params">(<span class="string">"name"</span>)</span>String Name,@<span class="title">Param</span><span class="params">(<span class="string">"sex"</span>)</span>String sex)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteStudent</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> student.mybatis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Dao.StudentDao;</span><br><span class="line"><span class="keyword">import</span> student.Student;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyBatis_Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">getSqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、根据xml配置文件（全局配置文件）创建一个SqlSessionFactory对象 有数据源一些运行环境信息</span></span><br><span class="line"><span class="comment"> * 2、sql映射文件；配置了每一个sql，以及sql的封装规则等。 </span></span><br><span class="line"><span class="comment"> * 3、将sql映射文件注册在全局配置文件中</span></span><br><span class="line"><span class="comment"> * 4、写代码：</span></span><br><span class="line"><span class="comment"> * 1）、根据全局配置文件得到SqlSessionFactory；</span></span><br><span class="line"><span class="comment"> * 2）、使用sqlSession工厂，获取到sqlSession对象使用他来执行增删改查</span></span><br><span class="line"><span class="comment"> * 一个sqlSession就是代表和数据库的一次会话，用完关闭</span></span><br><span class="line"><span class="comment"> * 3）、使用sql的唯一标志来告诉MyBatis执行哪个sql。sql都是保存在sql映射文件中的。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//基础方式</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 2、获取sqlSession实例，能直接执行已经映射的sql语句</span></span><br><span class="line"><span class="comment">// sql的唯一标识：statement Unique identifier matching the statement to use.</span></span><br><span class="line"><span class="comment">// 执行sql要用的参数：parameter A parameter object to pass to the statement.</span></span><br><span class="line">SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();</span><br><span class="line"></span><br><span class="line">SqlSession openSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//命名空间+id,这里没使用接口绑定,StudentMapper 随便起的命名空间，getStudentById id名称</span></span><br><span class="line">Student student = openSession.selectOne(<span class="string">"StudentMapper.getStudentById"</span>, <span class="number">1</span>);</span><br><span class="line">System.out.println(student);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">openSession.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//推荐使用这种方法</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//1.获取SqlSessionFactory</span></span><br><span class="line">SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取sqlSession</span></span><br><span class="line">SqlSession openSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//3.获取接口实现类对象</span></span><br><span class="line"><span class="comment">//为接口自动创建一个代理对象，代理对象执行增删改查</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">StudentDao studentDao = openSession.getMapper(StudentDao.class);</span><br><span class="line"><span class="comment">//4.调用方法</span></span><br><span class="line">Student student =studentDao.getStudentId(<span class="number">1</span>);</span><br><span class="line">System.out.println(student);</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">openSession.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();</span><br><span class="line">SqlSession openSession = sqlSessionFactory.openSession();</span><br><span class="line">StudentDao studentDao = openSession.getMapper(StudentDao.class);</span><br><span class="line"><span class="comment">//Student student = new Student("李四","男");</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//添加方法</span></span><br><span class="line"><span class="comment">//studentDao.addStudent(student);</span></span><br><span class="line"><span class="comment">//删除方法</span></span><br><span class="line"><span class="comment">//studentDao.deleteStudent(6);</span></span><br><span class="line"><span class="comment">//修改方法</span></span><br><span class="line">studentDao.updateStudent(<span class="number">7</span>,<span class="string">"李四"</span>, <span class="string">"男"</span>);</span><br><span class="line"><span class="comment">//手动提交 可以设置sqlSessionFactory.openSession(true)</span></span><br><span class="line">openSession.commit();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">openSession.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MyBatis的简单运行
    
    </summary>
    
      <category term="MyBatis" scheme="http://yoursite.com/categories/MyBatis/"/>
    
    
      <category term="MyBatis" scheme="http://yoursite.com/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis-映射文件学习</title>
    <link href="http://yoursite.com/2020/04/29/MyBatis-%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2020/04/29/MyBatis-映射文件学习/</id>
    <published>2020-04-29T05:40:30.000Z</published>
    <updated>2020-05-01T01:12:21.847Z</updated>
    
    <content type="html"><![CDATA[<p>MyBatis-映射文件的学习<a id="more"></a></p><style>    p{margin:0px 0} </style><h1 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta"> PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta"> "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">namespace:名称空间;指定为接口的全类名,随意起名，后续推荐与接口绑定</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="查询标签"><a href="#查询标签" class="headerlink" title="查询标签"></a>查询标签</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">namespace:名称空间;指定为接口的全类名</span></span><br><span class="line"><span class="comment">id：唯一标识</span></span><br><span class="line"><span class="comment">resultType：返回值类型</span></span><br><span class="line"><span class="comment">#&#123;id&#125;：从传递过来的参数中取出id值</span></span><br><span class="line"><span class="comment">public Student getStudentById(Integer id);</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">@MapKey("id") //需要在接口方法上添加注解设定主键</span></span><br><span class="line"><span class="comment">public Map&lt;Integer, Student&gt; getStudentByLastNameLikeReturnMap(String lastName);  </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentByLastNameLikeReturnMap"</span> <span class="attr">resultType</span>=<span class="string">"myBatis_Study.Student"</span>&gt;</span></span><br><span class="line"> select * from user where name like #&#123;name&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!--public Map&lt;String, Object&gt; getStudentByIdReturnMap(Integer id);  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentByIdReturnMap"</span> <span class="attr">resultType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line"> select * from user where id=#&#123;id&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- public List&lt;Student&gt; getStudentsByLastNameLike(String lastName); --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--resultType：如果返回的是一个集合，要写集合中元素的类型  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentsByLastNameLike"</span> <span class="attr">resultType</span>=<span class="string">"myBatis_Study.Student"</span>&gt;</span></span><br><span class="line">select * from user where name like #&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- public Student getStudentByMap(Map&lt;String, Object&gt; map); --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentByMap"</span> <span class="attr">resultType</span>=<span class="string">"myBatis_Study.Student"</span>&gt;</span></span><br><span class="line"> select * from $&#123;tableName&#125; where id=$&#123;id&#125; and name=#&#123;name&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!--  public Student getStudentByIdAndLastName(Integer id,String lastName);--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentByIdAndLastName"</span> <span class="attr">resultType</span>=<span class="string">"myBatis_Study.Student"</span>&gt;</span></span><br><span class="line"> select * from user where id = #&#123;id&#125; and name=#&#123;name&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentById"</span> <span class="attr">resultType</span>=<span class="string">"myBatis_Study.Student"</span>&gt;</span></span><br><span class="line">select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentById"</span> <span class="attr">resultType</span>=<span class="string">"myBatis_Study.Student"</span></span></span><br><span class="line"><span class="tag"><span class="attr">databaseId</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可以使用全局配置文件中的&lt;typeAliases&gt; 设置别名 resultType="别名" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentById"</span> <span class="attr">resultType</span>=<span class="string">"myBatis_Study.Student"</span></span></span><br><span class="line"><span class="tag"><span class="attr">databaseId</span>=<span class="string">"oracle"</span>&gt;</span></span><br><span class="line">select  id,name,sex from Student where Student_ID=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="关于多个参数时报错"><a href="#关于多个参数时报错" class="headerlink" title="关于多个参数时报错"></a>关于多个参数时报错</h1><p>单个参数：mybatis不会做特殊处理，</p><p>&nbsp #{参数名/任意名}：取出参数值。</p>    <p>多个参数：mybatis会做特殊处理。</p><p>&nbsp 多个参数会被封装成 一个map，</p>    <p>&nbsp key：param1...paramN,或者参数的索引也可以</p><p>&nbsp&nbsp value：传入的参数值</p><p>&nbsp #{}就是从map中获取指定的key的值；</p>    <br>异常：org.apache.ibatis.binding.BindingException: Parameter 'id' not found. Available parameters are [1, 0, param1, param2]<p>&nbsp 操作：</p><p>&nbsp&nbsp 方法：public Student getEmpByIdAndLastName(Integer id,String name);</p><p>&nbsp&nbsp 取值：#{id},#{name}</p><p>【命名参数】：明确指定封装参数时map的key；@Param(“id”)<br>多个参数会被封装成 一个map。</p><p>&nbsp&nbsp key：使用@Param注解指定的值</p><p>&nbsp&nbsp value：参数值</p><p>&nbsp #{指定的key}取出对应的参数值</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>POJO：<br>如果多个参数正好是我们业务逻辑的数据模型，我们就可以直接传入pojo</p><p>&nbsp #{属性名}：取出传入的pojo的属性值    </p><p>Map：<br>如果多个参数不是业务模型中的数据，没有对应的pojo，不经常使用，为了方便，我们也可以传入map</p><p>&nbsp #{key}：取出map中对应的值</p><p>TO：<br>如果多个参数不是业务模型中的数据，但是经常要使用，推荐来编写一个TO（Transfer Object）数据传输对象<br>Page{<br>    int index;<br>    int size;<br>}</p><h1 id="更新标签"><a href="#更新标签" class="headerlink" title="更新标签"></a>更新标签</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- public void updateStudent(Integer id,String Name,String sex); </span></span><br><span class="line"><span class="comment"> public void updateStudent(@Param("id")Integer id,@Param("name")String Name,@Param("sex")String sex);</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateStudent"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当有多个参数时无法使用属性名来进行绑定,可以使用param1.....paramN 来进行绑定</span></span><br><span class="line"><span class="comment">update user set name=#&#123;param2&#125;,sex=#&#123;param3&#125; where id=#&#123;param1&#125;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如要使用属性名绑定使用@param("")来进行绑定 --&gt;</span></span><br><span class="line">update user set name=#&#123;name&#125;,sex=#&#123;sex&#125; where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="添加标签"><a href="#添加标签" class="headerlink" title="添加标签"></a>添加标签</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- public void addStudent(Student student); --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- parameterType：参数类型，可以省略， </span></span><br><span class="line"><span class="comment">获取自增主键的值：</span></span><br><span class="line"><span class="comment">mysql支持自增主键，自增主键值的获取，mybatis也是利用statement.getGenreatedKeys()；</span></span><br><span class="line"><span class="comment">useGeneratedKeys="true"；使用自增主键获取主键值策略</span></span><br><span class="line"><span class="comment">keyProperty；指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给javaBean的哪个属性</span></span><br><span class="line"><span class="comment">databaseId：在MyBatis 全局配置文件配置的数据库别名，判断当前在MySQL环境下才会运行</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addStudent"</span> <span class="attr">parameterType</span>=<span class="string">"com.atguigu.mybatis.bean.Employee"</span></span></span><br><span class="line"><span class="tag"><span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">databaseId</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">insert into tbl_employee(name,sex) </span><br><span class="line">values(#&#123;name&#125;,#&#123;sex&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">获取非自增主键的值：</span></span><br><span class="line"><span class="comment">Oracle不支持自增；Oracle使用序列来模拟自增；</span></span><br><span class="line"><span class="comment">每次插入的数据的主键是从序列中拿到的值；如何获取到这个值；</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addStudent"</span> <span class="attr">databaseId</span>=<span class="string">"oracle"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">keyProperty:查出的主键值封装给javaBean的哪个属性</span></span><br><span class="line"><span class="comment">order="BEFORE":当前sql在插入sql之前运行</span></span><br><span class="line"><span class="comment">   AFTER：当前sql在插入sql之后运行</span></span><br><span class="line"><span class="comment">resultType:查出的数据的返回值类型</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">BEFORE运行顺序：</span></span><br><span class="line"><span class="comment">先运行selectKey查询id的sql；查出id值封装给javaBean的id属性</span></span><br><span class="line"><span class="comment">在运行插入的sql；就可以取出id属性对应的值</span></span><br><span class="line"><span class="comment">AFTER运行顺序：</span></span><br><span class="line"><span class="comment">先运行插入的sql（从序列中取出新值作为id）；</span></span><br><span class="line"><span class="comment">再运行selectKey查询id的sql；</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">order</span>=<span class="string">"BEFORE"</span> <span class="attr">resultType</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 编写查询主键的sql语句 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- BEFORE--&gt;</span></span><br><span class="line">select Student_SEQ.nextval from dual </span><br><span class="line"><span class="comment">&lt;!-- AFTER：</span></span><br><span class="line"><span class="comment"> select Student_SEQ.currval from dual --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 插入时的主键是从序列中拿到的 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- BEFORE:--&gt;</span></span><br><span class="line">insert into Student(id,name,sex) </span><br><span class="line">values(#&#123;id&#125;,#&#123;name&#125;,#&#123;sex&#125;) </span><br><span class="line"><span class="comment">&lt;!-- AFTER：</span></span><br><span class="line"><span class="comment">insert into Student(id,name,sex) </span></span><br><span class="line"><span class="comment">values(Student_seq.nextval,#&#123;name&#125;,#&#123;sex&#125;) --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- public void deleteStudent(Integer id); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteStudent"</span>&gt;</span></span><br><span class="line">delete from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="简单的映射文件演示"><a href="#简单的映射文件演示" class="headerlink" title="简单的映射文件演示"></a>简单的映射文件演示</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta"> PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta"> "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"Dao.StudentDao"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">namespace:名称空间;指定为接口的全类名</span></span><br><span class="line"><span class="comment">id：唯一标识</span></span><br><span class="line"><span class="comment">resultType：返回值类型</span></span><br><span class="line"><span class="comment">#&#123;id&#125;：从传递过来的参数中取出id值</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!-- public Student getStudentId(Integer id); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentId"</span> <span class="attr">resultType</span>=<span class="string">"student.Student"</span>&gt;</span></span><br><span class="line">select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- public void updateStudent(Integer id,String Name,String sex); </span></span><br><span class="line"><span class="comment"> public void updateStudent(@Param("id")Integer id,@Param("name")String Name,@Param("sex")String sex);</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateStudent"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当有多个参数时无法使用属性名来进行绑定,可以使用param1.....paramN 来进行绑定</span></span><br><span class="line"><span class="comment">update user set name=#&#123;param2&#125;,sex=#&#123;param3&#125; where id=#&#123;param1&#125;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如要使用属性名绑定使用@param("")来进行绑定 --&gt;</span></span><br><span class="line">update user set name=#&#123;name&#125;,sex=#&#123;sex&#125; where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- public void addStudent(Student student); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addStudent"</span>&gt;</span></span><br><span class="line">insert into user(name,sex) values(#&#123;name&#125;,#&#123;sex&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- public void deleteStudent(Integer id); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteStudent"</span>&gt;</span></span><br><span class="line">delete from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MyBatis-映射文件的学习
    
    </summary>
    
      <category term="MyBatis" scheme="http://yoursite.com/categories/MyBatis/"/>
    
    
      <category term="MyBatis" scheme="http://yoursite.com/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis-全局配置文件学习</title>
    <link href="http://yoursite.com/2020/04/28/MyBatis-%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2020/04/28/MyBatis-全局配置文件学习/</id>
    <published>2020-04-28T04:25:29.000Z</published>
    <updated>2020-05-06T02:24:39.581Z</updated>
    
    <content type="html"><![CDATA[<p>对MyBatis全局配置文件的学习<a id="more"></a></p><style>    p{margin:0px 0} </style><h1 id="引入外部文件"><a href="#引入外部文件" class="headerlink" title="引入外部文件"></a>引入外部文件</h1><p>mybatis可以使用properties来引入外部properties配置文件的内容:</p><p>&nbsp&nbsp resource：引入类路径下的资源<br>&nbsp&nbsp url：引入网络路径或者磁盘路径下的资源</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"dbconfig.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="settings-设置"><a href="#settings-设置" class="headerlink" title="settings 设置"></a>settings 设置</h1><p>setting:用来设置每一个设置项:</p><p>&nbsp&nbsp name：设置项名<br>&nbsp&nbsp value：设置项取值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 驼峰命名法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 设置字段为空时使用的JDBC的属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"jdbcTypeForNull"</span> <span class="attr">value</span>=<span class="string">"NULL"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--显示的指定每个我们需要更改的配置的值，即使他是默认的。防止版本更新带来的问题  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 懒加载 使用的时候才进行加载--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 侵入延迟加载 默认true 默认将所有属性全部加载 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="typeAliases"><a href="#typeAliases" class="headerlink" title="typeAliases"></a>typeAliases</h1><p>别名处理器可以为我们的java类型起别名，别名不区分大小写。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1、typeAlias:为某个java类型起别名</span></span><br><span class="line"><span class="comment">type:指定要起别名的类型全类名;默认别名就是类名小写</span></span><br><span class="line"><span class="comment">alias:指定新的别名</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;typeAlias type="myBatis_Study.Student" alias="stu"/&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2、package:为某个包下的所有类批量起别名 </span></span><br><span class="line"><span class="comment">name：指定包名（为当前包以及下面所有的后代包的每一个类都起一个默认别名（类名小写），）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"myBatis_Study"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3、批量起别名的情况下，使用@Alias注解为某个类型指定新的别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="environments"><a href="#environments" class="headerlink" title="environments"></a>environments</h1><p>环境配置，mybatis可以配置多种环境 ,default指定使用某种环境。可以达到快速切换环境。<br>environment：配置一个具体的环境信息，必须有两个标签，id代表当前环境的唯一标识</p><p>&nbsp&nbsp transactionManager：事务管理器</p>type：事务管理器的类型：<p>&nbsp&nbsp&nbsp JDBC(JdbcTransactionFactory)|MANAGED(ManagedTransactionFactory)</p>自定义事务管理器：实现TransactionFactory接口.type指定为全类名<p>dataSource：数据源<br>type:数据源类型：UNPOOLED(UnpooledDataSourceFactory)|POOLED(PooledDataSourceFactory)<br>|JNDI(JndiDataSourceFactory)<br>自定义数据源：实现DataSourceFactory接口，type是全类名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"dev_mysql"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"dev_mysql"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"dev_oracle"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;orcl.driver&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;orcl.url&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;orcl.username&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;orcl.password&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="databaseIdProvider"><a href="#databaseIdProvider" class="headerlink" title="databaseIdProvider"></a>databaseIdProvider</h1><p>支持多数据库厂商, type=”DB_VENDOR”(VendorDatabaseIdProvider) 作用就是得到数据库厂商的标识(驱动getDatabaseProductName())，mybatis就能根据数据库厂商标识来执行不同的sql;<br>例如：MySQL，Oracle，SQL Server xxxx</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">databaseIdProvider</span> <span class="attr">type</span>=<span class="string">"DB_VENDOR"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 为不同的数据库厂商起别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"MySQL"</span> <span class="attr">value</span>=<span class="string">"mysql"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"Oracle"</span> <span class="attr">value</span>=<span class="string">"oracle"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"SQL Server"</span> <span class="attr">value</span>=<span class="string">"sqlserver"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">databaseIdProvider</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">这里需要到MyBatis映射文件中去设置</span></span><br><span class="line"><span class="comment">&lt;select id="getEmpById" resultType="myBatis_Study.Student"</span></span><br><span class="line"><span class="comment">databaseId="mysql"&gt; 别名在这里起作用,下一篇讲映射文件</span></span><br><span class="line"><span class="comment">select * from user where id = #&#123;id&#125;</span></span><br><span class="line"><span class="comment">&lt;/select&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h1 id="mappers"><a href="#mappers" class="headerlink" title="mappers"></a>mappers</h1><p>将sql映射注册到全局配置中。<br>mapper:注册一个sql映射注册配置文件.<br>resource：引用类路径下的sql映射文件</p><p>&nbsp&nbsp mybatis/mapper/EmployeeMapper.xml</p>url：引用网路路径或者磁盘路径下的sql映射文件<p>&nbsp&nbsp file:///var/mappers/AuthorMapper.xml</p><p>注册接口<br>class：引用（注册）接口，</p><p>&nbsp&nbsp 1、有sql映射文件，映射文件名必须和接口同名，并且放在与接口同一目录下<br>&nbsp&nbsp 2、没有sql映射文件，所有的sql都是利用注解写在接口上</p><p>推荐：</p><p>&nbsp&nbsp 比较重要的，复杂的Dao接口我们来写sql映射文件<br>&nbsp&nbsp 不重要，简单的Dao接口为了开发快速可以使用注解</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;mapper resource="mybatis/mapper/StudentMapper.xml"/&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;mapper class="mybatis.dao.StudentMapperAnnotation"/&gt; 注解方式--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 批量注册： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.atguigu.mybatis.dao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="简单的配置文件演示"><a href="#简单的配置文件演示" class="headerlink" title="简单的配置文件演示"></a>简单的配置文件演示</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span> <span class="comment">&lt;!-- 这里一般交给Spring --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 将我们写好的sql映射文件（StudentMapper.xml）一定要注册到全局配置文件（mybatis-config.xml）中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"StudentMapper.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对MyBatis全局配置文件的学习
    
    </summary>
    
      <category term="MyBatis" scheme="http://yoursite.com/categories/MyBatis/"/>
    
    
      <category term="MyBatis" scheme="http://yoursite.com/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>AOP 切面编程</title>
    <link href="http://yoursite.com/2020/04/07/AOP-%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/04/07/AOP-切面编程/</id>
    <published>2020-04-07T06:13:39.000Z</published>
    <updated>2020-04-07T06:53:30.820Z</updated>
    
    <content type="html"><![CDATA[<p>AOP(Aspect-Oriented Programming, 面向切面编程): 是一种新的方法论, 是对传统 OOP(Object-Oriented Programming, 面向对象编程) 的补充.<a id="more"></a><br>AOP 的主要编程对象是切面(aspect), 而切面模块化横切关注点.<br>在应用 AOP 编程时, 仍然需要定义公共功能, 但可以明确的定义这个功能在哪里, 以什么方式应用, 并且不必修改受影响的类. 这样一来横切关注点就被模块化到特殊的对象(切面)里.<br>AOP 的好处:<br>每个事物逻辑位于一个位置, 代码不分散, 便于维护和升级<br>业务模块更简洁, 只包含核心业务代码.</p><h1 id="AOP-术语"><a href="#AOP-术语" class="headerlink" title="AOP 术语"></a>AOP 术语</h1><font size="4">切面(Aspect):  横切关注点(跨越应用程序多个模块的功能)被模块化的特殊对象<br><p>通知(Advice):  切面必须要完成的工作</p><p>目标(Target): 被通知的对象</p><p>代理(Proxy): 向目标对象应用通知之后创建的对象</p><p>连接点（Joinpoint）：程序执行的某个特定位置：如类某个方法调用前、调用后、方法抛出异常后等。连接点由两个信息确定：方法表示的程序执行点；相对点表示的方位。例如 ArithmethicCalculator#add() 方法执行前的连接点，执行点为 ArithmethicCalculator#add()； 方位为该方法执行前的位置</p><p>切点（pointcut）：每个类都拥有多个连接点：例如 ArithmethicCalculator 的所有方法实际上都是连接点，即连接点是程序类中客观存在的事务。AOP 通过切点定位到特定的连接点。类比：连接点相当于数据库中的记录，切点相当于查询条件。切点和连接点不是一对一的关系，一个切点匹配多个连接点，切点通过 org.springframework.aop.Pointcut 接口进行描述，它使用类和方法作为连接点的查询条件。<br></p></font><p></p><h1 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h1><p>这里使用的是AspectJ的注解方式 ,整个工程依赖的包有：</p><blockquote><font size="4">spring-beans-4.1.1.RELEASE.jar<br>spring-context-4.1.1.RELEASE.jar<br>spring-core-4.1.1.RELEASE.jar<br>spring-expression-4.1.1.RELEASE.jar<br>commons-logging-1.2.jar<br>spring-aop-4.1.1.RELEASE.jar<br>aspectjrt.jar<br>aspectjweaver.jar<br>com.springsource.org.aopalliance-1.0.0.jar</font></blockquote><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.AOP.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i ,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> i ,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> i ,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> i ,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.AOP.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorImpl</span> <span class="keyword">implements</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> i+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> i-b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> i*b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> i/b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="切面类"><a href="#切面类" class="headerlink" title="切面类"></a>切面类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.AOP.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterReturning;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterThrowing;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把这个类声明成切面 ：把该类放入IOC 容器中、再声明为一个切面</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Order</span>：可以指定切面的优先级</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">1</span>)</span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingAspect</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Before</span>：声明该方法是一个前置通知：在目标方法开始执行之前执行</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> joinPoint：获取参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//第一个* 代表任何返回值 第二个*代表此类名下的所有方法 只要符合声明里的方法都能触发前置通知 ..代表任意参数</span></span><br><span class="line"><span class="meta">@Before</span>(<span class="string">"execution(public * spring.AOP.impl.Calculator.*(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforMethod</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">String method = joinPoint.getSignature().getName();</span><br><span class="line">List&lt;Object&gt; list = Arrays.asList(joinPoint.getArgs());</span><br><span class="line">System.out.println(<span class="string">"开始于"</span>+ method +<span class="string">"参数"</span>+ list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@After</span>：声明该方法是一个后置置通知：在目标方法开始执行之后执行</span></span><br><span class="line"><span class="comment"> * 不受出错控制，程序错误依然可以输出结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@After</span>(<span class="string">"execution(public * spring.AOP.impl.Calculator.*(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"结束"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@AfterReturning</span>：获取方法返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> joinpoint：获取参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> result：获取返回值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AfterReturning</span>(value=<span class="string">"execution(public * spring.AOP.impl.Calculator.*(..))"</span>,</span><br><span class="line">returning = <span class="string">"result"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(JoinPoint joinPoint,Object result)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"结果："</span>+ result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@AfterThrowing</span>：异常通知，方法发生错误时才会生效的通知</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> joinpoint：获取参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ex：异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AfterThrowing</span>(value=<span class="string">"execution(public * spring.AOP.impl.Calculator.*(..))"</span>,</span><br><span class="line">throwing = <span class="string">"ex"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(JoinPoint joinPoint,Exception ex)</span> </span>&#123;</span><br><span class="line">String method = joinPoint.getSignature().getName();</span><br><span class="line">System.out.println(<span class="string">"方法"</span>+method+<span class="string">"出错，错误："</span>+ ex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 环绕通知需要携带 ProceedingJoinPoint 类型的参数. </span></span><br><span class="line"><span class="comment"> * 环绕通知类似于动态代理的全过程: ProceedingJoinPoint 类型的参数可以决定是否执行目标方法.</span></span><br><span class="line"><span class="comment"> * 且环绕通知必须有返回值, 返回值即为目标方法的返回值</span></span><br><span class="line"><span class="comment"> * 一般不使用,使用环绕通知，前面的代码需要删除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Around</span>(<span class="string">"execution(public * spring.AOP.impl.Calculator.*(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">aroundMethod</span><span class="params">(ProceedingJoinPoint pdj)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">Object result = <span class="keyword">null</span>;</span><br><span class="line">String methodName = pdj.getSignature().getName();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//前置通知</span></span><br><span class="line">System.out.println(<span class="string">"开始于 "</span> + methodName + <span class="string">" 参数 "</span> + Arrays.asList(pdj.getArgs()));</span><br><span class="line"><span class="comment">//执行目标方法</span></span><br><span class="line">result = pdj.proceed();</span><br><span class="line"><span class="comment">//返回通知</span></span><br><span class="line">System.out.println(<span class="string">"结果 "</span>+ result );</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line"><span class="comment">//异常通知</span></span><br><span class="line">System.out.println(<span class="string">"方法 "</span> + methodName + <span class="string">"出错，错误:"</span> + e);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后置通知</span></span><br><span class="line">System.out.println(<span class="string">"结束"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置自动扫描的包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"spring.AOP.impl"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使AspectJ 注解起作用：自动为匹配的类生成代理对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring.AOP.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"ApplicationContextAOP.xml"</span>);</span><br><span class="line">Calculator calculator = (Calculator) ctx.getBean(Calculator.class); <span class="comment">//.class 是因为 @Component 没有声明名字</span></span><br><span class="line">calculator.add(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">calculator.sub(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">calculator.div(<span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font size="4">结果：</font></p><blockquote><p>开始于add参数[2, 3]<br>结束<br>结果：5<br>开始于sub参数[3, 4]<br>结束<br>结果：-1<br>开始于div参数[5, 0]<br>结束<br>方法div出错：java.lang.ArithmeticException: / by zero</p></blockquote><h2 id="关于切面表达式"><a href="#关于切面表达式" class="headerlink" title="关于切面表达式"></a>关于切面表达式</h2><p>在编写 AspectJ 切面时, 可以直接在通知注解中书写切入点表达式. 但同一个切点表达式可能会在多个通知中重复出现.<br>在 AspectJ 切面中, 可以通过 @Pointcut 注解将一个切入点声明成简单的方法. 切入点的方法体通常是空的, 因为将切入点定义与应用程序逻辑混在一起是不合理的.<br>切入点方法的访问控制符同时也控制着这个切入点的可见性. 如果切入点要在多个切面中共用, 最好将它们集中在一个公共的类中. 在这种情况下, 它们必须被声明为 public. 在引入这个切入点时, 必须将类名也包括在内. 如果类没有与这个切面放在同一个包中, 还必须包含包名.<br>其他通知可以通过方法名称引入该切入点.</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个方法, 用于声明切入点表达式. 一般地, 该方法中再不需要添入其他的代码. </span></span><br><span class="line"><span class="comment"> * 使用 <span class="doctag">@Pointcut</span> 来声明切入点表达式. </span></span><br><span class="line"><span class="comment"> * 后面的其他通知直接使用方法名来引用当前的切入点表达式. </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(public * spring.AOP.impl.Calculator.*(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">declareJointPointExpression</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Before</span>：声明该方法是一个前置通知：在目标方法开始执行之前执行</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> joinPoint：获取参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//第一个* 代表任何返回值 第二个*代表此类名下的所有方法 只要符合声明里的方法都能触发前置通知 ..代表任意参数</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span>(<span class="string">"declareJointPointExpression()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforMethod</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">String method = joinPoint.getSignature().getName();</span><br><span class="line">List&lt;Object&gt; list = Arrays.asList(joinPoint.getArgs());</span><br><span class="line">System.out.println(<span class="string">"开始于"</span>+ method +<span class="string">"参数"</span>+ list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于AspectJ还有基于xml配置文件的方式，这里就不多赘述了，自行学习。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AOP(Aspect-Oriented Programming, 面向切面编程): 是一种新的方法论, 是对传统 OOP(Object-Oriented Programming, 面向对象编程) 的补充.
    
    </summary>
    
      <category term="Spring 基础" scheme="http://yoursite.com/categories/Spring-%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring 基础" scheme="http://yoursite.com/tags/Spring-%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Spring xml学习2</title>
    <link href="http://yoursite.com/2020/04/05/Spring-xml%E5%AD%A6%E4%B9%A02/"/>
    <id>http://yoursite.com/2020/04/05/Spring-xml学习2/</id>
    <published>2020-04-05T06:18:09.000Z</published>
    <updated>2020-04-07T06:12:38.669Z</updated>
    
    <content type="html"><![CDATA[<p>通过注解配置 Bean。<a id="more"></a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 需要开启context --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定IOC容器的扫描的包  resource-pattern可以过滤特定的类--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;context:component-scan base-package="ContextTest"</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">resource-pattern="repository/*.class"&gt;&lt;/context:component-scan&gt; </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- context:exclude-filter 子节点指定排除哪些指定表达式的组件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- context:include-filter 子节点指定包含哪些表达式的组件,该子节点需要 use-default-filters 配合使用--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  type="annotation 标注了XXXannotation 的类  type="assinable" 继承或扩展 XXXService 的类  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"ContextTest"</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span> <span class="comment">&lt;!-- use-default-filters 是否使用默认filter 默认值 true --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  &lt;context:exclude-filter type="annotation"</span></span><br><span class="line"><span class="comment">expression="org.springframework.stereotype.Repository"/&gt;  --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Repository"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里包括主包和它的子包</span></span><br><span class="line"><span class="keyword">package</span> ContextTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRespository</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> ContextTest.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>  <span class="comment">//@Controller: 标识表现层组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"UserController"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> ContextTest.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>   <span class="comment">//@Service: 标识服务层(业务层)组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"UserService"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> ContextTest.testObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//@Component: 基本注解, 标识了一个受 Spring 管理的组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> ContextTest.UserRespositoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ContextTest.UserRespository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span>(<span class="string">"userRespository"</span>) <span class="comment">//@Respository: 标识持久层组件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRespositoryImpl</span> <span class="keyword">implements</span> <span class="title">UserRespository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"UserRespository"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="keyword">package</span> ContextTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ContextTest.controller.UserController;</span><br><span class="line"><span class="keyword">import</span> ContextTest.service.UserService;</span><br><span class="line"><span class="keyword">import</span> ContextTest.testObject.TestObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.annotation.xml"</span>);</span><br><span class="line">TestObject test = (TestObject) ctx.getBean(<span class="string">"testObject"</span>);</span><br><span class="line">System.out.println(test);</span><br><span class="line"></span><br><span class="line">UserController user = (UserController) ctx.getBean(<span class="string">"userController"</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line"></span><br><span class="line">UserService service = (UserService) ctx.getBean(<span class="string">"userService"</span>);</span><br><span class="line">System.out.println(service);</span><br><span class="line"></span><br><span class="line">UserRespository UserRespositor = (UserRespository) ctx.getBean(<span class="string">"userRespository"</span>);</span><br><span class="line">System.out.println(UserRespositor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="context:component-scan" target="_blank" rel="noopener">context:component-scan</a>元素还会自动注册 AutowiredAnnotationBeanPostProcessor 实例, 该实例可以自动装配具有 @Autowired 和 @Resource 、@Inject注解的属性.<br>@Autowired 注解自动装配具有兼容类型的单个 Bean属性<br>构造器, 普通字段(即使是非 public), 一切具有参数的方法都可以应用@Authwired 注解<br>默认情况下, 所有使用 @Authwired 注解的属性都需要被设置. 当 Spring 找不到匹配的 Bean 装配属性时, 会抛出异常, 若某一属性允许不被设置, 可以设置 @Authwired 注解的 required 属性为 false<br>默认情况下, 当 IOC 容器里存在多个类型兼容的 Bean 时, 通过类型的自动装配将无法工作. 此时可以在 @Qualifier 注解里提供 Bean 的名称. Spring 允许对方法的入参标注 @Qualifiter 已指定注入 Bean 的名称<br>@Authwired 注解也可以应用在数组类型的属性上, 此时 Spring 将会把所有匹配的 Bean 进行自动装配.<br>@Authwired 注解也可以应用在集合属性上, 此时 Spring 读取该集合的类型信息, 然后自动装配所有与之兼容的 Bean.<br>@Authwired 注解用在 java.util.Map 上时, 若该 Map 的键值为 String, 那么 Spring 将自动装配与之 Map 值类型兼容的 Bean, 此时 Bean 的名称作为键值<br>Spring 还支持 @Resource 和 @Inject 注解，这两个注解和 @Autowired 注解的功用类似<br>@Resource 注解要求提供一个 Bean 名称的属性，若该属性为空，则自动采用标注处的变量或方法名作为 Bean 的名称<br>@Inject 和 @Autowired 注解一样也是按类型匹配注入的 Bean， 但没有 reqired 属性<br>建议使用 @Autowired 注解</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过注解配置 Bean。
    
    </summary>
    
      <category term="Spring 基础" scheme="http://yoursite.com/categories/Spring-%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring 基础" scheme="http://yoursite.com/tags/Spring-%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Spring xml学习</title>
    <link href="http://yoursite.com/2020/04/02/Spring%20xml%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2020/04/02/Spring xml学习/</id>
    <published>2020-04-02T12:19:00.000Z</published>
    <updated>2020-04-07T06:12:29.285Z</updated>
    
    <content type="html"><![CDATA[<p>Spring xml 的一些基本配置。<a id="more"></a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置bean 需要有相对应的setter方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloWord"</span> <span class="attr">class</span>=<span class="string">"HelloWord.HelloWord"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Spring"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置单独的bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"HelloWord.Person"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用构造器来填充数据，需按照属性顺序 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"小丽"</span> &gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"女"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"45000"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 空值填充 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span><span class="tag">&lt;<span class="name">null</span>/&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"HelloWord.Student"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"张三 "</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"男 "</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">value</span>=<span class="string">"2019-1-2"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用ref进行调用定义的bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"person"</span>  <span class="attr">ref</span>=<span class="string">"person"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 使用自动装配(根据名字进行自动装配)  这里还使用了P命名空间(需开启)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">class</span>=<span class="string">"List.Test"</span> <span class="attr">p:name</span>=<span class="string">"测试"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 测试配置的继承 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可以使用bean的 abstract="true" 属性来设置抽象bean，不能被IOC容器实例化 只用来被继承配置--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果没有指定class 必须将Bean设定为抽象Bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address"</span> <span class="attr">class</span>=<span class="string">"List.Address"</span> <span class="attr">p:address</span>=<span class="string">"重庆"</span> <span class="attr">p:street</span>=<span class="string">"万盛"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address2"</span> <span class="attr">class</span>=<span class="string">"List.Address"</span>  <span class="attr">p:street</span>=<span class="string">"渝北"</span> <span class="attr">parent</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">使用bean 的scope 属性来设置bean 的作用域</span></span><br><span class="line"><span class="comment">singleton：默认值，容器初始时创建bean 实例，在整个容器的生命周期内只创建这一个bean，单例的。</span></span><br><span class="line"><span class="comment">prototype：原型的，容器初始化时不创建bean 的实例，而在每次请求时都创建一个新的bean 实例并返回。</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"Person"</span> <span class="attr">class</span>=<span class="string">"HelloWord.Person"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 外部文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:pro.properties"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbc"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 使用外部文件的属性 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;user&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建Spring的IOC 容器对象</span></span><br><span class="line">ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"><span class="comment">//2.从IOC 容器中获取Bean 示例</span></span><br><span class="line">Test test = (Test) ctx.getBean(<span class="string">"test"</span>);</span><br><span class="line">System.out.println(test);</span><br><span class="line"></span><br><span class="line">ApplicationContext ctx1 = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"Student2.xml"</span>);</span><br><span class="line"><span class="comment">//2.从IOC 容器中获取Bean 示例</span></span><br><span class="line">Address test1 = (Address) ctx1.getBean(<span class="string">"address"</span>);</span><br><span class="line">System.out.println(test1);</span><br><span class="line"></span><br><span class="line">test1 = (Address) ctx.getBean(<span class="string">"address2"</span>);</span><br><span class="line">System.out.println(test);</span><br><span class="line"></span><br><span class="line">ApplicationContext ctx2 = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"Student2.xml"</span>);</span><br><span class="line">DataSource dataSource =  (DataSource) ctx2.getBean(<span class="string">"jdbc"</span>);</span><br><span class="line">System.out.println(dataSource.getConnection());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 测试 SpEL: 可以为属性进行动态的赋值(了解) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"girl"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.spring.helloworld.User"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">value</span>=<span class="string">"周迅"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"boy"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.spring.helloworld.User"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"destroy"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">value</span>=<span class="string">"高胜远"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"wifeName"</span> <span class="attr">value</span>=<span class="string">"#&#123;girl.userName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置 bean 后置处理器: 不需要配置 id 属性, IOC 容器会识别到他是一个 bean 后置处理器, 并调用其方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.atguigu.spring.ref.MyBeanPostProcessor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过工厂方法的方式来配置 bean --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1. 通过静态工厂方法: 一个类中有一个静态方法, 可以返回一个类的实例(了解) --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在 class 中指定静态工厂方法的全类名, 在 factory-method 中指定静态工厂方法的方法名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dateFormat"</span> <span class="attr">class</span>=<span class="string">"java.text.DateFormat"</span> <span class="attr">factory-method</span>=<span class="string">"getDateInstance"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可以通过 constructor-arg 子节点为静态工厂方法指定参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2. 实例工厂方法: 先需要创建工厂对象, 再调用工厂的非静态方法返回实例(了解) --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ①. 创建工厂对应的 bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"simpleDateFormat"</span> <span class="attr">class</span>=<span class="string">"java.text.SimpleDateFormat"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"yyyy-MM-dd hh:mm:ss"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ②. 有实例工厂方法来创建 bean 实例 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- factory-bean 指向工厂 bean, factory-method 指定工厂方法(了解) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"datetime"</span> <span class="attr">factory-bean</span>=<span class="string">"simpleDateFormat"</span> <span class="attr">factory-method</span>=<span class="string">"parse"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通过 constructor-arg 执行调用工厂方法需要传入的参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"1990-12-12 12:12:12"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置通过 FactroyBean 的方式来创建 bean 的实例(了解) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.atguigu.spring.ref.UserBean"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring xml 的一些基本配置。
    
    </summary>
    
      <category term="Spring 基础" scheme="http://yoursite.com/categories/Spring-%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Spring 基础" scheme="http://yoursite.com/tags/Spring-%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java反射机制</title>
    <link href="http://yoursite.com/2020/03/29/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2020/03/29/Java反射机制/</id>
    <published>2020-03-29T10:30:40.000Z</published>
    <updated>2020-03-30T02:17:06.669Z</updated>
    
    <content type="html"><![CDATA[<p>反射：框架设计的灵魂<br>     框架：半成品软件。可以在框架的基础上进行软件开发，简化编码<br>     反射：将类的各个组成部分封装为其他对象，这就是反射机制<br>         好处：<br>            1. 可以在程序运行过程中，操作这些对象。<br>            2. 可以解耦，提高程序的可扩展性。<a id="more"></a></p><h1 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h1><p>1.Class.forName(“全类名”)：将字节码文件加载进内存，返回Class对象<br>多用于配置文件，将类名定义在配置文件中。读取文件，加载类<br>2.类名.class：通过类名的属性class获取<br>多用于参数的传递<br>3.对象.getClass()：getClass()方法在Object类中定义着。<br>多用于对象的获取字节码的方式<br> 结论：<br>  同一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象都是同一个。</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> domain.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest1</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取Class对象的方式：</span></span><br><span class="line"><span class="comment"> *   1.Class.forName("全类名")：将字节码文件加载进内存，返回Class对象</span></span><br><span class="line"><span class="comment"> *   2.类名.class：通过类名的属性class获取</span></span><br><span class="line"><span class="comment"> *   3.对象.getClass()：getClass()方法在Object类中定义着</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 1.Class.forName("全类名")</span></span><br><span class="line">Class clasz1 = Class.forName(<span class="string">"domain.Person"</span>);</span><br><span class="line">System.out.println(clasz1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.类名.class</span></span><br><span class="line">Class clasz2 = Person.class;</span><br><span class="line">System.out.println(clasz2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.对象.getClass()</span></span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">Class clasz3 = p.getClass();</span><br><span class="line">System.out.println(clasz3);</span><br><span class="line">System.out.println(clasz1 == clasz2);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Class对象功能"><a href="#Class对象功能" class="headerlink" title="Class对象功能"></a>Class对象功能</h1><h2 id="1-获取成员变量"><a href="#1-获取成员变量" class="headerlink" title="1. 获取成员变量"></a>1. 获取成员变量</h2><p>  Field[] getFields() ：获取所有public修饰的成员变量<br>  Field getField(String name)   获取指定名称的 public修饰的成员变量</p><p>  Field[] getDeclaredFields()  获取所有的成员变量，不考虑修饰符<br>  Field getDeclaredField(String name)  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//getFields()方法只能获取public成员变量</span></span><br><span class="line">Class clasz = Person.class;</span><br><span class="line">Field[] field = clasz.getFields();</span><br><span class="line"><span class="keyword">for</span> (Field field2 : field) &#123;</span><br><span class="line">System.out.println(field2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//getField(String name)获取指定名称的public成员变量</span></span><br><span class="line">Field f = clasz.getField(<span class="string">"a"</span>);</span><br><span class="line">System.out.println(f);</span><br><span class="line"><span class="comment">//获取成员变量的值</span></span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">Object value = f.get(p);</span><br><span class="line">System.out.println(value);</span><br><span class="line"><span class="comment">//设置成员变量的值</span></span><br><span class="line">f.set(p, <span class="string">"张三"</span>);</span><br><span class="line">System.out.println(p);</span><br><span class="line">System.out.println(<span class="string">"--------------------------"</span>);</span><br><span class="line"><span class="comment">//Field[] getDeclaredFields()获取所有的成员变量，不考虑修饰符</span></span><br><span class="line">Field[] field3 = clasz.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span> (Field field2 : field3) &#123;</span><br><span class="line">System.out.println(field2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取指定名称的成员变量</span></span><br><span class="line">f = clasz.getDeclaredField(<span class="string">"Name"</span>);</span><br><span class="line"><span class="comment">//忽略访问权限修饰符的安全检查</span></span><br><span class="line">f.setAccessible(<span class="keyword">true</span>);<span class="comment">//暴力反射</span></span><br><span class="line">System.out.println(f.get(p));</span><br></pre></td></tr></table></figure><h2 id="2-获取构造方法"><a href="#2-获取构造方法" class="headerlink" title="2. 获取构造方法"></a>2. 获取构造方法</h2><p>Constructor&lt;?&gt;[] getConstructors()</p><p>Constructor<t> getConstructor(类&lt;?&gt;… parameterTypes) </t></p><p>Constructor<t> getDeclaredConstructor(类&lt;?&gt;… parameterTypes)</t></p><p>Constructor&lt;?&gt;[] getDeclaredConstructors() </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Class clasz = Person.class;</span><br><span class="line"><span class="comment">//Constructor&lt;?&gt;[] getConstructors() </span></span><br><span class="line">Constructor constructror = clasz.getConstructor(String.class,String.class);</span><br><span class="line">System.out.println(constructror);</span><br><span class="line"><span class="comment">//使用newInstance创建对象</span></span><br><span class="line">Object person = constructror.newInstance(<span class="string">"张三"</span>,<span class="string">"男"</span>);</span><br><span class="line">System.out.println(person);</span><br><span class="line"><span class="comment">//空参构造可以使用Class的newInstance()方法</span></span><br><span class="line">Object o = clasz.newInstance();</span><br><span class="line">System.out.println(o);</span><br></pre></td></tr></table></figure><h2 id="3-获取成员方法"><a href="#3-获取成员方法" class="headerlink" title="3. 获取成员方法"></a>3. 获取成员方法</h2><p>  Method[] getMethods()<br>  Method getMethod(String name, 类&lt;?&gt;… parameterTypes)  </p><p>  Method[] getDeclaredMethods()<br>  Method getDeclaredMethod(String name, 类&lt;?&gt;… parameterTypes)  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class clasz = Person.class;</span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">Method method = clasz.getMethod(<span class="string">"Eat"</span>);</span><br><span class="line">method.invoke(p);</span><br><span class="line">method = clasz.getMethod(<span class="string">"Eat"</span>,String.class);</span><br><span class="line">method.invoke(p,<span class="string">"鸡腿"</span>);</span><br></pre></td></tr></table></figure><h2 id="4-获取全类名"><a href="#4-获取全类名" class="headerlink" title="4. 获取全类名"></a>4. 获取全类名</h2><p>  String getName() </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class clasz = Person.class;</span><br><span class="line">System.out.println(clasz.getName());</span><br></pre></td></tr></table></figure><h1 id="Field：成员变量"><a href="#Field：成员变量" class="headerlink" title="Field：成员变量"></a>Field：成员变量</h1><p>操作：</p><ol><li><p>设置值<br>void set(Object obj, Object value)  </p></li><li><p>获取值<br>get(Object obj) </p></li><li><p>忽略访问权限修饰符的安全检查<br>setAccessible(true):暴力反射</p></li></ol><h1 id="Constructor-构造方法"><a href="#Constructor-构造方法" class="headerlink" title="Constructor:构造方法"></a>Constructor:构造方法</h1><p>创建对象：<br>   T newInstance(Object… initargs)<br>     如果使用空参数构造方法创建对象，操作可以简化：Class对象的newInstance方法</p><h1 id="Method：方法对象"><a href="#Method：方法对象" class="headerlink" title="Method：方法对象"></a>Method：方法对象</h1><ul><li>执行方法：<br>Object invoke(Object obj, Object… args)<br>获取方法名称：<br>String getName:获取方法名</li></ul><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p>   需求：写一个”框架”，不能改变该类的任何代码的前提下，可以帮我们创建任意类的对象，并且执行其中任意方法<br>     实现：<br>       1. 配置文件<br>       2. 反射<br>     步骤：<br>       1. 将需要创建的对象的全类名和需要执行的方法定义在配置文件中<br>       2. 在程序中加载读取配置文件<br>       3. 使用反射技术来加载类文件进内存<br>       4. 创建对象<br>       5. 执行方法</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>   1.配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ClassName=domain.Person</span><br><span class="line">MethodName=Eat</span><br></pre></td></tr></table></figure><p>   2.相关代码<br>Person类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> String a;</span><br><span class="line"><span class="keyword">protected</span> String b;</span><br><span class="line">String c;</span><br><span class="line"><span class="keyword">private</span> String Name;</span><br><span class="line"><span class="keyword">private</span> String Sex;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">Name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">Sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, String sex)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">Name = name;</span><br><span class="line">Sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Person [a="</span> + a + <span class="string">", b="</span> + b + <span class="string">", c="</span> + c + <span class="string">", Name="</span> + Name + <span class="string">", Sex="</span> + Sex + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"eat..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Eat</span><span class="params">(String food)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"eat..."</span>+food);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Student类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Sleep..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   3.实现代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reflec</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line">InputStream in = Reflec.class.getClassLoader().getResourceAsStream(<span class="string">"pro.properties"</span>);</span><br><span class="line">p.load(in);</span><br><span class="line">String ClassName = p.getProperty(<span class="string">"ClassName"</span>);</span><br><span class="line">String MethodName = p.getProperty(<span class="string">"MethodName"</span>);</span><br><span class="line"><span class="comment">//加载进内存</span></span><br><span class="line">Class clasz = Class.forName(ClassName);</span><br><span class="line"><span class="comment">//获取对象</span></span><br><span class="line">Object obj = clasz.newInstance();</span><br><span class="line"><span class="comment">//获取方法对象</span></span><br><span class="line">Method method = clasz.getMethod(MethodName);</span><br><span class="line">method.invoke(obj);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;反射：框架设计的灵魂&lt;br&gt;     框架：半成品软件。可以在框架的基础上进行软件开发，简化编码&lt;br&gt;     反射：将类的各个组成部分封装为其他对象，这就是反射机制&lt;br&gt;         好处：&lt;br&gt;            1. 可以在程序运行过程中，操作这些对象。&lt;br&gt;            2. 可以解耦，提高程序的可扩展性。
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>数据库连接池</title>
    <link href="http://yoursite.com/2020/03/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    <id>http://yoursite.com/2020/03/01/数据库连接池/</id>
    <published>2020-03-01T04:27:15.000Z</published>
    <updated>2020-04-02T06:03:39.001Z</updated>
    
    <content type="html"><![CDATA[<p>这里使用常用的两种创建数据库连接池的方法,dbcp与c3p0<a id="more"></a></p><h1 id="DBCP"><a href="#DBCP" class="headerlink" title="DBCP"></a>DBCP</h1><p>使用 DBCP 数据库连接池， 加入 jar 包(2 个jar 包). 依赖于 Commons Pool。</p><p>配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">username=root</span><br><span class="line">password=123456</span><br><span class="line">driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql://localhost:3306/text</span><br></pre></td></tr></table></figure><p>代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 加载 dbcp 的 properties 配置文件: 配置文件中的键需要来自 BasicDataSource</span></span><br><span class="line"><span class="comment"> * 的属性.</span></span><br><span class="line"><span class="comment"> * 2. 调用 BasicDataSourceFactory 的 createDataSource 方法创建 DataSource</span></span><br><span class="line"><span class="comment"> * 实例</span></span><br><span class="line"><span class="comment"> * 3. 从 DataSource 实例中获取数据库连接. </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDBCPWithDataSourceFactory</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">InputStream inStream = JDBCTest.class.getClassLoader()</span><br><span class="line">.getResourceAsStream(<span class="string">"dbcp.properties"</span>);</span><br><span class="line">properties.load(inStream);</span><br><span class="line"></span><br><span class="line">DataSource dataSource = </span><br><span class="line">BasicDataSourceFactory.createDataSource(properties);</span><br><span class="line">System.out.println(dataSource.getConnection()); </span><br><span class="line"><span class="comment">//需要在配置文件添加相关属性</span></span><br><span class="line"><span class="comment">//BasicDataSource basicDataSource = </span></span><br><span class="line"><span class="comment">//(BasicDataSource) dataSource;</span></span><br><span class="line"><span class="comment">//System.out.println(basicDataSource.getMaxWait()); </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h1><p>C3P0推荐是用xml配置文件，格式为c3p0-config.xml。依赖于mchange-commons-java-0.2.19.jar</p><p>配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">"helloc3p0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定连接数据源的基本属性 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span>jdbc:mysql://localhost:3306/text<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 若数据库中连接数不足时, 一次向数据库服务器申请多少个连接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireIncrement"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 初始化数据库连接池时连接的数量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池中的最小的数据库连接数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池中的最大的数据库连接数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- C3P0 数据库连接池可以维护的 Statement 的个数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 每个连接同时可以使用的 Statement 对象的个数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatementsPerConnection"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testC3poWithConfigFile</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">DataSource dataSource = </span><br><span class="line"><span class="keyword">new</span> ComboPooledDataSource(<span class="string">"helloc3p0"</span>);  </span><br><span class="line">System.out.println(dataSource.getConnection()); </span><br><span class="line">ComboPooledDataSource comboPooledDataSource = </span><br><span class="line">(ComboPooledDataSource) dataSource;</span><br><span class="line"><span class="comment">//System.out.println(comboPooledDataSource.getMaxStatements()); </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里使用常用的两种创建数据库连接池的方法,dbcp与c3p0
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="数据库处理" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>JDBC批量处理</title>
    <link href="http://yoursite.com/2020/02/28/JDBC%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2020/02/28/JDBC批量处理/</id>
    <published>2020-02-28T02:07:46.000Z</published>
    <updated>2020-03-01T04:51:14.748Z</updated>
    
    <content type="html"><![CDATA[<p>测试往数据库插入大量数据时，不同方法的速度<a id="more"></a></p><h1 id="使用-Statement"><a href="#使用-Statement" class="headerlink" title="使用 Statement"></a>使用 Statement</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBatchWithStatement</span><span class="params">()</span></span>&#123;</span><br><span class="line">Connection connection = <span class="keyword">null</span>;</span><br><span class="line">Statement statement = <span class="keyword">null</span>;</span><br><span class="line">String sql = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">connection = JDBCTools.getConnection();</span><br><span class="line">JDBCTools.beginTx(connection);</span><br><span class="line"></span><br><span class="line">statement = connection.createStatement();</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)&#123;</span><br><span class="line">sql = <span class="string">"INSERT INTO customers VALUES("</span> + (i + <span class="number">1</span>) </span><br><span class="line">+ <span class="string">", 'name_"</span> + i + <span class="string">"', '29-6月 -13')"</span>;</span><br><span class="line">statement.addBatch(sql);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Time: "</span> + (end - begin)); <span class="comment">//结果为39567毫秒</span></span><br><span class="line"></span><br><span class="line">JDBCTools.commit(connection);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">JDBCTools.rollback(connection);</span><br><span class="line">&#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">JDBCTools.releaseDB(<span class="keyword">null</span>, statement, connection);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用PreparedStatement"><a href="#使用PreparedStatement" class="headerlink" title="使用PreparedStatement"></a>使用PreparedStatement</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBatchWithPreparedStatement</span><span class="params">()</span></span>&#123;</span><br><span class="line">Connection connection = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">String sql = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">connection = JDBCTools.getConnection();</span><br><span class="line">JDBCTools.beginTx(connection);</span><br><span class="line">sql = <span class="string">"INSERT INTO customers VALUES(?,?,?)"</span>;</span><br><span class="line">preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">Date date = <span class="keyword">new</span> Date(<span class="keyword">new</span> java.util.Date().getTime());</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)&#123;</span><br><span class="line">preparedStatement.setInt(<span class="number">1</span>, i + <span class="number">1</span>);</span><br><span class="line">preparedStatement.setString(<span class="number">2</span>, <span class="string">"name_"</span> + i);</span><br><span class="line">preparedStatement.setDate(<span class="number">3</span>, date);</span><br><span class="line"></span><br><span class="line">preparedStatement.executeUpdate();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Time: "</span> + (end - begin)); <span class="comment">//结果为9819毫秒</span></span><br><span class="line"></span><br><span class="line">JDBCTools.commit(connection);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">JDBCTools.rollback(connection);</span><br><span class="line">&#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">JDBCTools.releaseDB(<span class="keyword">null</span>, preparedStatement, connection);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用preparedStatement-addBatch"><a href="#使用preparedStatement-addBatch" class="headerlink" title="使用preparedStatement.addBatch()"></a>使用preparedStatement.addBatch()</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBatch</span><span class="params">()</span></span>&#123;</span><br><span class="line">Connection connection = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">String sql = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">connection = JDBCTools.getConnection();</span><br><span class="line">JDBCTools.beginTx(connection);</span><br><span class="line">sql = <span class="string">"INSERT INTO customers VALUES(?,?,?)"</span>;</span><br><span class="line">preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">Date date = <span class="keyword">new</span> Date(<span class="keyword">new</span> java.util.Date().getTime());</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)&#123;</span><br><span class="line">preparedStatement.setInt(<span class="number">1</span>, i + <span class="number">1</span>);</span><br><span class="line">preparedStatement.setString(<span class="number">2</span>, <span class="string">"name_"</span> + i);</span><br><span class="line">preparedStatement.setDate(<span class="number">3</span>, date);</span><br><span class="line"></span><br><span class="line"><span class="comment">//"积攒" SQL </span></span><br><span class="line">preparedStatement.addBatch();</span><br><span class="line"></span><br><span class="line"><span class="comment">//当 "积攒" 到一定程度, 就统一的执行一次. 并且清空先前 "积攒" 的 SQL</span></span><br><span class="line"><span class="keyword">if</span>((i + <span class="number">1</span>) % <span class="number">300</span> == <span class="number">0</span>)&#123;</span><br><span class="line">preparedStatement.executeBatch();</span><br><span class="line">preparedStatement.clearBatch();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//若总条数不是批量数值的整数倍, 则还需要再额外的执行一次. </span></span><br><span class="line">preparedStatement.executeBatch();</span><br><span class="line">preparedStatement.clearBatch();</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Time: "</span> + (end - begin)); <span class="comment">//结果为569毫秒</span></span><br><span class="line"></span><br><span class="line">JDBCTools.commit(connection);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">JDBCTools.rollback(connection);</span><br><span class="line">&#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">JDBCTools.releaseDB(<span class="keyword">null</span>, preparedStatement, connection);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;测试往数据库插入大量数据时，不同方法的速度
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="数据库处理" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>关于JSP</title>
    <link href="http://yoursite.com/2020/02/22/%E5%85%B3%E4%BA%8EJSP/"/>
    <id>http://yoursite.com/2020/02/22/关于JSP/</id>
    <published>2020-02-22T05:05:56.000Z</published>
    <updated>2020-02-23T02:05:53.441Z</updated>
    
    <content type="html"><![CDATA[<p>对于JSP在现在这个技术发展的情况下，我认为可以不学习JSP了但可以去了解一下。<br><a href="https://www.zhihu.com/question/305924723/answer/557800752" target="_blank" rel="noopener"><br><font color="red">点击这里</font></a>有详细介绍Java后端现在该怎么学。</p><a id="more"></a><h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><p>  JSP 是简 Servlet 编写的一种技术, 它将 Java 代码和 HTML 语句混合在同一个文件中编写,只对网页中的要动态产生的内容采用 Java 代码来编写，而对固定不变的静态内容采用普通静态 HTML 页面的方式编写。<br>JSP：Java Server Page: Java 服务器端网页. 在 HTML 页面中编写 Java 代码的页面. </p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 新建一个 JSP 页面, 在 body 节点内的 &lt;% %&gt; 即可编写 Java 代码. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;% </span><br><span class="line">Date date = <span class="keyword">new</span> Date();</span><br><span class="line">System.out.print(date); </span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>JSP 可以放置在 WEB 应用程序中的除了 <font color="red">WEB-INF</font> 及其子目录外的其他任何目录中,<br>JSP 页面的访问路径与普通 HTML 页面的访问路径形式也完全一样。</p><h1 id="JSP的运行原理-JSP-本质上是一个-Servlet"><a href="#JSP的运行原理-JSP-本质上是一个-Servlet" class="headerlink" title="JSP的运行原理: JSP 本质上是一个 Servlet."></a>JSP的运行原理: JSP 本质上是一个 Servlet.</h1><p>  每个JSP 页面在第一次被访问时, JSP 引擎将它翻译成一个 Servlet 源程序, 接着再把这个 Servlet 源程序编译成 Servlet 的 class 类文件.<br>然后再由WEB容器（Servlet引擎）像调用普通Servlet程序一样的方式来装载和解释执行这个由JSP页面翻译成的Servlet程序。 </p><h1 id="JSP-页面的隐含变量"><a href="#JSP-页面的隐含变量" class="headerlink" title="JSP 页面的隐含变量"></a>JSP 页面的隐含变量</h1><p>  没有声明就可以使用的对象. JSP页面一共有 9 个隐含对象. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    PageContext pageContext = <span class="keyword">null</span>;</span><br><span class="line">    HttpSession session = <span class="keyword">null</span>;</span><br><span class="line">    ServletContext application = <span class="keyword">null</span>;</span><br><span class="line">    ServletConfig config = <span class="keyword">null</span>;</span><br><span class="line">    JspWriter out = <span class="keyword">null</span>;</span><br><span class="line">    Object page = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用  &lt;% %&gt; 编写的代码在此位置. 可以用到 request, response, pageContext, session</span></span><br><span class="line"><span class="comment">//application, config, out, page 这 8 个隐含对象. (实际上还可以使用一个叫 exception 的隐含对象)</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>①. request: HttpServletRequest 的一个对象. *</p><p>②. response: HttpServletResponse 的一个对象(在 JSP 页面中几乎不会调用 response 的任何方法.)</p><p>③. pageContext: 页面的上下文, 是 PageContext 的一个对象. 可以从该对象中获取到其他 8 个隐含对象. 也可以从中获取到当前<br>页面的其他信息. (自定义标签时使用它) *</p><p>④. session: 代表浏览器和服务器的一次会话, 是 HttpSession 的一个对象. *</p><p>⑤. application: 代表当前 WEB 应用. 是 ServletContext 对象. *</p><p>⑥. config: 当前 JSP 对应的 Servlet 的 ServletConfig 对象(几乎不使用). 若需要访问当前 JSP 配置的初始化参数,<br>需要通过映射的地址才可以.</p><p>映射 JSP:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hellojsp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">jsp-file</span>&gt;</span>/hello.jsp<span class="tag">&lt;/<span class="name">jsp-file</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>test<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>testValue<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hellojsp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hellojsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>⑦. out: JspWriter 对象. 调用 out.println() 可以直接把字符串打印到浏览器上. *</p><p>⑧. page: 指向当前 JSP 对应的 Servlet 对象的引用, 但为 Object 类型, 只能调用 Object 类的方法(几乎不使用) </p><p>⑨. exception: 在声明了 page 指令的 isErrorPage=”true” 时, 才可以使用. *</p><p>&lt;%@ page isErrorPage=”true” %&gt;</p><p>pageContext, request, session, application(对属性的作用域的范围从小到大)<br>out, response, config, page<br>exception</p><h1 id="JSP模版元素"><a href="#JSP模版元素" class="headerlink" title="JSP模版元素"></a>JSP模版元素</h1><p>JSP页面中的静态HTML内容称 </p><h1 id="JSP表达式（expression）"><a href="#JSP表达式（expression）" class="headerlink" title="JSP表达式（expression）"></a>JSP表达式（expression）</h1><p>提供了将一个 java 变量或表达式的计算结果输出到客户端的简化方式，它将要输出的变量或表达式直接封装在&lt;%= 和 %&gt;之中。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;% </span><br><span class="line">Date date = <span class="keyword">new</span> Date();</span><br><span class="line">out.print(date);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%= date %&gt;</span><br></pre></td></tr></table></figure><h1 id="JSP脚本片断（scriptlet）"><a href="#JSP脚本片断（scriptlet）" class="headerlink" title="JSP脚本片断（scriptlet）"></a>JSP脚本片断（scriptlet）</h1><p>指嵌套在&lt;% 和 %&gt;之中的一条或多条Java程序代码，多个脚本片断中的代码可以相互访问</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;% </span><br><span class="line">String ageStr = request.getParameter(<span class="string">"age"</span>);</span><br><span class="line">Integer age = Integer.parseInt(ageStr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(age &gt;= <span class="number">18</span>)&#123;</span><br><span class="line">%&gt;</span><br><span class="line">成人...</span><br><span class="line">&lt;%</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">%&gt;</span><br><span class="line">未成人...</span><br><span class="line">&lt;%</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h1 id="JSP-声明"><a href="#JSP-声明" class="headerlink" title="JSP 声明"></a>JSP 声明</h1><p>  JSP 声明将 Java 代码封装在&lt;%！和 %&gt;之中，它里面的代码将被插入进 Servle t的 _jspService 方法的外面(在 JSP 页面中几乎从不这样使用)</p><h1 id="JSP注释的格式"><a href="#JSP注释的格式" class="headerlink" title="JSP注释的格式"></a>JSP注释的格式</h1><p>“&lt;%– JSP 注释 –%&gt;” “<!-- HTML 注释 -->“<br>区别: JSP 注释可以阻止 Java 代码的执行. </p><h1 id="域对象的属性操作"><a href="#域对象的属性操作" class="headerlink" title="域对象的属性操作"></a>域对象的属性操作</h1><p>方法：<br>void setAttribute(String name, Object o): 设置属性  </p><p>Object getAttribute(String name): 获取指定的属性</p><p>Enumeration getAttributeNames(): 获取所有的属性的名字组成的 Enumeration 对象</p><p>removeAttribute(String name): 移除指定的属性<br>pageContext, request, session, application 对象都有这些方法，这四个对象也称之为域对象. </p><p>pageContext: 属性的作用范围仅限于当前 JSP 页面<br>request:  属性的作用范围仅限于同一个请求.<br>session: 属性的作用范围限于一次会话: 浏览器打开直到关闭称之为一次会话(在此期间会话不失效)<br>application: 属性的作用范围限于当前 WEB 应用. 是范围最大的属性作用范围, 只要在一处设置属性, 在其他各处的 JSP 或 Servlet 中<br>都可以获取到. </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于JSP在现在这个技术发展的情况下，我认为可以不学习JSP了但可以去了解一下。&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/question/305924723/answer/557800752&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;br&gt;&lt;font color=&quot;red&quot;&gt;点击这里&lt;/font&gt;&lt;/a&gt;有详细介绍Java后端现在该怎么学。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JSP" scheme="http://yoursite.com/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>如何在 Serlvet 中获取请求信息</title>
    <link href="http://yoursite.com/2020/02/20/GET%E8%AF%B7%E6%B1%82%E4%B8%8EPOST%E8%AF%B7%E6%B1%82/"/>
    <id>http://yoursite.com/2020/02/20/GET请求与POST请求/</id>
    <published>2020-02-20T06:30:30.000Z</published>
    <updated>2020-03-02T01:43:46.797Z</updated>
    
    <content type="html"><![CDATA[<p>在我们获取信息前需要了解GET请求和POST请求是HTTP请求的两种基本方法。<a id="more"></a></p><h1 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h1><p>使用GET请求方式传递参数：<br>①. 在浏览器地址栏中输入某个URL地址或单击网页上的一个超链接时，浏览器发出的HTTP请求消息的请求方式为GET。<br>②. 如果网页中的form表单元素的 method 属性被设置为了“GET”，浏览器提交这个FORM表单时生成的HTTP请求消息的请求方式也为GET。<br>③. 使用GET请求方式给WEB服务器传递参数的格式</p><h1 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h1><p>使用 POST 方式传递参数:<br>①. POST 请求方式主要用于向 WEB 服务器端程序提交 FORM 表单中的数据: form 表单的 method 置为 POST<br>②. POST 方式将各个表单字段元素及其数据作为 HTTP 消息的实体内容发送给 WEB 服务器，传送的数据量要比使用GET方式传送的数据量大得多。 </p><h1 id="如何在-Serlvet-中获取请求信息"><a href="#如何在-Serlvet-中获取请求信息" class="headerlink" title="如何在 Serlvet 中获取请求信息"></a>如何在 Serlvet 中获取请求信息</h1><p>  Servlet 的 service() 方法用于应答请求: 因为每次请求都会调用 service() 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest request, ServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function"><span class="comment">/* ServletRequest: 封装了请求信息. 可以从中获取到任何的请求信息.</span></span></span><br><span class="line"><span class="function"><span class="comment">   ServletResponse: 封装了响应信息, 如果想给用户什么响应, 具体可以使用该接口的方法实现. </span></span></span><br><span class="line"><span class="function"><span class="comment">   这两个接口的实现类都是服务器给予实现的, 并在服务器调用 service 方法时传入. </span></span></span><br><span class="line"><span class="function"><span class="comment">*/</span></span></span><br></pre></td></tr></table></figure><h2 id="ServletRequest的方法"><a href="#ServletRequest的方法" class="headerlink" title="ServletRequest的方法"></a>ServletRequest的方法</h2><p>html文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"loginServlet"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">user: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user"</span>/&gt;</span></span><br><span class="line">password:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">ceshi:</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"ceshi"</span> <span class="attr">value</span>=<span class="string">"reading"</span>/&gt;</span>Reading</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"ceshi"</span> <span class="attr">value</span>=<span class="string">"game"</span>/&gt;</span>Game</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"ceshi"</span> <span class="attr">value</span>=<span class="string">"party"</span>/&gt;</span>Party</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"ceshi"</span> <span class="attr">value</span>=<span class="string">"sport"</span>/&gt;</span>Sport</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"ceshi"</span> <span class="attr">value</span>=<span class="string">"tv"</span>/&gt;</span>TV</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>xml文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>TTT.Login<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/loginServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//获取参数名的值</span></span><br><span class="line">String st = request.getParameter(<span class="string">"user"</span>);</span><br><span class="line">System.out.println(st);</span><br><span class="line"><span class="comment">//一个参数名对应多个参数值</span></span><br><span class="line">String[] ceshi = request.getParameterValues(<span class="string">"ceshi"</span>);</span><br><span class="line"><span class="keyword">for</span>(String st1 : ceshi) &#123;</span><br><span class="line">System.out.println(st1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//HttpServletRequest: 是 SerlvetRequest 的子接口. 针对于 HTTP 请求所定义. 里边包含了大量获取 HTTP 请求相关的方法.</span></span><br><span class="line">HttpServletRequest httpServletRequest = (HttpServletRequest) request;</span><br><span class="line"><span class="comment">//获取URL</span></span><br><span class="line">String requestURI = httpServletRequest.getRequestURI();</span><br><span class="line">System.out.println(requestURI); </span><br><span class="line"><span class="comment">//获取请求方式</span></span><br><span class="line">String method = httpServletRequest.getMethod();</span><br><span class="line">System.out.println(method); </span><br><span class="line"><span class="comment">//若是一个 GET 请求, 获取请求参数对应的那个字符串, 即 ? 后的那个字符串. </span></span><br><span class="line">String queryString = httpServletRequest.getQueryString();</span><br><span class="line">System.out.println(queryString);</span><br><span class="line"><span class="comment">//获取请求的 Serlvet 的映射路径 </span></span><br><span class="line">String servletPath = httpServletRequest.getServletPath();</span><br><span class="line">   System.out.println(servletPath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><blockquote><p>123<br>reading game party<br>/JavaWeb_Study/loginServlet<br>POST<br>null<br>/loginServlet</p></blockquote><h1 id="ServletResponse的方法"><a href="#ServletResponse的方法" class="headerlink" title="ServletResponse的方法"></a>ServletResponse的方法</h1><p>①getWriter(): 返回 PrintWriter 对象. 调用该对象的 print() 方法, 将把 print() 中的参数直接打印<br>到客户的浏览器上. getOutputStream()，一般用来输出二进制内容，例如图片。getWriter()，用来输出文本类型的内容，如HTML和纯文本。<br>文本输出情况下需设置编码类型，在调用response.getWriter()前，我们必须设置content type</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">"text/html; charset=GBK"</span>);</span><br></pre></td></tr></table></figure><p>②设置响应的内容类型: response.setContentType(“application/msword”);<br>③void sendRedirect(String location): 请求的重定向. (此方法为 HttpServletResponse 中定义.)</p><h1 id="请求的转发和重定向"><a href="#请求的转发和重定向" class="headerlink" title="请求的转发和重定向"></a>请求的转发和重定向</h1><p>本质区别: 请求的转发只发出了一次请求, 而重定向则发出了两次请求. </p><p>具体:</p><p>①. 请求的转发: 地址栏是初次发出请求的地址.<br>       请求的重定向: 地址栏不再是初次发出的请求地址. 地址栏为最后响应的那个地址 </p><p>②. 请求转发: 在最终的 Servlet 中, request 对象和中转的那个 request 是同一个对象.<br>       请求的重定向: 在最终的 Servlet 中, request 对象和中转的那个 request 不是同一个对象.       </p><p>③. 请求的转发: 只能转发给当前 WEB 应用的的资源<br>       请求的重定向: 可以重定向到任何资源. </p><p>④. 请求的转发: / 代表的是当前 WEB 应用的根目录<br>       请求的重定向: / 代表的是当前 WEB 站点的根目录. </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在我们获取信息前需要了解GET请求和POST请求是HTTP请求的两种基本方法。
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>ServletConfig对象以及方法</title>
    <link href="http://yoursite.com/2020/02/18/ServletConfig%E5%AF%B9%E8%B1%A1%E4%BB%A5%E5%8F%8A%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2020/02/18/ServletConfig对象以及方法/</id>
    <published>2020-02-18T04:12:34.000Z</published>
    <updated>2020-02-20T06:26:49.058Z</updated>
    
    <content type="html"><![CDATA[<p>ServletConfig对象对应web.xml文件中的<servlet>元素，在Servlet的配置文件web.xml中，可以使用一个或多个<init-param>标签为servlet配置一些初始化参数，然后使用ServletConfig对象中的方法一一获取。<a id="more"></a></init-param></servlet></p><h1 id="通过ServletConfig获取Servlet的初始化参数"><a href="#通过ServletConfig获取Servlet的初始化参数" class="headerlink" title="通过ServletConfig获取Servlet的初始化参数"></a>通过ServletConfig获取Servlet的初始化参数</h1><p>　当servlet配置了初始化参数后，web容器在创建servlet实例对象时，会自动将这些初始化参数封装到ServletConfig对象中，并在调用servlet的init方法时，将ServletConfig对象传递给servlet。进而，我们通过ServletConfig对象就可以得到当前servlet的初始化参数信息。</p><h2 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是获取servlet的配置信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"><span class="comment">/*getInitParameter("参数名")用于获取参数值*/</span></span><br><span class="line">String user = config.getInitParameter(<span class="string">"user"</span>);</span><br><span class="line">String user1 = config.getInitParameter(<span class="string">"root"</span>);</span><br><span class="line">System.out.println(<span class="string">"user:"</span> + user);System.out.println(<span class="string">"user:"</span> + user1);</span><br><span class="line"><span class="comment">/*getInitParameterNames()用于获取参数名*/</span></span><br><span class="line">Enumeration&lt;String&gt; name = config.getInitParameterNames();</span><br><span class="line"><span class="keyword">while</span>(name.hasMoreElements()) &#123;</span><br><span class="line">String name1 = name.nextElement();</span><br><span class="line">System.out.println(<span class="string">"password:"</span> + name1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*getServletName()用于获取服务器名称(了解即可)*/</span></span><br><span class="line">String ServletName = config.getServletName();</span><br><span class="line">System.out.println(ServletName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Web-xml"><a href="#Web-xml" class="headerlink" title="Web.xml"></a>Web.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置和映射 Servlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Servlet 注册的名字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletConfig_Study<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Servlet 的全类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>TTT.ServletConfig_Study<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置 Serlvet 的初始化参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 参数名由 getInitParameterNames()方法获取 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>user<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 参数值由 getInitParameter("参数名") 方法获取--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>123<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>root<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>464<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行结果如下：</p><blockquote><p>user:123<br>user:464<br>password:root<br>password:user<br>ServletConfig_Study</p></blockquote><h1 id="ServletConfig对象的方法"><a href="#ServletConfig对象的方法" class="headerlink" title="ServletConfig对象的方法"></a>ServletConfig对象的方法</h1><p> getInitParameterNames()方法、getInitParameter()方法、getServletName()方法、getServletContext()方法，getServletContext()方法非常重要。</p><h2 id="getInitParameterNames-方法"><a href="#getInitParameterNames-方法" class="headerlink" title="getInitParameterNames()方法"></a>getInitParameterNames()方法</h2><p>  getInitParameterNames()方法用于获取参数的名字，返回值为Enumeration<e>类型。<br>  例子:</e></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Enumeration&lt;String&gt; name = config.getInitParameterNames();</span><br><span class="line"><span class="keyword">while</span>(name.hasMoreElements()) &#123;</span><br><span class="line">String name1 = name.nextElement();</span><br><span class="line">System.out.println(<span class="string">"password:"</span> + name1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="getInitParameter-方法"><a href="#getInitParameter-方法" class="headerlink" title="getInitParameter()方法"></a>getInitParameter()方法</h2><p>getInitParameter()方法用于获取参数名的值，返回值为String类型。<br>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String user = config.getInitParameter(<span class="string">"user"</span>);</span><br></pre></td></tr></table></figure><h2 id="getServletName-方法"><a href="#getServletName-方法" class="headerlink" title="getServletName()方法"></a>getServletName()方法</h2><p>getServletName()用于获取服务器名称(了解即可)，返回值String类型。<br>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String ServletName = config.getServletName();</span><br></pre></td></tr></table></figure><h2 id="getServletContext-方法"><a href="#getServletContext-方法" class="headerlink" title="getServletContext()方法"></a>getServletContext()方法</h2><p>  ServletContext 可以由  SerlvetConfig对象 获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//config是 SerlvetConfig对象</span></span><br><span class="line">ServletContext servletContext = config.getServletContext();</span><br></pre></td></tr></table></figure><p>该对象代表当前 WEB 应用: 可以认为 SerlvetContext 是当前 WEB 应用的一个大管家. 可以从中获取到当前 WEB 应用的各个方面的信息.</p><h3 id="①获取当前-Web-应用的初始化参数"><a href="#①获取当前-Web-应用的初始化参数" class="headerlink" title="①获取当前 Web 应用的初始化参数"></a>①获取当前 Web 应用的初始化参数</h3><p> 设置初始化参数: 可以为所有的 Servlet 所获取, 而 Servlet 的初始化参数只用那个 Serlvet 可以获取. </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置当前 Web 应用的初始化参数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 上下文的参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 参数名由 getInitParameterNames()方法获取 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>driver<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 参数值由 getInitParameter("参数名") 方法获取--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>jdbcurl<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/text<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取ServletContext对象</span></span><br><span class="line">ServletContext servletContext = config.getServletContext();</span><br><span class="line"><span class="comment">//getInitParameter("参数名")用于获取参数值</span></span><br><span class="line">String driver = servletContext.getInitParameter(<span class="string">"driver"</span>);</span><br><span class="line">String jdbcurl = servletContext.getInitParameter(<span class="string">"jdbcurl"</span>);</span><br><span class="line">System.out.println(<span class="string">"driver:"</span> + driver);System.out.println(<span class="string">"jdbcurl:"</span> + jdbcurl);</span><br><span class="line"><span class="comment">//getInitParameterNames()用于获取参数名</span></span><br><span class="line">Enumeration&lt;String&gt; n = servletContext.getInitParameterNames();</span><br><span class="line"><span class="keyword">while</span>(n.hasMoreElements()) &#123;</span><br><span class="line">String name1 = n.nextElement();</span><br><span class="line">System.out.println(<span class="string">"name:"</span> + name1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><blockquote><p>driver:com.mysql.jdbc.Driver<br>jdbcurl:jdbc:mysql://localhost:3306/text<br>name:driver<br>name:jdbcurl</p></blockquote><h3 id="②获取当前-WEB-应用的某一个文件在服务器上的绝对路径-而不是部署前的路径"><a href="#②获取当前-WEB-应用的某一个文件在服务器上的绝对路径-而不是部署前的路径" class="headerlink" title="②获取当前 WEB 应用的某一个文件在服务器上的绝对路径, 而不是部署前的路径"></a>②获取当前 WEB 应用的某一个文件在服务器上的绝对路径, 而不是部署前的路径</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tring realPath = servletContext.getRealPath(<span class="string">"/note.txt"</span>);</span><br><span class="line">System.out.println(realPath);</span><br></pre></td></tr></table></figure><h3 id="③获取当前-WEB-应用的名称"><a href="#③获取当前-WEB-应用的名称" class="headerlink" title="③获取当前 WEB 应用的名称"></a>③获取当前 WEB 应用的名称</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String contextPath = servletContext.getContextPath();</span><br><span class="line">System.out.println(contextPath);</span><br></pre></td></tr></table></figure><h3 id="④获取当前-WEB-应用的某一个文件对应的输入流"><a href="#④获取当前-WEB-应用的某一个文件对应的输入流" class="headerlink" title="④获取当前 WEB 应用的某一个文件对应的输入流."></a>④获取当前 WEB 应用的某一个文件对应的输入流.</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//getResourceAsStream(String path): path 的 / 为当前 WEB 应用的根目录. </span></span><br><span class="line">InputStream is2 = servletContext.getResourceAsStream(<span class="string">"/WEB-INF/classes/jdbc.properties"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ServletConfig对象对应web.xml文件中的&lt;servlet&gt;元素，在Servlet的配置文件web.xml中，可以使用一个或多个&lt;init-param&gt;标签为servlet配置一些初始化参数，然后使用ServletConfig对象中的方法一一获取。
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>Servlet生命周期</title>
    <link href="http://yoursite.com/2020/02/15/Servlet%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://yoursite.com/2020/02/15/Servlet生命周期/</id>
    <published>2020-02-15T01:36:06.000Z</published>
    <updated>2020-02-15T01:56:24.112Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h1><p>   Servlet生命周期由构造器、init方法、service方法和destroy方法组成。<a id="more"></a></p><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><p>   只被调用一次，只有第一次请求Servlet时，创建Servlet的实例，调用构造器。</p><h2 id="init方法"><a href="#init方法" class="headerlink" title="init方法"></a>init方法</h2><p>   只被调用一次，再创建好实例后立即被调用，用于初始当前的Servlet。</p><h2 id="service方法"><a href="#service方法" class="headerlink" title="service方法"></a>service方法</h2><p>   被多次调用，每次请求都会调用service方法。实际用于响应请求的。</p><h2 id="destroy方法"><a href="#destroy方法" class="headerlink" title="destroy方法"></a>destroy方法</h2><p>   只被调用一次，在当前Servlet所在的WEB应用被卸载前调用，用于释放当前Servlet所占用的资源。</p><h1 id="load-on-startup"><a href="#load-on-startup" class="headerlink" title="load-on-startup"></a>load-on-startup</h1><p>  补充说一下，load-on-startup可以指定Servlet被创建的时机，若为负数，则在第一次请求时被创建，若为0或正数，则在当前WEB应用被调用Servlet<br>容器加载时创建实例，且数字越小越早被创建。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;load-on-startup&gt;任意数字&lt;/load-on-startup&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Servlet生命周期&quot;&gt;&lt;a href=&quot;#Servlet生命周期&quot; class=&quot;headerlink&quot; title=&quot;Servlet生命周期&quot;&gt;&lt;/a&gt;Servlet生命周期&lt;/h1&gt;&lt;p&gt;   Servlet生命周期由构造器、init方法、service方法和destroy方法组成。
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>MySQL存储过程的语法</title>
    <link href="http://yoursite.com/2019/09/19/MySQL%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E7%9A%84%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2019/09/19/MySQL存储过程的语法/</id>
    <published>2019-09-19T12:04:56.000Z</published>
    <updated>2019-09-19T12:05:59.990Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL存储过程的语法"><a href="#MySQL存储过程的语法" class="headerlink" title="MySQL存储过程的语法"></a>MySQL存储过程的语法</h1><p>  含义：一组预先编译好的SQL语句的集合，理解成批处理语句<a id="more"></a></p><h1 id="创建语法"><a href="#创建语法" class="headerlink" title="创建语法"></a>创建语法</h1><p>create procedure 存储过程名(参数列表)<br>begin<br>       存储过程体(一组合法的SQL语句)<br>end</p><h1 id="调用语法"><a href="#调用语法" class="headerlink" title="调用语法"></a>调用语法</h1><p>call 存储过程名(实参列表);</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>1、参数列表包含三部分<br>参数模式  参数名  参数类型<br>举例：<br>IN stuname varchar(20)</p><p>参数模式：<br>IN：该参数可以作为输入，也就是该参数需要调用方传入值</p><p>OU：该参数可以作为输出，也就是该参数可以作为返回值</p><p>INOUT：既可以输入也可以输出，也就是该参数既需要传入值，又可以返回值</p><p>2、如果存储过程体仅仅只有一句话，begin  end可以省略。</p><p>存储过程体中的每条SQL语句的结尾要求必须加分号。</p><p>存储过程体中的结尾可以使用 delimiter 重新设置。<br>语法：<br>delimiter 结束标记<br>案例：<br>delimiter *</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="空参列表（不带参数）"><a href="#空参列表（不带参数）" class="headerlink" title="空参列表（不带参数）"></a>空参列表（不带参数）</h2><p>插入2条记录到admin表中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">delimiter *</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> c()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">admin</span>(<span class="keyword">name</span>,<span class="string">'password'</span>)</span><br><span class="line"><span class="keyword">values</span>(<span class="string">'jack'</span>,<span class="number">123456</span>),(<span class="string">'rose'</span>,<span class="number">678910</span>);</span><br><span class="line"><span class="keyword">end</span> *</span><br><span class="line"></span><br><span class="line">调用</span><br><span class="line"><span class="keyword">call</span> c()*</span><br></pre></td></tr></table></figure><h2 id="带in模式参数模式的存储过程"><a href="#带in模式参数模式的存储过程" class="headerlink" title="带in模式参数模式的存储过程"></a>带in模式参数模式的存储过程</h2><p>创建存储过程实现  根据女生名字，查询对应的男朋友信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> c1(<span class="keyword">in</span> beautyname <span class="built_in">varchar</span>(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line"><span class="keyword">select</span> bo.* <span class="keyword">from</span> boys bo <span class="keyword">right</span> <span class="keyword">join</span> beauty b <span class="keyword">on</span> bo.id=b.boyfriend_id</span><br><span class="line"><span class="keyword">where</span> b.name=beautyname;</span><br><span class="line"><span class="keyword">end</span> *</span><br><span class="line"></span><br><span class="line">调用</span><br><span class="line"><span class="keyword">call</span> c1(<span class="string">'苍井空'</span>)* (这里可能报错，是字符集问题，可以修改字符集：<span class="keyword">set</span> <span class="keyword">names</span> gbk)</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">names</span> gbk*</span><br></pre></td></tr></table></figure><h2 id="带out模式的存储过程"><a href="#带out模式的存储过程" class="headerlink" title="带out模式的存储过程"></a>带out模式的存储过程</h2><p>根据女生名字，返回男朋友信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> c2(<span class="keyword">in</span> beautyname <span class="built_in">varchar</span>(<span class="number">10</span>),<span class="keyword">out</span> boyname <span class="built_in">varchar</span>(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">select</span> bo.boyname <span class="keyword">from</span> boys bo <span class="keyword">inner</span> <span class="keyword">join</span> beauty b <span class="keyword">on</span> bo.id=b.boyfriend_id</span><br><span class="line"><span class="keyword">where</span> b.name=beautyname;</span><br><span class="line"><span class="keyword">end</span> *</span><br><span class="line"></span><br><span class="line">调用</span><br><span class="line"><span class="keyword">set</span> @bName* (定义用户变量)</span><br><span class="line"><span class="keyword">call</span> c2(<span class="string">'苍井空'</span>,@bName)*</span><br><span class="line"><span class="keyword">select</span> @bName*</span><br></pre></td></tr></table></figure><h2 id="带inout模式参数的存储过程"><a href="#带inout模式参数的存储过程" class="headerlink" title="带inout模式参数的存储过程"></a>带inout模式参数的存储过程</h2><p>传入a和b两个值，最终a和b都翻倍并返回</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">creat procedure c3(inout a int,inout b int)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">set</span> a=a*<span class="number">2</span>;  <span class="comment"># 局部变量赋值</span></span><br><span class="line"><span class="keyword">set</span> b=b*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">end</span>*</span><br><span class="line"></span><br><span class="line">调用</span><br><span class="line"><span class="keyword">set</span> @m=<span class="number">10</span>*</span><br><span class="line"><span class="keyword">set</span> @g=<span class="number">20</span>*</span><br><span class="line"><span class="keyword">call</span> c3(@m,@g)*</span><br><span class="line"><span class="keyword">select</span> @m,@g;</span><br></pre></td></tr></table></figure><h1 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h1><p>语法：drop procedure 存储过程名称 #一次只能删除一个。</p><h1 id="查看存储过程的信息"><a href="#查看存储过程的信息" class="headerlink" title="查看存储过程的信息"></a>查看存储过程的信息</h1><p>show create procedure c;</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MySQL存储过程的语法&quot;&gt;&lt;a href=&quot;#MySQL存储过程的语法&quot; class=&quot;headerlink&quot; title=&quot;MySQL存储过程的语法&quot;&gt;&lt;/a&gt;MySQL存储过程的语法&lt;/h1&gt;&lt;p&gt;  含义：一组预先编译好的SQL语句的集合，理解成批处理语句
    
    </summary>
    
      <category term="MySQL数据库" scheme="http://yoursite.com/categories/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL数据库" scheme="http://yoursite.com/tags/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库之事务</title>
    <link href="http://yoursite.com/2019/09/04/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E4%BA%8B%E5%8A%A1/"/>
    <id>http://yoursite.com/2019/09/04/MySQL数据库之事务/</id>
    <published>2019-09-04T15:30:00.000Z</published>
    <updated>2019-09-04T15:35:41.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>数据库的事务。<a id="more"></a></p><h2 id="事务基本概念"><a href="#事务基本概念" class="headerlink" title="事务基本概念"></a>事务基本概念</h2><p>一组要么同时执行成功，要么同时执行失败的SQL语句，是数据库操作的一个执行单元。</p><h2 id="事物开始于"><a href="#事物开始于" class="headerlink" title="事物开始于"></a>事物开始于</h2><p>连接到数据库上，并执行一条DML语句(INSERT、UPDATE或DELETE)</p><p>前一个事务结束后，又输入了另一条DML语句。</p><h2 id="事务结束于"><a href="#事务结束于" class="headerlink" title="事务结束于"></a>事务结束于</h2><p>执行COMMIT或ROLLBAC。</p><p>执行一条DDL语句，例如CREATE TABLE或；在这种情况下，会自动执行COMMIT语句。</p><p>执行一条DCL语句，例如GRANT语句；在这种情况下，会自动执行COMMIT语句。</p><p>断开与数据库的连接。</p><p>执行了一套DML，该语句却失败了；在这种情况中，会为这个无效的DML语句执行ROLLBACK语句。</p><h1 id="事务的四大特点-ACID"><a href="#事务的四大特点-ACID" class="headerlink" title="事务的四大特点(ACID)"></a>事务的四大特点(ACID)</h1><p>atomicity（原子性）<br>·表示一个事务内的所有操作是一个整体，要么全部成功，要么全失败；</p><p>consistency（一致性）<br>·表示一个事务内有一个操作失败时，所有的更改过的数据都必须回滚到修改前的状态。</p><p>isolation（隔离性）<br>·事务查看数据时数据所处的状态，要么是另一并发事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看中间状态的数据。</p><p>durability（持久性）<br>·持久性事务完成之后，它对于系统的影响是永久性的。</p><h1 id="事务隔离级别从低到高"><a href="#事务隔离级别从低到高" class="headerlink" title="事务隔离级别从低到高"></a>事务隔离级别从低到高</h1><p>读取未提交（Read Uncommitted）</p><p>读取已提交（Read Committed）</p><p>可重复读（Repeatable Read）</p><p>序列化（serializable）</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;事务&quot;&gt;&lt;a href=&quot;#事务&quot; class=&quot;headerlink&quot; title=&quot;事务&quot;&gt;&lt;/a&gt;事务&lt;/h1&gt;&lt;p&gt;数据库的事务。
    
    </summary>
    
      <category term="MySQL数据库" scheme="http://yoursite.com/categories/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL数据库" scheme="http://yoursite.com/tags/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>GOF23设计模式（完）</title>
    <link href="http://yoursite.com/2019/08/31/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%AE%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/31/GOF23设计模式（完）/</id>
    <published>2019-08-31T12:27:56.000Z</published>
    <updated>2019-08-31T12:36:40.367Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GOF23设计模式总结"><a href="#GOF23设计模式总结" class="headerlink" title="GOF23设计模式总结"></a>GOF23设计模式总结</h1><h1 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h1><p> 单例模式、工厂模式、建造者模式、原型模式。</p><h1 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h1><p> 装饰模式、享元模式、桥接模式、组合模式、外观模式、代理模式、适配器模式。</p><h1 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h1><p> 模板方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、策略模式、状态模式、责任链模式、访问者模式。</p><a id="more"></a><h1 id="创建型模式-1"><a href="#创建型模式-1" class="headerlink" title="创建型模式"></a>创建型模式</h1><p>  关注对象的创建过程。</p><h2 id="单例模式-Singleton"><a href="#单例模式-Singleton" class="headerlink" title="单例模式(Singleton)"></a>单例模式(Singleton)</h2><p> 保证一个类只有一个实例，并且提供一个访问该实例的全局访问点。</p><h2 id="工厂模式-Factory"><a href="#工厂模式-Factory" class="headerlink" title="工厂模式(Factory)"></a>工厂模式(Factory)</h2><p> 实例化对象，用工厂方法代替new操作。<br> 将选择实现类、创建对象统一管理和控制。从而将调用者跟我们的实现类解耦。</p><h2 id="建造者模式-Builder"><a href="#建造者模式-Builder" class="headerlink" title="建造者模式(Builder)"></a>建造者模式(Builder)</h2><p> 具体的建造者类之间是相互独立的，容易扩展。</p><h2 id="原型模式-Prototype"><a href="#原型模式-Prototype" class="headerlink" title="原型模式(Prototype)"></a>原型模式(Prototype)</h2><p> 扩展性好，由于写原型模式的时候使用了抽象原型类，在客户端进行编程的时候可以将具体的原型类通过配置进行读取。</p><h1 id="结构型模式-1"><a href="#结构型模式-1" class="headerlink" title="结构型模式"></a>结构型模式</h1><p>关注对象和类的组织。</p><h2 id="适配器-Adapter-模式"><a href="#适配器-Adapter-模式" class="headerlink" title="适配器(Adapter)模式"></a>适配器(Adapter)模式</h2><p> 将一个类的接口转换成客户希望的另外一个接口，Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以在一起工作。</p><h2 id="代理模式-Proxy-pattern"><a href="#代理模式-Proxy-pattern" class="headerlink" title="代理模式(Proxy pattern)"></a>代理模式(Proxy pattern)</h2><p> 通过代理，控制对对象的访问。</p><h2 id="桥接模式-bridge"><a href="#桥接模式-bridge" class="headerlink" title="桥接模式(bridge)"></a>桥接模式(bridge)</h2><p> 桥接模式可以取代多层继承的方案。多层继承违背了单一职责原则，复用性较差，类的个数也非常多。桥接模式可以极大的减少子类的个数，从而降低管理和维护的成本。<br> 桥接模式极大提高了系统可扩展性，在两个变化维度中任意扩展一个维度，都不需要修改原有的系统，符合开闭原则。</p><h2 id="组合模式-composite"><a href="#组合模式-composite" class="headerlink" title="组合模式(composite)"></a>组合模式(composite)</h2><p> 抽象构件(Component)角色：定义了叶子和容器构件的共同点。<br> 叶子(Leaf)构件角色：无子节点。<br> 容器(Composite)构件角色：有容器特征，可以包含子节点。</p><h2 id="装饰模式-decorator"><a href="#装饰模式-decorator" class="headerlink" title="装饰模式(decorator)"></a>装饰模式(decorator)</h2><p> 动态的为一个对象增加新功能。<br> 装饰模式是一种用于代替继承的技术，无需通过继承增加子类就能扩展对象的新功能。使用对象的关联关系代替继承关系，更加灵活，同时避免类型体系的快速膨胀。</p><h2 id="外观模式-Facade"><a href="#外观模式-Facade" class="headerlink" title="外观模式(Facade)"></a>外观模式(Facade)</h2><p> 为子系统提供统一的入口，封装子系统的复杂性，便于客户端调用。</p><h2 id="享元模式-FlyWeight"><a href="#享元模式-FlyWeight" class="headerlink" title="享元模式(FlyWeight)"></a>享元模式(FlyWeight)</h2><p> 享元模式以共享的方式高效地支持大量细粒度对象的重用。<br> 享元对象能做到共享的关键是区分了内部状态和外部状态<br>  ·内部状态：可以共享，不会随环境变化而改变<br>  ·外部状态：不可以共享，会随环境变化而改变</p><h1 id="行为型模式-1"><a href="#行为型模式-1" class="headerlink" title="行为型模式"></a>行为型模式</h1><p>  关注系统中对象之间的相互交互研究系统在运行时对象之间的相互通信和协作，进一步明确对象的职责。</p><h2 id="责任链模式-Chain-of-Responsibility"><a href="#责任链模式-Chain-of-Responsibility" class="headerlink" title="责任链模式(Chain of Responsibility)"></a>责任链模式(Chain of Responsibility)</h2><p> 将能够处理同一类请求的对象连成一条链，所提交的请求沿着链传递，链上的对象逐个判断是否有能力处理该请求，如果能则处理，如果不能则传递给链上的下一个对象.</p><h2 id="迭代器模式-iterator"><a href="#迭代器模式-iterator" class="headerlink" title="迭代器模式(iterator)"></a>迭代器模式(iterator)</h2><p> 提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。</p><h2 id="中介者模式-Mediator"><a href="#中介者模式-Mediator" class="headerlink" title="中介者模式(Mediator)"></a>中介者模式(Mediator)</h2><p> 定义一个中介对象来封装一系列对象之间的交互，使原有对象之间的耦合松散，且可以独立地改变它们之间的交互。中介者模式又叫调停模式，它是迪米特法则的典型应用。</p><h2 id="命令模式-command"><a href="#命令模式-command" class="headerlink" title="命令模式(command)"></a>命令模式(command)</h2><p> 将请求封装为一个对象，从而使我们可用不同的请求对客户端进行参数化。</p><h2 id="解释器模式-Interpreter"><a href="#解释器模式-Interpreter" class="headerlink" title="解释器模式(Interpreter)"></a>解释器模式(Interpreter)</h2><p> 用于描述如何构成一个简单的语言解释器，主要用于使用面向对象语言开发的编译器和解释器设计。</p><h2 id="访问者模式-Visitor"><a href="#访问者模式-Visitor" class="headerlink" title="访问者模式(Visitor)"></a>访问者模式(Visitor)</h2><p> 表示一个作用于对象结构中的各元素的操作，它使我们可以在不改变元素的类的前提下定义作用于这些元素的新操作。</p><h2 id="策略模式-Strategy"><a href="#策略模式-Strategy" class="headerlink" title="策略模式(Strategy)"></a>策略模式(Strategy)</h2><p> 分离算法，选择实现。</p><h2 id="模板方法模式-template-method"><a href="#模板方法模式-template-method" class="headerlink" title="模板方法模式(template method)"></a>模板方法模式(template method)</h2><p> 定义一个操作中的算法骨架，将某些步骤延迟到子类中实现。</p><h2 id="状态模式-state"><a href="#状态模式-state" class="headerlink" title="状态模式(state)"></a>状态模式(state)</h2><p> 用于解决系统中复杂对象的状态转换以及不同状态下行为的封装问题。</p><h2 id="观察者模式-Observer"><a href="#观察者模式-Observer" class="headerlink" title="观察者模式(Observer)"></a>观察者模式(Observer)</h2><p> 主要用于1:N的通知。当一个对象的状态变化时，他需要及时告知一系列对象，令他们做出响应。</p><h2 id="备忘录模式-memento"><a href="#备忘录模式-memento" class="headerlink" title="备忘录模式(memento)"></a>备忘录模式(memento)</h2><p> 保存某个对象内部状态的拷贝，这样以后就可以将该对象恢复到原先的状态。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GOF23设计模式总结&quot;&gt;&lt;a href=&quot;#GOF23设计模式总结&quot; class=&quot;headerlink&quot; title=&quot;GOF23设计模式总结&quot;&gt;&lt;/a&gt;GOF23设计模式总结&lt;/h1&gt;&lt;h1 id=&quot;创建型模式&quot;&gt;&lt;a href=&quot;#创建型模式&quot; class=&quot;headerlink&quot; title=&quot;创建型模式&quot;&gt;&lt;/a&gt;创建型模式&lt;/h1&gt;&lt;p&gt; 单例模式、工厂模式、建造者模式、原型模式。&lt;/p&gt;
&lt;h1 id=&quot;结构型模式&quot;&gt;&lt;a href=&quot;#结构型模式&quot; class=&quot;headerlink&quot; title=&quot;结构型模式&quot;&gt;&lt;/a&gt;结构型模式&lt;/h1&gt;&lt;p&gt; 装饰模式、享元模式、桥接模式、组合模式、外观模式、代理模式、适配器模式。&lt;/p&gt;
&lt;h1 id=&quot;行为型模式&quot;&gt;&lt;a href=&quot;#行为型模式&quot; class=&quot;headerlink&quot; title=&quot;行为型模式&quot;&gt;&lt;/a&gt;行为型模式&lt;/h1&gt;&lt;p&gt; 模板方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、策略模式、状态模式、责任链模式、访问者模式。&lt;/p&gt;
    
    </summary>
    
      <category term="GOF设计模式" scheme="http://yoursite.com/categories/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="GOF设计模式" scheme="http://yoursite.com/tags/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
