<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hello</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-10T11:37:49.208Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JiskZcz</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>生产者/消费者模式（二）</title>
    <link href="http://yoursite.com/2019/08/10/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/10/生产者消费者模式（二）/</id>
    <published>2019-08-10T11:23:21.000Z</published>
    <updated>2019-08-10T11:37:49.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="生产者-消费者模式"><a href="#生产者-消费者模式" class="headerlink" title="生产者/消费者模式"></a>生产者/消费者模式</h1><p>第二种方法,信号灯法<a id="more"></a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者模式：信号灯法。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer_Model2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Shoping s=<span class="keyword">new</span> Shoping();</span><br><span class="line">Warehouse1 wa =<span class="keyword">new</span> Warehouse1(s);</span><br><span class="line">people pe= <span class="keyword">new</span> people(s);</span><br><span class="line">wa.start();</span><br><span class="line">pe.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生产商</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Warehouse1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Shoping shop;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Warehouse1</span><span class="params">(Shoping shop)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.shop = shop;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"---------------------"</span>);</span><br><span class="line">System.out.println(<span class="string">"生产第"</span>+(i+<span class="number">1</span>)+<span class="string">"个产品"</span>);</span><br><span class="line">shop.put(<span class="keyword">new</span> Wood(i));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">people</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Shoping shop;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">people</span><span class="params">(Shoping shop)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.shop = shop;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"消费第"</span>+(shop.take().getId()+<span class="number">1</span>)+<span class="string">"个产品"</span>);</span><br><span class="line">System.out.println(<span class="string">"---------------------"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中间商</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shoping</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Wood []i=<span class="keyword">new</span> Wood[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> flag=<span class="keyword">true</span>;</span><br><span class="line"><span class="comment">//放入数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span>  <span class="keyword">void</span> <span class="title">put</span><span class="params">(Wood wood)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.wait();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">i[count]=wood;</span><br><span class="line">count++;</span><br><span class="line">flag=<span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">this</span>.notifyAll();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取出数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Wood <span class="title">take</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(flag) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.wait();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">count--;</span><br><span class="line">Wood b=i[count];</span><br><span class="line">flag=<span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">this</span>.notifyAll();</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//商品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wood</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Wood</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="线程并发协作-也叫线程通信-，通常用于生产者-消费者模式，情景如下："><a href="#线程并发协作-也叫线程通信-，通常用于生产者-消费者模式，情景如下：" class="headerlink" title="线程并发协作(也叫线程通信)，通常用于生产者/消费者模式，情景如下："></a>线程并发协作(也叫线程通信)，通常用于生产者/消费者模式，情景如下：</h2><h3 id="1-生产者和消费者共享同一个资源，并且生产者和消费者之间相互依赖，互为条件。"><a href="#1-生产者和消费者共享同一个资源，并且生产者和消费者之间相互依赖，互为条件。" class="headerlink" title="1. 生产者和消费者共享同一个资源，并且生产者和消费者之间相互依赖，互为条件。"></a>1. 生产者和消费者共享同一个资源，并且生产者和消费者之间相互依赖，互为条件。</h3><h3 id="2-对于生产者，没有生产产品之前，消费者要进入等待状态。而生产了产品之后，又需要马上通知消费者消费。"><a href="#2-对于生产者，没有生产产品之前，消费者要进入等待状态。而生产了产品之后，又需要马上通知消费者消费。" class="headerlink" title="2. 对于生产者，没有生产产品之前，消费者要进入等待状态。而生产了产品之后，又需要马上通知消费者消费。"></a>2. 对于生产者，没有生产产品之前，消费者要进入等待状态。而生产了产品之后，又需要马上通知消费者消费。</h3><h3 id="3-对于消费者，在消费之后，要通知生产者已经消费结束，需要继续生产新产品以供消费。"><a href="#3-对于消费者，在消费之后，要通知生产者已经消费结束，需要继续生产新产品以供消费。" class="headerlink" title="3. 对于消费者，在消费之后，要通知生产者已经消费结束，需要继续生产新产品以供消费。"></a>3. 对于消费者，在消费之后，要通知生产者已经消费结束，需要继续生产新产品以供消费。</h3><h3 id="4-在生产者消费者问题中，仅有synchronized是不够的。"><a href="#4-在生产者消费者问题中，仅有synchronized是不够的。" class="headerlink" title="4. 在生产者消费者问题中，仅有synchronized是不够的。"></a>4. 在生产者消费者问题中，仅有synchronized是不够的。</h3><h4 id="synchronized可阻止并发更新同一个共享资源，实现了同步"><a href="#synchronized可阻止并发更新同一个共享资源，实现了同步" class="headerlink" title="synchronized可阻止并发更新同一个共享资源，实现了同步;"></a>synchronized可阻止并发更新同一个共享资源，实现了同步;</h4><h4 id="synchronized不能用来实现不同线程之间的消息传递-通信-。"><a href="#synchronized不能用来实现不同线程之间的消息传递-通信-。" class="headerlink" title="synchronized不能用来实现不同线程之间的消息传递(通信)。"></a>synchronized不能用来实现不同线程之间的消息传递(通信)。</h4><h3 id="5-以上方法均是java-lang-Object类的方法"><a href="#5-以上方法均是java-lang-Object类的方法" class="headerlink" title="5. 以上方法均是java.lang.Object类的方法;"></a>5. 以上方法均是java.lang.Object类的方法;</h3><p>都只能在同步方法或者同步代码块中使用，否则会抛出异常。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;生产者-消费者模式&quot;&gt;&lt;a href=&quot;#生产者-消费者模式&quot; class=&quot;headerlink&quot; title=&quot;生产者/消费者模式&quot;&gt;&lt;/a&gt;生产者/消费者模式&lt;/h1&gt;&lt;p&gt;第二种方法,信号灯法
    
    </summary>
    
      <category term="多线程" scheme="http://yoursite.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="生产者/消费者模式" scheme="http://yoursite.com/tags/%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>生产者/消费者模式（一）</title>
    <link href="http://yoursite.com/2019/08/10/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/10/生产者消费者模式（一）/</id>
    <published>2019-08-10T05:27:02.000Z</published>
    <updated>2019-08-10T05:39:49.254Z</updated>
    
    <content type="html"><![CDATA[<h1 id="生产者-消费者模式"><a href="#生产者-消费者模式" class="headerlink" title="生产者/消费者模式"></a>生产者/消费者模式</h1><p> 多线程环境下，我们经常需要多个线程的并发和协作。这个时候，就需要了解一个重要的多线程并发协作模型“生产者/消费者模式”。<a id="more"></a></p><h1 id="什么是生产者"><a href="#什么是生产者" class="headerlink" title="什么是生产者?"></a>什么是生产者?</h1><p>  生产者指的是负责生产数据的模块(这里模块可能是：方法、对象、线程、进程)。</p><h1 id="什么是消费者"><a href="#什么是消费者" class="headerlink" title="什么是消费者?"></a>什么是消费者?</h1><p>  消费者指的是负责处理数据的模块(这里模块可能是：方法、对象、线程、进程)。</p><h1 id="什么是缓冲区"><a href="#什么是缓冲区" class="headerlink" title="什么是缓冲区?"></a>什么是缓冲区?</h1><p>  消费者不能直接使用生产者的数据，它们之间有个“缓冲区”。生产者将生产好的数据放入“缓冲区”，消费者从“缓冲区”拿要处理的数据。</p><h1 id="实现线程的并发协作"><a href="#实现线程的并发协作" class="headerlink" title="实现线程的并发协作"></a>实现线程的并发协作</h1><p>  有了缓冲区以后，生产者线程只需要往缓冲区里面放置数据，而不需要管消费者消费的情况;同样，消费者只需要从缓冲区拿数据处理即可，也不需要管生产者生产的情况。 这样，就从逻辑上实现了“生产者线程”和“消费者线程”的分离。</p><h1 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者/消费者模式：管程法。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer_Model</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Business bus=<span class="keyword">new</span> Business();</span><br><span class="line">Warehouse wa=<span class="keyword">new</span> Warehouse(bus);</span><br><span class="line">Thread th=<span class="keyword">new</span> Thread(wa);</span><br><span class="line">th.start();</span><br><span class="line">Consumer wb=<span class="keyword">new</span> Consumer(bus);</span><br><span class="line">wb.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//厂家</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Warehouse</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Business bus;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Warehouse</span><span class="params">(Business bus)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.bus = bus;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 生产</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">50</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"---------------------"</span>);</span><br><span class="line">System.out.println(<span class="string">"生产第"</span>+(i+<span class="number">1</span>)+<span class="string">"个产品"</span>);</span><br><span class="line">bus.put(<span class="keyword">new</span> Commodity(i));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Business bus;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(Business bus)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.bus = bus;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 消费</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">50</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"消费第"</span>+(bus.take().id+<span class="number">1</span>)+<span class="string">"个产品"</span>);</span><br><span class="line">System.out.println(<span class="string">"---------------------"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中间商</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Business</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Commodity[] con=<span class="keyword">new</span> Commodity[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//存放数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Commodity  co)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i==con.length) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.wait();</span><br><span class="line">System.out.println(<span class="string">"没有位置停止生产"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">con[i]=co;</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">this</span>.notifyAll();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取出数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Commodity <span class="title">take</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.wait();<span class="comment">//线程阻塞</span></span><br><span class="line">System.out.println(<span class="string">"没有商品停止消费"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">i--;</span><br><span class="line">Commodity cob=con[i];</span><br><span class="line"><span class="keyword">this</span>.notifyAll();</span><br><span class="line"><span class="keyword">return</span> cob;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//商品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Commodity</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Commodity</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;生产者-消费者模式&quot;&gt;&lt;a href=&quot;#生产者-消费者模式&quot; class=&quot;headerlink&quot; title=&quot;生产者/消费者模式&quot;&gt;&lt;/a&gt;生产者/消费者模式&lt;/h1&gt;&lt;p&gt; 多线程环境下，我们经常需要多个线程的并发和协作。这个时候，就需要了解一个重要的多线程并发协作模型“生产者/消费者模式”。
    
    </summary>
    
      <category term="多线程" scheme="http://yoursite.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="生产者/消费者模式" scheme="http://yoursite.com/tags/%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>电影院购票系统</title>
    <link href="http://yoursite.com/2019/08/06/%E7%94%B5%E5%BD%B1%E9%99%A2%E8%B4%AD%E7%A5%A8%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2019/08/06/电影院购票系统/</id>
    <published>2019-08-06T12:32:22.000Z</published>
    <updated>2019-08-06T12:37:08.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="电影院购票系统"><a href="#电影院购票系统" class="headerlink" title="电影院购票系统"></a>电影院购票系统</h1><p>利用Java多线程实现电影院购票系统。<a id="more"></a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cinema_Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">List&lt;Integer&gt; list =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="number">1</span>);list.add(<span class="number">4</span>);list.add(<span class="number">6</span>);list.add(<span class="number">7</span>);list.add(<span class="number">8</span>);list.add(<span class="number">2</span>);list.add(<span class="number">3</span>);</span><br><span class="line">List&lt;Integer&gt; Min =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Min.add(<span class="number">3</span>);Min.add(<span class="number">6</span>);Min.add(<span class="number">7</span>);</span><br><span class="line">List&lt;Integer&gt; Wang =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Wang.add(<span class="number">6</span>);Wang.add(<span class="number">10</span>);Wang.add(<span class="number">7</span>);</span><br><span class="line">Cinema c=<span class="keyword">new</span> Cinema(list,<span class="string">"万达"</span>);</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> User(Min,c),<span class="string">"小明"</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> User(Wang,c),<span class="string">"老王"</span>).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//电影院</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cinema</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> List&lt;Integer&gt; Number;</span><br><span class="line">String Name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Cinema</span><span class="params">(List&lt;Integer&gt; number, String name)</span> </span>&#123;</span><br><span class="line">Number = number;</span><br><span class="line">Name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//买票</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Choice</span><span class="params">(List&lt;Integer&gt; Position)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"可用位置："</span>+Number);</span><br><span class="line">List&lt;Integer&gt; list =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.addAll(Number);</span><br><span class="line">list.removeAll(Position);</span><br><span class="line"><span class="comment">//判断大小</span></span><br><span class="line"><span class="keyword">if</span>(Number.size()-Position.size()!=list.size())</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"> Number=list;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用户</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> List&lt;Integer&gt; Position;</span><br><span class="line">Cinema C;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(List&lt;Integer&gt; position, Cinema c)</span> </span>&#123;</span><br><span class="line">Position = position;</span><br><span class="line">C = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(C) &#123;</span><br><span class="line"><span class="keyword">boolean</span> flag=C.Choice(Position);</span><br><span class="line"><span class="keyword">if</span>(flag) &#123;</span><br><span class="line">System.out.println(<span class="string">"出票成功"</span>+Thread.currentThread().getName()+<span class="string">"的位置是："</span>+Position);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">System.out.println(<span class="string">"你要的位置是："</span>+Position+<span class="string">"\n"</span>+<span class="string">"出票失败，没有位置"</span>);</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">//同步锁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>可用位置：[1, 4, 6, 7, 8, 2, 3]<br>出票成功小明的位置是：[3, 6, 7]<br>可用位置：[1, 4, 8, 2]<br>你要的位置是：[6, 10, 7]<br>出票失败，没有位置</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;电影院购票系统&quot;&gt;&lt;a href=&quot;#电影院购票系统&quot; class=&quot;headerlink&quot; title=&quot;电影院购票系统&quot;&gt;&lt;/a&gt;电影院购票系统&lt;/h1&gt;&lt;p&gt;利用Java多线程实现电影院购票系统。
    
    </summary>
    
      <category term="多线程" scheme="http://yoursite.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>实现线程同步</title>
    <link href="http://yoursite.com/2019/08/05/%E5%AE%9E%E7%8E%B0%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/"/>
    <id>http://yoursite.com/2019/08/05/实现线程同步/</id>
    <published>2019-08-05T15:05:03.000Z</published>
    <updated>2019-08-05T15:18:01.836Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h1><p>  由于同一进程的多个线程共享同一块存储空间，在带来方便的同时，也带来了访问冲突的问题。Java语言提供了专门机制以解决这种冲突，有效避免了同一个数据对象被多个线程同时访问造成的这种问题。<br>由于我们可以通过 private 关键字来保证数据对象只能被方法访问，所以我们只需针对方法提出一套机制，这套机制就是synchronized关键字，它包括两种用法：synchronized 方法和 synchronized 块。<a id="more"></a></p><h1 id="synchronized-方法"><a href="#synchronized-方法" class="headerlink" title="synchronized 方法"></a>synchronized 方法</h1><p>通过在方法声明中加入 synchronized关键字来声明，语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">Test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ticket&lt;=<span class="number">0</span>) &#123;</span><br><span class="line"> flag=<span class="keyword">false</span>;</span><br><span class="line"> <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"---"</span>+ticket--);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>synchronized 方法控制对“对象的类成员变量”的访问：每个对象对应一把锁，每个 synchronized 方法都必须获得调用该方法的对象的锁方能执行，否则所属线程阻塞，方法一旦执行，就独占该锁，直到从该方法返回时才将锁释放，此后被阻塞的线程方能获得该锁，重新进入可执行状态。</p><h1 id="synchronized-块"><a href="#synchronized-块" class="headerlink" title="synchronized 块"></a>synchronized 块</h1><p> synchronized 方法的缺陷：若将一个大的方法声明为synchronized 将会大大影响效率。Java 为我们提供了更好的解决办法，那就是 synchronized 块。 块可以让我们精确地控制到具体的“成员变量”，缩小同步的范围，提高效率。synchronized 块：通过 synchronized关键字来声明synchronized 块，语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(ticket&lt;=<span class="number">0</span>) &#123;</span><br><span class="line"> flag=<span class="keyword">false</span>;</span><br><span class="line"> <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"---"</span>+ticket--);</span><br><span class="line">&#125; <span class="comment">//   同步块执行到此处</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="同步块性能分析"><a href="#同步块性能分析" class="headerlink" title="同步块性能分析"></a>同步块性能分析</h1><p>  在使用同步块的过程中，需要程序员根据事件应用来锁定资源，同步块锁大了效率低下，同步块锁小了无法保证线程安全。</p><h2 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Synchronized_Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">App12306 test =<span class="keyword">new</span> App12306();</span><br><span class="line"><span class="keyword">new</span> Thread(test,<span class="string">"黄牛"</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(test,<span class="string">"黑牛"</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(test,<span class="string">"白牛"</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(test,<span class="string">"灰牛"</span>).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App12306</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> ticket=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> flag=<span class="keyword">true</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">while</span>(flag) &#123;</span><br><span class="line">Test3(); <span class="comment">//  最优</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//同步块性能分析 </span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里没有考虑没有票的时候，都需要等待，浪费了时间。效率较低</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(ticket&lt;=<span class="number">0</span>) &#123;</span><br><span class="line"> flag=<span class="keyword">false</span>;</span><br><span class="line"> <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"---"</span>+ticket--);</span><br><span class="line">&#125; <span class="comment">//   同步块执行到此处</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//同步块 此方法错误</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此方法没有正确地锁住资源池。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ticket&lt;=<span class="number">0</span>) &#123;</span><br><span class="line"> flag=<span class="keyword">false</span>;</span><br><span class="line"> <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"---"</span>+ticket--);</span><br><span class="line">&#125; <span class="comment">//  同步块执行到此处</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//同步块 此方法最优</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此方法正确，效率高，一般被称为double checking</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ticket&lt;=<span class="number">0</span>) &#123;</span><br><span class="line"> flag=<span class="keyword">false</span>;</span><br><span class="line"> <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(ticket&lt;=<span class="number">0</span>) &#123;</span><br><span class="line"> flag=<span class="keyword">false</span>;</span><br><span class="line"> <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"---"</span>+ticket--);</span><br><span class="line">&#125; <span class="comment">//  同步块执行到此处</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//同步方法，不推荐使用！！</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">Test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ticket&lt;=<span class="number">0</span>) &#123;</span><br><span class="line"> flag=<span class="keyword">false</span>;</span><br><span class="line"> <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"---"</span>+ticket--);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;线程同步&quot;&gt;&lt;a href=&quot;#线程同步&quot; class=&quot;headerlink&quot; title=&quot;线程同步&quot;&gt;&lt;/a&gt;线程同步&lt;/h1&gt;&lt;p&gt;  由于同一进程的多个线程共享同一块存储空间，在带来方便的同时，也带来了访问冲突的问题。Java语言提供了专门机制以解决这种冲突，有效避免了同一个数据对象被多个线程同时访问造成的这种问题。&lt;br&gt;由于我们可以通过 private 关键字来保证数据对象只能被方法访问，所以我们只需针对方法提出一套机制，这套机制就是synchronized关键字，它包括两种用法：synchronized 方法和 synchronized 块。
    
    </summary>
    
      <category term="多线程" scheme="http://yoursite.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="线程同步" scheme="http://yoursite.com/tags/%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>线程状态</title>
    <link href="http://yoursite.com/2019/08/05/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/"/>
    <id>http://yoursite.com/2019/08/05/线程状态/</id>
    <published>2019-08-05T02:44:41.000Z</published>
    <updated>2019-08-05T02:52:25.760Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h1><p>一个线程对象在它的生命周期内，需要经历5个状态。<a id="more"></a></p><h1 id="新生状态-New"><a href="#新生状态-New" class="headerlink" title="新生状态(New)"></a>新生状态(New)</h1><p>  用new关键字建立一个线程对象后，该线程对象就处于新生状态。处于新生状态的线程有自己的内存空间，通过调用start方法进入就绪状态。</p><h1 id="就绪状态-Runnable"><a href="#就绪状态-Runnable" class="headerlink" title="就绪状态(Runnable)"></a>就绪状态(Runnable)</h1><p>  处于就绪状态的线程已经具备了运行条件，但是还没有被分配到CPU，处于“线程就绪队列”，等待系统为其分配CPU。就绪状态并不是执行状态，当系统选定一个等待执行的Thread对象后，它就会进入执行状态。一旦获得CPU，线程就进入运行状态并自动调用自己的run方法。有4中原因会导致线程进入就绪状态：<br>      1. 新建线程：调用start()方法，进入就绪状态;<br>      2. 阻塞线程：阻塞解除，进入就绪状态;<br>      3. 运行线程：调用yield()方法，直接进入就绪状态;<br>      4. 运行线程：JVM将CPU资源从本线程切换到其他线程。</p><h1 id="运行状态-Running"><a href="#运行状态-Running" class="headerlink" title="运行状态(Running)"></a>运行状态(Running)</h1><p>在运行状态的线程执行自己run方法中的代码，直到调用其他方法而终止或等待某资源而阻塞或完成任务而死亡。如果在给定的时间片内没有执行结束，就会被系统给换下来回到就绪状态。也可能由于某些“导致阻塞的事件”而进入阻塞状态。</p><h1 id="阻塞状态-Blocked"><a href="#阻塞状态-Blocked" class="headerlink" title="阻塞状态(Blocked)"></a>阻塞状态(Blocked)</h1><p>阻塞指的是暂停一个线程的执行以等待某个条件发生(如某资源就绪)。有4种原因会导致阻塞：<br>      1. 执行sleep(int millsecond)方法，使当前线程休眠，进入阻塞状态。当指定的时间到了后，线程进入就绪状态。<br>      2. 执行wait()方法，使当前线程进入阻塞状态。当使用nofity()方法唤醒这个线程后，它进入就绪状态。<br>      3. 线程运行时，某个操作进入阻塞状态，比如执行IO流操作(read()/write()方法本身就是阻塞的方法)。只有当引起该操作阻塞的原因消失后，线程进入就绪状态。<br>      4. join()线程联合: 当某个线程等待另一个线程执行结束后，才能继续执行时，使用join()方法。</p><h1 id="死亡状态-Terminated"><a href="#死亡状态-Terminated" class="headerlink" title="死亡状态(Terminated)"></a>死亡状态(Terminated)</h1><p>死亡状态是线程生命周期中的最后一个阶段。线程死亡的原因有两个。一个是正常运行的线程完成了它run()方法内的全部工作; 另一个是线程被强制终止，如通过执行stop()或destroy()方法来终止一个线程(注：stop()/destroy()方法已经被JDK废弃，不推荐使用)。<br>当一个线程进入死亡状态以后，就不能再回到其它状态了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;线程状态&quot;&gt;&lt;a href=&quot;#线程状态&quot; class=&quot;headerlink&quot; title=&quot;线程状态&quot;&gt;&lt;/a&gt;线程状态&lt;/h1&gt;&lt;p&gt;一个线程对象在它的生命周期内，需要经历5个状态。
    
    </summary>
    
      <category term="多线程" scheme="http://yoursite.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>多线程实现</title>
    <link href="http://yoursite.com/2019/08/04/%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/08/04/线程实现/</id>
    <published>2019-08-04T01:33:59.000Z</published>
    <updated>2019-08-04T01:46:00.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p> 多线程是Java语言的重要特性，大量应用于网络编程、服务器端程序的开发，最常见的UI界面底层原理、操作系统底层原理都大量使用了多线程。我们可以流畅的点击软件或者游戏中的各种按钮，其实，底层就是多线程的应用。UI界面的主线程绘制界面，如果有一个耗时的操作发生则启动新的线程，完全不影响主线程的工作。当这个线程工作完毕后，再更新到主界面上。我们可以上百人、上千人、上万人同时访问某个网站，其实，也是基于网站服务器的多线程原理。如果没有多线程，服务器处理速度会极大降低。<a id="more"></a></p><h1 id="通过继承Thread类实现多线程"><a href="#通过继承Thread类实现多线程" class="headerlink" title="通过继承Thread类实现多线程"></a>通过继承Thread类实现多线程</h1><p> 继承Thread类实现多线程的步骤：<br>      1. 在Java中负责实现线程功能的类是java.lang.Thread 类。<br>      2. 可以通过创建 Thread的实例来创建新的线程。<br>      3. 每个线程都是通过某个特定的Thread对象所对应的方法run( )来完成其操作的，方法run( )称为线程体。<br>      4. 通过调用Thread类的start()方法来启动一个线程。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Study_01</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">System.out.println(<span class="string">"Sleep"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">System.out.println(<span class="string">"Study"</span>);</span><br><span class="line">Study_01 st=<span class="keyword">new</span> Study_01();</span><br><span class="line">st.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="缺点：Java不可以多继承。"><a href="#缺点：Java不可以多继承。" class="headerlink" title="缺点：Java不可以多继承。"></a>缺点：Java不可以多继承。</h3><h1 id="通过Runnable接口实现多线程"><a href="#通过Runnable接口实现多线程" class="headerlink" title="通过Runnable接口实现多线程"></a>通过Runnable接口实现多线程</h1><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Study_02</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Study_02 st= <span class="keyword">new</span> Study_02();</span><br><span class="line">Thread th=<span class="keyword">new</span> Thread(st);</span><br><span class="line">th.start();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">System.out.println(<span class="string">"eat"</span>);</span><br><span class="line"><span class="comment">//new Thread(new Study_02()).start(); 只使用一次线程</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">System.out.println(<span class="string">"Study"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>  推荐使用Runnable接口，即在实现Runnable接口的同时还可以继承某个类。所以实现Runnable接口的方式要通用一些。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h1&gt;&lt;p&gt; 多线程是Java语言的重要特性，大量应用于网络编程、服务器端程序的开发，最常见的UI界面底层原理、操作系统底层原理都大量使用了多线程。我们可以流畅的点击软件或者游戏中的各种按钮，其实，底层就是多线程的应用。UI界面的主线程绘制界面，如果有一个耗时的操作发生则启动新的线程，完全不影响主线程的工作。当这个线程工作完毕后，再更新到主界面上。我们可以上百人、上千人、上万人同时访问某个网站，其实，也是基于网站服务器的多线程原理。如果没有多线程，服务器处理速度会极大降低。
    
    </summary>
    
      <category term="多线程" scheme="http://yoursite.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Comparable接口测试</title>
    <link href="http://yoursite.com/2019/07/27/Comparable%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2019/07/27/Comparable接口测试/</id>
    <published>2019-07-27T09:26:45.000Z</published>
    <updated>2019-07-27T09:45:31.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Comparable接口测试"><a href="#Comparable接口测试" class="headerlink" title="Comparable接口测试"></a>Comparable接口测试</h1><p>在写某些程序的时候我们往往需要排序，特别是是对容器进行排序的时候，往往是很麻烦的，这时候我们就可以继承Comparable接口中的compareTo方法来进行排序。<a id="more"></a></p><h1 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">ComparableTest</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">ComparableTest</span>&gt;</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ComparableTest</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">int</span> age, String sex)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Map&lt;ComparableTest,String&gt; map=<span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">map.put(<span class="keyword">new</span> ComparableTest(<span class="number">35</span>,<span class="string">"张三"</span>,<span class="number">25</span>,<span class="string">"男"</span>),<span class="string">"123"</span>);</span><br><span class="line">map.put(<span class="keyword">new</span> ComparableTest(<span class="number">25</span>,<span class="string">"李四"</span>,<span class="number">20</span>,<span class="string">"男"</span>),<span class="string">"456"</span>);</span><br><span class="line">map.put(<span class="keyword">new</span> ComparableTest(<span class="number">12</span>,<span class="string">"王小花"</span>,<span class="number">18</span>,<span class="string">"女"</span>),<span class="string">"678"</span>);</span><br><span class="line">map.put(<span class="keyword">new</span> ComparableTest(<span class="number">12</span>,<span class="string">"李小四"</span>,<span class="number">14</span>,<span class="string">"男"</span>),<span class="string">"910"</span>);</span><br><span class="line"><span class="keyword">for</span>(ComparableTest key:map.keySet()) &#123;</span><br><span class="line">System.out.println(key+<span class="string">"---"</span>+map.get(key));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"id:"</span>+id+<span class="string">",name:"</span>+name+<span class="string">",age:"</span>+age+<span class="string">",sex:"</span>+sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(ComparableTest o)</span> </span>&#123;  <span class="comment">//负数：小于，0：等于，正数：大于</span></span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.id&gt;o.id)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.id&lt;o.id)</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.age&gt;o.age)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.age&lt;o.age)</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><blockquote><p>id:12,name:李小四,age:14,sex:男—910<br>id:12,name:王小花,age:18,sex:女—678<br>id:25,name:李四,age:20,sex:男—456<br>id:35,name:张三,age:25,sex:男—123</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Comparable接口测试&quot;&gt;&lt;a href=&quot;#Comparable接口测试&quot; class=&quot;headerlink&quot; title=&quot;Comparable接口测试&quot;&gt;&lt;/a&gt;Comparable接口测试&lt;/h1&gt;&lt;p&gt;在写某些程序的时候我们往往需要排序，特别是是对容器进行排序的时候，往往是很麻烦的，这时候我们就可以继承Comparable接口中的compareTo方法来进行排序。
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Comparable接口测试" scheme="http://yoursite.com/tags/Comparable%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>日历表</title>
    <link href="http://yoursite.com/2019/07/22/%E6%97%A5%E5%8E%86%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/07/22/日历表/</id>
    <published>2019-07-22T09:15:00.000Z</published>
    <updated>2019-07-22T09:21:15.528Z</updated>
    
    <content type="html"><![CDATA[<h1 id="日历表"><a href="#日历表" class="headerlink" title="日历表"></a>日历表</h1><p>  利用日期类写了一个日历表.<a id="more"></a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.GregorianCalendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalendarWatch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">"请输入日期（格式为：2000-1-1）："</span>);</span><br><span class="line">String s=sc.nextLine();</span><br><span class="line"><span class="comment">//日期类的使用</span></span><br><span class="line">Date d=<span class="keyword">new</span> Date();</span><br><span class="line">SimpleDateFormat sd=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">Calendar c=<span class="keyword">new</span> GregorianCalendar();</span><br><span class="line">d=sd.parse(s);</span><br><span class="line">System.out.println(d);</span><br><span class="line">c.setTime(d);</span><br><span class="line">System.out.println(<span class="string">"你输入了："</span>+s);</span><br><span class="line">System.out.print(<span class="string">"日\t一\t二\t三\t四\t五\t六\t"</span>);</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="keyword">int</span> Day=c.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">c.set(Calendar.DAY_OF_MONTH,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> MaxDay=c.getActualMaximum(Calendar.DATE);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;c.get(Calendar.DAY_OF_WEEK);i++) &#123;</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> b=<span class="number">1</span>;b&lt;=MaxDay;b++)&#123;</span><br><span class="line"><span class="keyword">if</span>(c.get(Calendar.DAY_OF_MONTH)==Day) &#123;</span><br><span class="line">System.out.print(c.get(Calendar.DAY_OF_MONTH)+<span class="string">"*"</span>+<span class="string">"\t"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">System.out.print(c.get(Calendar.DAY_OF_MONTH)+<span class="string">"\t"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(c.get(Calendar.DAY_OF_WEEK)==<span class="number">7</span>)</span><br><span class="line">System.out.println();</span><br><span class="line">c.add(Calendar.DAY_OF_MONTH, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>  月份的表示，一月是0，二月是1，以此类推，12月是11。 因为大多数人习惯于使用单词而不是使用数字来表示月份，这样程序也许更易读，父类Calendar使用常量来表示月份：JANUARY、FEBRUARY等等。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;日历表&quot;&gt;&lt;a href=&quot;#日历表&quot; class=&quot;headerlink&quot; title=&quot;日历表&quot;&gt;&lt;/a&gt;日历表&lt;/h1&gt;&lt;p&gt;  利用日期类写了一个日历表.
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="日历表" scheme="http://yoursite.com/tags/%E6%97%A5%E5%8E%86%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>包装类的缓存问题</title>
    <link href="http://yoursite.com/2019/07/20/%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/07/20/包装类的缓存问题/</id>
    <published>2019-07-20T12:55:56.000Z</published>
    <updated>2019-07-20T13:58:05.449Z</updated>
    
    <content type="html"><![CDATA[<h1 id="缓存问题"><a href="#缓存问题" class="headerlink" title="缓存问题"></a>缓存问题</h1><p>  缓存处理的原理为：如果数据在-128~127这个区间，那么在类加载时就已经为该区间的每个数值创建了对象，并将这256个对象存放到一个名为cache的数组中。每当自动装箱过程发生时(或者手动调用valueOf()时)，就会先判断数据是否在该区间，如果在则直接获取数组中对应的包装类对象的引用，如果不在该区间，则会通过new调用包装类的构造方法来创建对象。<a id="more"></a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>  这里用Integer包装类来进行演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里会进行自动装箱，JDK在1.5以后可以这样写</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Integer a = <span class="number">10</span>; <span class="comment">//Integer a = Integer.valueOf(10); </span></span><br><span class="line">Integer b = <span class="number">10</span>; <span class="comment">//Integer b = Integer.valueOf(10); </span></span><br><span class="line">System.out.println(a==b); <span class="comment">//输出 true</span></span><br><span class="line">Integer c = <span class="number">129</span>;</span><br><span class="line">Integer d = <span class="number">129</span>;</span><br><span class="line">System.out.println(c==d); <span class="comment">//输出false</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自动拆箱</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span> e = a;  <span class="comment">//int e = a.intValue(); int e =new Integer(a);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自动装箱代码"><a href="#自动装箱代码" class="headerlink" title="自动装箱代码"></a>自动装箱代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">            <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="自动拆箱代码"><a href="#自动拆箱代码" class="headerlink" title="自动拆箱代码"></a>自动拆箱代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">intValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="额外内容"><a href="#额外内容" class="headerlink" title="额外内容"></a>额外内容</h1><ol><li><p>JDK1.5以后，增加了自动装箱与拆箱功能。</p></li><li><p>自动装箱调用的是valueOf()方法，而不是new Integer()方法。</p></li><li><p>自动拆箱调用的xxxValue()方法。</p></li><li><p>包装类在自动装箱时为了提高效率，对于-128~127之间的值会进行缓存处理。超过范围后，对象之间不能再使用==进行数值的比较，而是使用equals方法。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;缓存问题&quot;&gt;&lt;a href=&quot;#缓存问题&quot; class=&quot;headerlink&quot; title=&quot;缓存问题&quot;&gt;&lt;/a&gt;缓存问题&lt;/h1&gt;&lt;p&gt;  缓存处理的原理为：如果数据在-128~127这个区间，那么在类加载时就已经为该区间的每个数值创建了对象，并将这256个对象存放到一个名为cache的数组中。每当自动装箱过程发生时(或者手动调用valueOf()时)，就会先判断数据是否在该区间，如果在则直接获取数组中对应的包装类对象的引用，如果不在该区间，则会通过new调用包装类的构造方法来创建对象。
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="包装类的缓存问题" scheme="http://yoursite.com/tags/%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>排序算法</title>
    <link href="http://yoursite.com/2019/07/19/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2019/07/19/排序算法/</id>
    <published>2019-07-19T12:54:32.000Z</published>
    <updated>2019-07-19T12:59:32.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><p>  冒泡排序是最常用的排序算法，在笔试中也非常常见，能手写出冒泡排序算法可以说是基本的素养 算法重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来，这样越大的元素会经由交换慢慢“浮”到数列的顶端。<a id="more"></a></p><h1 id="优化冒泡算法"><a href="#优化冒泡算法" class="headerlink" title="优化冒泡算法"></a>优化冒泡算法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bubblesort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">int</span>[] arr= &#123;<span class="number">32</span>,<span class="number">42</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">48</span>,<span class="number">52</span>,<span class="number">1</span>,<span class="number">74</span>,<span class="number">58</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">41</span>,<span class="number">85</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;arr.length-<span class="number">1</span>;j++) &#123;</span><br><span class="line"><span class="keyword">boolean</span> flag=<span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>-j;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i]&gt;arr[i+<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">t=arr[i+<span class="number">1</span>];</span><br><span class="line">arr[i+<span class="number">1</span>]=arr[i];</span><br><span class="line">arr[i]=t;</span><br><span class="line">flag =<span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"------------------------------------------------------------------"</span>);</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i,j,temp,t;</span><br><span class="line">        <span class="keyword">if</span>(left&gt;=right)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i=left;</span><br><span class="line">        j=right;</span><br><span class="line">        temp = arr[left];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (i&lt;j) &#123;</span><br><span class="line">            <span class="keyword">while</span> (temp&lt;=arr[j]&amp;&amp;i&lt;j) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (temp&gt;=arr[i]&amp;&amp;i&lt;j) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果满足条件则交换</span></span><br><span class="line">            <span class="keyword">if</span> (i&lt;j) &#123;</span><br><span class="line">                t = arr[j];</span><br><span class="line">                arr[j] = arr[i];</span><br><span class="line">                arr[i] = t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//交换位置</span></span><br><span class="line">         arr[left] = arr[i];</span><br><span class="line">         arr[i] = temp;</span><br><span class="line">        <span class="comment">//递归调用左半数组</span></span><br><span class="line">        quickSort(arr, left, j-<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//递归调用右半数组</span></span><br><span class="line">        quickSort(arr, j+<span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">10</span>,<span class="number">9</span>,<span class="number">45645</span>,<span class="number">33</span>,<span class="number">25</span>,<span class="number">62</span>,<span class="number">3</span>,<span class="number">36</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">78</span>,<span class="number">188</span>&#125;;</span><br><span class="line">        quickSort(arr, <span class="number">0</span>, arr.length-<span class="number">1</span>);</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123; </span><br><span class="line"> System.out.print(arr[i]+<span class="string">" "</span>); </span><br><span class="line"> &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;排序算法&quot;&gt;&lt;a href=&quot;#排序算法&quot; class=&quot;headerlink&quot; title=&quot;排序算法&quot;&gt;&lt;/a&gt;排序算法&lt;/h1&gt;&lt;p&gt;  冒泡排序是最常用的排序算法，在笔试中也非常常见，能手写出冒泡排序算法可以说是基本的素养 算法重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来，这样越大的元素会经由交换慢慢“浮”到数列的顶端。
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="排序算法" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>抽象方法和抽象类</title>
    <link href="http://yoursite.com/2019/07/19/%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB/"/>
    <id>http://yoursite.com/2019/07/19/抽象方法和抽象类/</id>
    <published>2019-07-19T06:58:09.000Z</published>
    <updated>2019-07-19T07:17:41.493Z</updated>
    
    <content type="html"><![CDATA[<h1 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h1><p>  使用abstract修饰的方法，没有方法体，只有声明。定义的是一种“规范”，就是告诉子类必须要给抽象方法提供具体的实现。<a id="more"></a></p><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><p>  包含抽象方法的类就是抽象类。通过abstract方法定义规范，然后要求子类必须定义具体实现。通过抽象类，我们就可以做到严格限制子类的设计，使子类之间更加通用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Dog d=<span class="keyword">new</span> Dog();</span><br><span class="line">d.shot();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">shot</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"><span class="comment">//继承抽象类必须实现抽象方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"汪汪汪"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"喵喵喵"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="抽象类使用要点"><a href="#抽象类使用要点" class="headerlink" title="抽象类使用要点"></a>抽象类使用要点</h1><ol><li>有抽象方法的类只能定义成抽象类</li><li>抽象类不能实例化，即不能用new来实例化抽象类。</li><li>抽象类可以包含属性、方法、构造方法。但是构造方法不能用来new实例，只能用来被子类调用。</li><li>抽象类只能用来被继承。</li><li>抽象方法必须被子类实现。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;抽象方法&quot;&gt;&lt;a href=&quot;#抽象方法&quot; class=&quot;headerlink&quot; title=&quot;抽象方法&quot;&gt;&lt;/a&gt;抽象方法&lt;/h1&gt;&lt;p&gt;  使用abstract修饰的方法，没有方法体，只有声明。定义的是一种“规范”，就是告诉子类必须要给抽象方法提供具体的实现。
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="抽象方法和抽象类" scheme="http://yoursite.com/tags/%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>多态(Polymorphism)</title>
    <link href="http://yoursite.com/2019/07/17/%E5%A4%9A%E6%80%81-Polymorphism/"/>
    <id>http://yoursite.com/2019/07/17/多态-Polymorphism/</id>
    <published>2019-07-17T13:21:00.000Z</published>
    <updated>2019-07-20T13:52:24.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>  多态指的是同一个方法调用，由于对象不同可能会有不同的行为。现实生活中，同一个方法，具体实现会完全不同。 比如：同样是调用人的“休息”方法，张三是睡觉，李四是旅游，数学教授是做数学题; 同样是调用人“吃饭”的方法，中国人用筷子吃饭，英国人用刀叉吃饭，印度人用手吃饭。<a id="more"></a></p><h1 id="多态的要点："><a href="#多态的要点：" class="headerlink" title="多态的要点："></a>多态的要点：</h1><p> 1.多态是方法的多态，不是属性的多态(多态与属性无关)。</p><p> 2.多态的存在要有3个必要条件：继承，方法重写，父类引用指向子类对象。</p><p> 3.父类引用指向子类对象后，用该父类引用调用子类重写的方法，此时多态就出现了。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">asd</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        AnimalCry(<span class="keyword">new</span> Dog());</span><br><span class="line">        AnimalCry(<span class="keyword">new</span> Cat());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AnimalCry</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">        a.shout();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"叫了一声...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"汪汪汪.."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seeDoor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"看门中...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"喵喵喵...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>  多态的主要优势是提高了代码的可扩展性，符合开闭原则。但是多态也有弊端，就是无法调用子类特有的功能，比如，我不能使用父类的引用变量调用Dog类特有的seeDoor()方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;多态&quot;&gt;&lt;a href=&quot;#多态&quot; class=&quot;headerlink&quot; title=&quot;多态&quot;&gt;&lt;/a&gt;多态&lt;/h1&gt;&lt;p&gt;  多态指的是同一个方法调用，由于对象不同可能会有不同的行为。现实生活中，同一个方法，具体实现会完全不同。 比如：同样是调用人的“休息”方法，张三是睡觉，李四是旅游，数学教授是做数学题; 同样是调用人“吃饭”的方法，中国人用筷子吃饭，英国人用刀叉吃饭，印度人用手吃饭。
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="多态" scheme="http://yoursite.com/tags/%E5%A4%9A%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title>Java垃圾回收机制(Garbage Collection)</title>
    <link href="http://yoursite.com/2019/07/16/Java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6-Garbage-Collection/"/>
    <id>http://yoursite.com/2019/07/16/Java垃圾回收机制-Garbage-Collection/</id>
    <published>2019-07-16T15:20:23.000Z</published>
    <updated>2019-07-20T13:52:44.426Z</updated>
    
    <content type="html"><![CDATA[<h1 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h1><p>Java引入了垃圾回收机制，令C++程序员头疼的内存管理问题迎刃而解，Java程序员可以将更多的精力放到业务逻辑上而不是内存管理工作上，大大提高了开发效率<a id="more"></a></p><h1 id="认识垃圾回收机制"><a href="#认识垃圾回收机制" class="headerlink" title="认识垃圾回收机制"></a>认识垃圾回收机制</h1><p>  垃圾回收机制可以自动清空无用对象，C++垃圾回收就像学校食堂一样，需要用餐人员自己回收餐盘，如果没回收就会导致这个位置没法坐人，如果每个人都不回收就会造成瘫痪，无法营业，就好比程序。Java就好比在外面饭馆吃饭，无需你回收餐盘，你可以吃干净抹嘴走人，会有餐馆的服务员帮你回收盘子，这样就方便了你也节约了时间。</p><h1 id="垃圾回收过程"><a href="#垃圾回收过程" class="headerlink" title="垃圾回收过程"></a>垃圾回收过程</h1><p>  任何一种垃圾回收算法一般都要做两件事情：<br>  1.发现无用的对象<br>  2.回收无用对象占用的内存空间。</p><h1 id="垃圾回收相关算法"><a href="#垃圾回收相关算法" class="headerlink" title="垃圾回收相关算法"></a>垃圾回收相关算法</h1><h2 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h2><p>  堆中每个对象都有一个引用计数，被引用一次，计数加1，被引用变量值变为null，则计数减一，直到计数为0，则表示无用对象，优点：算法简单。缺点：“循环引用的无用对象”无法被识别。</p><h2 id="引用可达法-根搜索算法"><a href="#引用可达法-根搜索算法" class="headerlink" title="引用可达法(根搜索算法)"></a>引用可达法(根搜索算法)</h2><p>  程序把所有的引用关系看作一张图，从一个节点GC ROOT 开始，寻找对应的引用节点，找到这个节点后，继续寻找当前节点的引用节点，当所有节点寻找完毕后，剩余节点被认为是没有被引用到的节点，即无用的节点。</p><h2 id="通用的分代垃圾回收机制"><a href="#通用的分代垃圾回收机制" class="headerlink" title="通用的分代垃圾回收机制"></a>通用的分代垃圾回收机制</h2><p>  分代垃圾回收机制，是基于这样一个事实：不同的对象的生命周期是不一样的。因此，不同生命周期的对象可以采取不同的回收算法，以便提高回收效率，我们将对象分为三种状态：年轻代、年老代、持久代。JVM将堆内存划分为Eden、Survivor、Tenured/Old空间。</p><h3 id="年轻代"><a href="#年轻代" class="headerlink" title="年轻代"></a>年轻代</h3><p>  所有新生成的对象首先都是放在Eden区。年轻代的目标就是尽可能快速的搜集掉那些生命周期短的对象，对应的是Minor GC，每次Minor GC会清理年轻代的内存，算法采用效率较高的复制算法，频繁的操作，但是会浪费内存空间。当“年轻代”区域存放满对象后，就将对象存放到年老代区域。</p><h3 id="年老代"><a href="#年老代" class="headerlink" title="年老代"></a>年老代</h3><p>  在年老代中经历了N（默认15）次的垃圾回收后仍然存活的对象，就会被放到年老代中。因此，可以认为年老代中存放的都是一些生命周期较长的对象。年老代的对象越来越多，我们就需要启动Major GC和Full GC（全量回收），来进行一次大扫除，全名清理年轻代区域和年老代区域。</p><h3 id="持久代"><a href="#持久代" class="headerlink" title="持久代"></a>持久代</h3><p>  用于存放静态文件，如Java类、方法等。持久代对垃圾回收没有显著影响。</p><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><h4 id="·Minor-GC"><a href="#·Minor-GC" class="headerlink" title="·Minor GC:"></a>·Minor GC:</h4><p>  用于清理年轻代区域。Eden区满了就会触发一次Minor GC.清理无用对象，将有用对象复制到“Survivor1”、“Survivor2”区中（这两个区，大小空间相同，同一时刻只有一个区在运行，另一个为空）</p><h4 id="·Major-GC"><a href="#·Major-GC" class="headerlink" title="·Major GC:"></a>·Major GC:</h4><p>  用于清理年老代区域。</p><h4 id="·Full-GC"><a href="#·Full-GC" class="headerlink" title="·Full GC:"></a>·Full GC:</h4><p>  用于清理年轻代、年老代区域。成本较高，会对系统性能产生影响。</p><h3 id="垃圾回收过程-1"><a href="#垃圾回收过程-1" class="headerlink" title="垃圾回收过程"></a>垃圾回收过程</h3><p>  1、新创建的对象，绝大多数都会存储在Eden中。<br>  2、当Eden满了（达到一定比例）不能创建新对象，则触发垃圾回收机制（GC），将无用对象清理掉，然后剩余对象复制到某个Survivor中，如S1，同时清空Eden区。<br>  3、当Eden再次满了，会将S1中的不能清空的对象存到另一个Survivor中，如S2，同时将Eden区中不能清空的对象也复制到S1中，保证Eden和S1的无用对象，均被清空。<br>  4、重复多次（默认15次）Survivor中没有被清理的对象，则会被复制到年老代Old（Tenured）中。<br>  5、当Old区满了，则会触发一个一次完整地垃圾回收（Full GC），之前年轻代的垃圾回收被称为（Minor GC）.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;垃圾回收机制&quot;&gt;&lt;a href=&quot;#垃圾回收机制&quot; class=&quot;headerlink&quot; title=&quot;垃圾回收机制&quot;&gt;&lt;/a&gt;垃圾回收机制&lt;/h1&gt;&lt;p&gt;Java引入了垃圾回收机制，令C++程序员头疼的内存管理问题迎刃而解，Java程序员可以将更多的精力放到业务逻辑上而不是内存管理工作上，大大提高了开发效率
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="垃圾回收机制" scheme="http://yoursite.com/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Java方法的重载</title>
    <link href="http://yoursite.com/2019/07/16/Java%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD/"/>
    <id>http://yoursite.com/2019/07/16/Java方法的重载/</id>
    <published>2019-07-16T12:08:03.000Z</published>
    <updated>2019-07-17T14:10:23.107Z</updated>
    
    <content type="html"><![CDATA[<h1 id="方法重载（Overlord）"><a href="#方法重载（Overlord）" class="headerlink" title="方法重载（Overlord）"></a>方法重载（Overlord）</h1><p>  重载的方法，完全不同的用法，只是名称相同。<a id="more"></a></p><h2 id="构成方法重载的条件"><a href="#构成方法重载的条件" class="headerlink" title="构成方法重载的条件"></a>构成方法重载的条件</h2><p>  1.不同的含义：形式参数，形参个数，形参顺序不同<br>  2.只有返回值不同不构成方法的重载，<br>例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**求和的方法*/</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> sum=a+b;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**求和的方法重载*/</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> sum=a+b+c;</span><br><span class="line"><span class="keyword">return</span> sum; </span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">/**方法的重载只有返回值的时候需要特别注意，返回值double和返回值为int的方法不构成重载（同一方法，返回值类型不一样）*/</span></span><br></pre></td></tr></table></figure><h1 id="构造方法的重载"><a href="#构造方法的重载" class="headerlink" title="构造方法的重载"></a>构造方法的重载</h1><p> 要点：<br>       1.通过new关键字调用。<br>       2.构造器有返回值，但是不能定义返回值类型（返回值类型为本类类型），不能在构造器里使用return返回某个值。<br>       3.如果没有定义构造器，编译器会自动添加一个无参的构造函数 。如果已定义则编译器不会自动添加！<br>       4.构造器的方法名必须和类名一致！</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">             <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Summation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Summation(<span class="keyword">int</span> a)&#123;</span><br><span class="line">System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line">Summation(<span class="keyword">int</span> a ,<span class="keyword">int</span> b)&#123;</span><br><span class="line">System.out.println(a+b);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Summation c=<span class="keyword">new</span> Summation(<span class="number">1</span>);</span><br><span class="line">Summation d=<span class="keyword">new</span> Summation(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>  方法的重载给我们写代码简便了许多，可以提升程序员编写代码速度和代码易读性。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;方法重载（Overlord）&quot;&gt;&lt;a href=&quot;#方法重载（Overlord）&quot; class=&quot;headerlink&quot; title=&quot;方法重载（Overlord）&quot;&gt;&lt;/a&gt;方法重载（Overlord）&lt;/h1&gt;&lt;p&gt;  重载的方法，完全不同的用法，只是名称相同。
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java方法重载" scheme="http://yoursite.com/tags/Java%E6%96%B9%E6%B3%95%E9%87%8D%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>开始学习</title>
    <link href="http://yoursite.com/2019/07/15/%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/07/15/开始学习/</id>
    <published>2019-07-15T05:50:14.000Z</published>
    <updated>2019-07-15T07:03:09.192Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开始学习"><a href="#开始学习" class="headerlink" title="开始学习"></a>开始学习</h2><p>  搭建好个人博客就要开始从头学习java了，定一个目标，在9月3号前学习完300集java基础，加油吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;开始学习&quot;&gt;&lt;a href=&quot;#开始学习&quot; class=&quot;headerlink&quot; title=&quot;开始学习&quot;&gt;&lt;/a&gt;开始学习&lt;/h2&gt;&lt;p&gt;  搭建好个人博客就要开始从头学习java了，定一个目标，在9月3号前学习完300集java基础，加油吧。&lt;/p&gt;

      
    
    </summary>
    
      <category term="初步学习" scheme="http://yoursite.com/categories/%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="初步学习" scheme="http://yoursite.com/tags/%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>初次使用</title>
    <link href="http://yoursite.com/2019/07/15/%E5%88%9D%E6%AC%A1%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/07/15/初次使用/</id>
    <published>2019-07-15T05:30:52.000Z</published>
    <updated>2019-07-15T05:49:52.169Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>第一次搭建自己的个人博客，遇到很多困难。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h2&gt;&lt;p&gt;第一次搭建自己的个人博客，遇到很多困难。&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
</feed>
