<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hello</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-31T12:36:40.367Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JiskZcz</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GOF23设计模式（完）</title>
    <link href="http://yoursite.com/2019/08/31/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%AE%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/31/GOF23设计模式（完）/</id>
    <published>2019-08-31T12:27:56.000Z</published>
    <updated>2019-08-31T12:36:40.367Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GOF23设计模式总结"><a href="#GOF23设计模式总结" class="headerlink" title="GOF23设计模式总结"></a>GOF23设计模式总结</h1><h1 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h1><p> 单例模式、工厂模式、建造者模式、原型模式。</p><h1 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h1><p> 装饰模式、享元模式、桥接模式、组合模式、外观模式、代理模式、适配器模式。</p><h1 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h1><p> 模板方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、策略模式、状态模式、责任链模式、访问者模式。</p><a id="more"></a><h1 id="创建型模式-1"><a href="#创建型模式-1" class="headerlink" title="创建型模式"></a>创建型模式</h1><p>  关注对象的创建过程。</p><h2 id="单例模式-Singleton"><a href="#单例模式-Singleton" class="headerlink" title="单例模式(Singleton)"></a>单例模式(Singleton)</h2><p> 保证一个类只有一个实例，并且提供一个访问该实例的全局访问点。</p><h2 id="工厂模式-Factory"><a href="#工厂模式-Factory" class="headerlink" title="工厂模式(Factory)"></a>工厂模式(Factory)</h2><p> 实例化对象，用工厂方法代替new操作。<br> 将选择实现类、创建对象统一管理和控制。从而将调用者跟我们的实现类解耦。</p><h2 id="建造者模式-Builder"><a href="#建造者模式-Builder" class="headerlink" title="建造者模式(Builder)"></a>建造者模式(Builder)</h2><p> 具体的建造者类之间是相互独立的，容易扩展。</p><h2 id="原型模式-Prototype"><a href="#原型模式-Prototype" class="headerlink" title="原型模式(Prototype)"></a>原型模式(Prototype)</h2><p> 扩展性好，由于写原型模式的时候使用了抽象原型类，在客户端进行编程的时候可以将具体的原型类通过配置进行读取。</p><h1 id="结构型模式-1"><a href="#结构型模式-1" class="headerlink" title="结构型模式"></a>结构型模式</h1><p>关注对象和类的组织。</p><h2 id="适配器-Adapter-模式"><a href="#适配器-Adapter-模式" class="headerlink" title="适配器(Adapter)模式"></a>适配器(Adapter)模式</h2><p> 将一个类的接口转换成客户希望的另外一个接口，Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以在一起工作。</p><h2 id="代理模式-Proxy-pattern"><a href="#代理模式-Proxy-pattern" class="headerlink" title="代理模式(Proxy pattern)"></a>代理模式(Proxy pattern)</h2><p> 通过代理，控制对对象的访问。</p><h2 id="桥接模式-bridge"><a href="#桥接模式-bridge" class="headerlink" title="桥接模式(bridge)"></a>桥接模式(bridge)</h2><p> 桥接模式可以取代多层继承的方案。多层继承违背了单一职责原则，复用性较差，类的个数也非常多。桥接模式可以极大的减少子类的个数，从而降低管理和维护的成本。<br> 桥接模式极大提高了系统可扩展性，在两个变化维度中任意扩展一个维度，都不需要修改原有的系统，符合开闭原则。</p><h2 id="组合模式-composite"><a href="#组合模式-composite" class="headerlink" title="组合模式(composite)"></a>组合模式(composite)</h2><p> 抽象构件(Component)角色：定义了叶子和容器构件的共同点。<br> 叶子(Leaf)构件角色：无子节点。<br> 容器(Composite)构件角色：有容器特征，可以包含子节点。</p><h2 id="装饰模式-decorator"><a href="#装饰模式-decorator" class="headerlink" title="装饰模式(decorator)"></a>装饰模式(decorator)</h2><p> 动态的为一个对象增加新功能。<br> 装饰模式是一种用于代替继承的技术，无需通过继承增加子类就能扩展对象的新功能。使用对象的关联关系代替继承关系，更加灵活，同时避免类型体系的快速膨胀。</p><h2 id="外观模式-Facade"><a href="#外观模式-Facade" class="headerlink" title="外观模式(Facade)"></a>外观模式(Facade)</h2><p> 为子系统提供统一的入口，封装子系统的复杂性，便于客户端调用。</p><h2 id="享元模式-FlyWeight"><a href="#享元模式-FlyWeight" class="headerlink" title="享元模式(FlyWeight)"></a>享元模式(FlyWeight)</h2><p> 享元模式以共享的方式高效地支持大量细粒度对象的重用。<br> 享元对象能做到共享的关键是区分了内部状态和外部状态<br>  ·内部状态：可以共享，不会随环境变化而改变<br>  ·外部状态：不可以共享，会随环境变化而改变</p><h1 id="行为型模式-1"><a href="#行为型模式-1" class="headerlink" title="行为型模式"></a>行为型模式</h1><p>  关注系统中对象之间的相互交互研究系统在运行时对象之间的相互通信和协作，进一步明确对象的职责。</p><h2 id="责任链模式-Chain-of-Responsibility"><a href="#责任链模式-Chain-of-Responsibility" class="headerlink" title="责任链模式(Chain of Responsibility)"></a>责任链模式(Chain of Responsibility)</h2><p> 将能够处理同一类请求的对象连成一条链，所提交的请求沿着链传递，链上的对象逐个判断是否有能力处理该请求，如果能则处理，如果不能则传递给链上的下一个对象.</p><h2 id="迭代器模式-iterator"><a href="#迭代器模式-iterator" class="headerlink" title="迭代器模式(iterator)"></a>迭代器模式(iterator)</h2><p> 提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。</p><h2 id="中介者模式-Mediator"><a href="#中介者模式-Mediator" class="headerlink" title="中介者模式(Mediator)"></a>中介者模式(Mediator)</h2><p> 定义一个中介对象来封装一系列对象之间的交互，使原有对象之间的耦合松散，且可以独立地改变它们之间的交互。中介者模式又叫调停模式，它是迪米特法则的典型应用。</p><h2 id="命令模式-command"><a href="#命令模式-command" class="headerlink" title="命令模式(command)"></a>命令模式(command)</h2><p> 将请求封装为一个对象，从而使我们可用不同的请求对客户端进行参数化。</p><h2 id="解释器模式-Interpreter"><a href="#解释器模式-Interpreter" class="headerlink" title="解释器模式(Interpreter)"></a>解释器模式(Interpreter)</h2><p> 用于描述如何构成一个简单的语言解释器，主要用于使用面向对象语言开发的编译器和解释器设计。</p><h2 id="访问者模式-Visitor"><a href="#访问者模式-Visitor" class="headerlink" title="访问者模式(Visitor)"></a>访问者模式(Visitor)</h2><p> 表示一个作用于对象结构中的各元素的操作，它使我们可以在不改变元素的类的前提下定义作用于这些元素的新操作。</p><h2 id="策略模式-Strategy"><a href="#策略模式-Strategy" class="headerlink" title="策略模式(Strategy)"></a>策略模式(Strategy)</h2><p> 分离算法，选择实现。</p><h2 id="模板方法模式-template-method"><a href="#模板方法模式-template-method" class="headerlink" title="模板方法模式(template method)"></a>模板方法模式(template method)</h2><p> 定义一个操作中的算法骨架，将某些步骤延迟到子类中实现。</p><h2 id="状态模式-state"><a href="#状态模式-state" class="headerlink" title="状态模式(state)"></a>状态模式(state)</h2><p> 用于解决系统中复杂对象的状态转换以及不同状态下行为的封装问题。</p><h2 id="观察者模式-Observer"><a href="#观察者模式-Observer" class="headerlink" title="观察者模式(Observer)"></a>观察者模式(Observer)</h2><p> 主要用于1:N的通知。当一个对象的状态变化时，他需要及时告知一系列对象，令他们做出响应。</p><h2 id="备忘录模式-memento"><a href="#备忘录模式-memento" class="headerlink" title="备忘录模式(memento)"></a>备忘录模式(memento)</h2><p> 保存某个对象内部状态的拷贝，这样以后就可以将该对象恢复到原先的状态。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GOF23设计模式总结&quot;&gt;&lt;a href=&quot;#GOF23设计模式总结&quot; class=&quot;headerlink&quot; title=&quot;GOF23设计模式总结&quot;&gt;&lt;/a&gt;GOF23设计模式总结&lt;/h1&gt;&lt;h1 id=&quot;创建型模式&quot;&gt;&lt;a href=&quot;#创建型模式&quot; class=&quot;headerlink&quot; title=&quot;创建型模式&quot;&gt;&lt;/a&gt;创建型模式&lt;/h1&gt;&lt;p&gt; 单例模式、工厂模式、建造者模式、原型模式。&lt;/p&gt;
&lt;h1 id=&quot;结构型模式&quot;&gt;&lt;a href=&quot;#结构型模式&quot; class=&quot;headerlink&quot; title=&quot;结构型模式&quot;&gt;&lt;/a&gt;结构型模式&lt;/h1&gt;&lt;p&gt; 装饰模式、享元模式、桥接模式、组合模式、外观模式、代理模式、适配器模式。&lt;/p&gt;
&lt;h1 id=&quot;行为型模式&quot;&gt;&lt;a href=&quot;#行为型模式&quot; class=&quot;headerlink&quot; title=&quot;行为型模式&quot;&gt;&lt;/a&gt;行为型模式&lt;/h1&gt;&lt;p&gt; 模板方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、策略模式、状态模式、责任链模式、访问者模式。&lt;/p&gt;
    
    </summary>
    
      <category term="GOF设计模式" scheme="http://yoursite.com/categories/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="GOF设计模式" scheme="http://yoursite.com/tags/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>GOF23设计模式（十五）</title>
    <link href="http://yoursite.com/2019/08/31/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/31/GOF23设计模式（十五）/</id>
    <published>2019-08-31T12:27:32.000Z</published>
    <updated>2019-08-31T12:29:21.286Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GOF设计模式之备忘录模式-memento"><a href="#GOF设计模式之备忘录模式-memento" class="headerlink" title="GOF设计模式之备忘录模式(memento)"></a>GOF设计模式之备忘录模式(memento)</h1><a id="more"></a><h1 id="备忘录模式-memento"><a href="#备忘录模式-memento" class="headerlink" title="备忘录模式(memento)"></a>备忘录模式(memento)</h1><p>保存某个对象内部状态的拷贝，这样以后就可以将该对象恢复到原先的状态。</p><h2 id="源发器"><a href="#源发器" class="headerlink" title="源发器"></a>源发器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 源发器类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//备忘录操作</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EmpMemento <span class="title">memento</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> EmpMemento(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进行数据恢复，恢复成指定备忘录对象的值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recovery</span><span class="params">(EmpMemento mmt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name=mmt.getName();</span><br><span class="line"><span class="keyword">this</span>.age=mmt.getAge();</span><br><span class="line"><span class="keyword">this</span>.salary=mmt.getSalary();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="备忘录"><a href="#备忘录" class="headerlink" title="备忘录"></a>备忘录</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  备忘录类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpMemento</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">EmpMemento</span><span class="params">(Emp e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name=e.getName();</span><br><span class="line"><span class="keyword">this</span>.age=e.getAge();</span><br><span class="line"><span class="keyword">this</span>.salary=e.getSalary();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="负责人"><a href="#负责人" class="headerlink" title="负责人"></a>负责人</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 负责人类</span></span><br><span class="line"><span class="comment"> * 管理备忘录对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CareTaker</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> EmpMemento memento;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> EmpMemento <span class="title">getMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> memento;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(EmpMemento memento)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.memento = memento;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">CareTaker taker = <span class="keyword">new</span> CareTaker();</span><br><span class="line">Emp emp = <span class="keyword">new</span> Emp(<span class="string">"小四"</span>,<span class="number">19</span>,<span class="number">1000</span>);</span><br><span class="line">System.out.println(<span class="string">"Once"</span>+<span class="string">"年龄："</span>+emp.getAge()+<span class="string">"，姓名："</span>+emp.getName()</span><br><span class="line">+<span class="string">"，工资："</span>+emp.getSalary());</span><br><span class="line">taker.setMemento(emp.memento());<span class="comment">//记录一次</span></span><br><span class="line">emp.setAge(<span class="number">20</span>);emp.setName(<span class="string">"大四"</span>);emp.setSalary(<span class="number">1200</span>);</span><br><span class="line">System.out.println(<span class="string">"Twice"</span>+<span class="string">"年龄："</span>+emp.getAge()+<span class="string">"，姓名："</span>+emp.getName()</span><br><span class="line">+<span class="string">"，工资："</span>+emp.getSalary());</span><br><span class="line">emp.recovery(taker.getMemento());<span class="comment">//恢复</span></span><br><span class="line">System.out.println(<span class="string">"-----"</span>+<span class="string">"年龄："</span>+emp.getAge()+<span class="string">"，姓名："</span>+emp.getName()</span><br><span class="line">+<span class="string">"，工资："</span>+emp.getSalary());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><blockquote><p>Once年龄：19，姓名：小四，工资：1000.0<br>Twice年龄：20，姓名：大四，工资：1200.0<br>—–年龄：19，姓名：小四，工资：1000.0</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GOF设计模式之备忘录模式-memento&quot;&gt;&lt;a href=&quot;#GOF设计模式之备忘录模式-memento&quot; class=&quot;headerlink&quot; title=&quot;GOF设计模式之备忘录模式(memento)&quot;&gt;&lt;/a&gt;GOF设计模式之备忘录模式(memento)&lt;/h1&gt;
    
    </summary>
    
      <category term="GOF设计模式" scheme="http://yoursite.com/categories/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="GOF设计模式" scheme="http://yoursite.com/tags/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>GOF23设计模式（十四）</title>
    <link href="http://yoursite.com/2019/08/31/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/31/GOF23设计模式（十四）/</id>
    <published>2019-08-31T06:16:11.000Z</published>
    <updated>2019-08-31T06:17:17.399Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GOF设计模式之状态模式-state-与观察者模式-Observer"><a href="#GOF设计模式之状态模式-state-与观察者模式-Observer" class="headerlink" title="GOF设计模式之状态模式(state)与观察者模式(Observer)"></a>GOF设计模式之状态模式(state)与观察者模式(Observer)</h1><a id="more"></a><h1 id="状态模式-state"><a href="#状态模式-state" class="headerlink" title="状态模式(state)"></a>状态模式(state)</h1><p>用于解决系统中复杂对象的状态转换以及不同状态下行为的封装问题。</p><h2 id="状态接口"><a href="#状态接口" class="headerlink" title="状态接口"></a>状态接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 空闲状态</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FreeState</span> <span class="keyword">implements</span> <span class="title">State</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"房间空闲没人住"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 预订状态</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookedState</span> <span class="keyword">implements</span> <span class="title">State</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"房间已预订"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 已入住状态</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckedInState</span> <span class="keyword">implements</span> <span class="title">State</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"房间已入住"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 房间状态管理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeContext</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> State state;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(State s)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"修改状态"</span>);</span><br><span class="line">state=s;</span><br><span class="line">state.handle();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> HomeContext c=<span class="keyword">new</span> HomeContext();</span><br><span class="line"> c.setState(<span class="keyword">new</span> FreeState());</span><br><span class="line"> </span><br><span class="line"> c.setState(<span class="keyword">new</span> BookedState());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><blockquote><p>修改状态<br>房间空闲没人住<br>修改状态<br>房间已预订</p></blockquote><h1 id="观察者模式-Observer"><a href="#观察者模式-Observer" class="headerlink" title="观察者模式(Observer)"></a>观察者模式(Observer)</h1><p>主要用于1:N的通知。当一个对象的状态变化时，他需要及时告知一系列对象，令他们做出响应。</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Subject subject)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现接口-1"><a href="#实现接口-1" class="headerlink" title="实现接口"></a>实现接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverA</span> <span class="keyword">implements</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> Mystate; <span class="comment">//与目标对象保持一致</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Subject subject)</span> </span>&#123;</span><br><span class="line">Mystate=((ConcreteSubject)subject).getState();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMystate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Mystate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMystate</span><span class="params">(<span class="keyword">int</span> mystate)</span> </span>&#123;</span><br><span class="line">Mystate = mystate;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="观察者容器"><a href="#观察者容器" class="headerlink" title="观察者容器"></a>观察者容器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"><span class="keyword">protected</span> List&lt;Observer&gt; list =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Observer obs)</span> </span>&#123;</span><br><span class="line">list.add(obs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer obs)</span> </span>&#123;</span><br><span class="line">list.remove(obs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通知所有观察者更新状态</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyAllObserver</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (Observer observer : list) &#123;</span><br><span class="line">observer.update(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> <span class="keyword">extends</span> <span class="title">Subject</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> state;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.state = state;</span><br><span class="line"><span class="comment">//值发生了变化</span></span><br><span class="line"><span class="keyword">this</span>.notifyAllObserver();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//目标对象</span></span><br><span class="line">ConcreteSubject subject =<span class="keyword">new</span> ConcreteSubject();</span><br><span class="line"><span class="comment">//观察者</span></span><br><span class="line">ObserverA a = <span class="keyword">new</span> ObserverA();</span><br><span class="line">ObserverA b = <span class="keyword">new</span> ObserverA();</span><br><span class="line">ObserverA c = <span class="keyword">new</span> ObserverA();</span><br><span class="line"><span class="comment">//添加到容器里去</span></span><br><span class="line">subject.register(a);</span><br><span class="line">subject.register(b);</span><br><span class="line">subject.register(c);</span><br><span class="line"></span><br><span class="line"><span class="comment">//改变subjec状态</span></span><br><span class="line">subject.setState(<span class="number">200</span>);</span><br><span class="line"><span class="comment">//查看观察者状态</span></span><br><span class="line">System.out.println(a.getMystate());</span><br><span class="line">System.out.println(b.getMystate());</span><br><span class="line">System.out.println(c.getMystate());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h2><blockquote><p>200<br>200<br>200</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GOF设计模式之状态模式-state-与观察者模式-Observer&quot;&gt;&lt;a href=&quot;#GOF设计模式之状态模式-state-与观察者模式-Observer&quot; class=&quot;headerlink&quot; title=&quot;GOF设计模式之状态模式(state)与观察者模式(Observer)&quot;&gt;&lt;/a&gt;GOF设计模式之状态模式(state)与观察者模式(Observer)&lt;/h1&gt;
    
    </summary>
    
      <category term="GOF设计模式" scheme="http://yoursite.com/categories/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="GOF设计模式" scheme="http://yoursite.com/tags/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>GOF23设计模式（十三）</title>
    <link href="http://yoursite.com/2019/08/30/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/30/GOF23设计模式（十三）/</id>
    <published>2019-08-30T13:50:11.000Z</published>
    <updated>2019-08-30T13:51:37.811Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GOF设计模式之策略模式-Strategy-与模板方法模式-template-method"><a href="#GOF设计模式之策略模式-Strategy-与模板方法模式-template-method" class="headerlink" title="GOF设计模式之策略模式(Strategy)与模板方法模式(template method)"></a>GOF设计模式之策略模式(Strategy)与模板方法模式(template method)</h1><a id="more"></a><h1 id="策略模式-Strategy"><a href="#策略模式-Strategy" class="headerlink" title="策略模式(Strategy)"></a>策略模式(Strategy)</h1><p>分离算法，选择实现。</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">(<span class="keyword">double</span> standardPrice)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现接口方法"><a href="#实现接口方法" class="headerlink" title="实现接口方法"></a>实现接口方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewCustomerFewStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">(<span class="keyword">double</span> standardPrice)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"不打折，原价"</span>);</span><br><span class="line"><span class="keyword">return</span> standardPrice;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewCustomerManyStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">(<span class="keyword">double</span> standardPrice)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"打九折"</span>);</span><br><span class="line"><span class="keyword">return</span> standardPrice*<span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OldCustomerFewStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">(<span class="keyword">double</span> standardPrice)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"打八五折"</span>);</span><br><span class="line"><span class="keyword">return</span> standardPrice*<span class="number">0.85</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OldCustomerManyStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">(<span class="keyword">double</span> standardPrice)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"打八折"</span>);</span><br><span class="line"><span class="keyword">return</span> standardPrice*<span class="number">0.8</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="负责交互"><a href="#负责交互" class="headerlink" title="负责交互"></a>负责交互</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 负责和具体的策略类交互</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Strategy strategy;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStrategy</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pringPrice</span><span class="params">(<span class="keyword">double</span> s)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"您的价格是："</span>+strategy.getPrice(s));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Strategy s1 =<span class="keyword">new</span> OldCustomerManyStrategy();</span><br><span class="line">Context ctx =<span class="keyword">new</span> Context(s1);</span><br><span class="line">ctx.pringPrice(<span class="number">864</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><blockquote><p>打八折<br>您的价格是：691.2</p></blockquote><h1 id="模板方法模式-template-method"><a href="#模板方法模式-template-method" class="headerlink" title="模板方法模式(template method)"></a>模板方法模式(template method)</h1><p>定义一个操作中的算法骨架，将某些步骤延迟到子类中实现。</p><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BankTemplateMethod</span> </span>&#123;</span><br><span class="line"><span class="comment">//具体方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"取号排队"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">transact</span><span class="params">()</span></span>;<span class="comment">//办理具体的业务 钩子方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">evaluate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"反馈评分"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123; <span class="comment">//模板方法</span></span><br><span class="line"><span class="keyword">this</span>.takeNumber();</span><br><span class="line"><span class="keyword">this</span>.transact();</span><br><span class="line"><span class="keyword">this</span>.evaluate();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">BankTemplateMethod btm=<span class="keyword">new</span> DrawMoney();</span><br><span class="line">btm.process();</span><br><span class="line"><span class="comment">//匿名内部类</span></span><br><span class="line">BankTemplateMethod btm1 = <span class="keyword">new</span> BankTemplateMethod() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transact</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我要存钱"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">btm1.process();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrawMoney</span> <span class="keyword">extends</span> <span class="title">BankTemplateMethod</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transact</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我要取款！！！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><blockquote><p>取号排队<br>我要取款！！！<br>反馈评分<br>取号排队<br>我要存钱<br>反馈评分</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GOF设计模式之策略模式-Strategy-与模板方法模式-template-method&quot;&gt;&lt;a href=&quot;#GOF设计模式之策略模式-Strategy-与模板方法模式-template-method&quot; class=&quot;headerlink&quot; title=&quot;GOF设计模式之策略模式(Strategy)与模板方法模式(template method)&quot;&gt;&lt;/a&gt;GOF设计模式之策略模式(Strategy)与模板方法模式(template method)&lt;/h1&gt;
    
    </summary>
    
      <category term="GOF设计模式" scheme="http://yoursite.com/categories/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="GOF设计模式" scheme="http://yoursite.com/tags/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>GOF23设计模式（十二）</title>
    <link href="http://yoursite.com/2019/08/30/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/30/GOF23设计模式（十二）/</id>
    <published>2019-08-30T12:53:16.000Z</published>
    <updated>2019-08-30T13:29:18.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GOF设计模式之解释器模式-Interpreter-与访问者模式-Visitor"><a href="#GOF设计模式之解释器模式-Interpreter-与访问者模式-Visitor" class="headerlink" title="GOF设计模式之解释器模式(Interpreter)与访问者模式(Visitor)"></a>GOF设计模式之解释器模式(Interpreter)与访问者模式(Visitor)</h1><p>这两个模式了解即可，可自行百度，谷歌。<a id="more"></a></p><h1 id="解释器模式-Interpreter"><a href="#解释器模式-Interpreter" class="headerlink" title="解释器模式(Interpreter)"></a>解释器模式(Interpreter)</h1><p>用于描述如何构成一个简单的语言解释器，主要用于使用面向对象语言开发的编译器和解释器设计。</p><h1 id="访问者模式-Visitor"><a href="#访问者模式-Visitor" class="headerlink" title="访问者模式(Visitor)"></a>访问者模式(Visitor)</h1><p>表示一个作用于对象结构中的各元素的操作，它使我们可以在不改变元素的类的前提下</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GOF设计模式之解释器模式-Interpreter-与访问者模式-Visitor&quot;&gt;&lt;a href=&quot;#GOF设计模式之解释器模式-Interpreter-与访问者模式-Visitor&quot; class=&quot;headerlink&quot; title=&quot;GOF设计模式之解释器模式(Interpreter)与访问者模式(Visitor)&quot;&gt;&lt;/a&gt;GOF设计模式之解释器模式(Interpreter)与访问者模式(Visitor)&lt;/h1&gt;&lt;p&gt;这两个模式了解即可，可自行百度，谷歌。
    
    </summary>
    
      <category term="GOF设计模式" scheme="http://yoursite.com/categories/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="GOF设计模式" scheme="http://yoursite.com/tags/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>GOF23设计模式（十一）</title>
    <link href="http://yoursite.com/2019/08/30/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/30/GOF23设计模式（十一）/</id>
    <published>2019-08-30T05:48:14.000Z</published>
    <updated>2019-08-30T13:29:11.202Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GOF设计模式之中介者模式-Mediator-与命令模式-Command"><a href="#GOF设计模式之中介者模式-Mediator-与命令模式-Command" class="headerlink" title="GOF设计模式之中介者模式(Mediator)与命令模式(Command)"></a>GOF设计模式之中介者模式(Mediator)与命令模式(Command)</h1><a id="more"></a><h1 id="中介者模式-Mediator"><a href="#中介者模式-Mediator" class="headerlink" title="中介者模式(Mediator)"></a>中介者模式(Mediator)</h1><p>定义一个中介对象来封装一系列对象之间的交互，使原有对象之间的耦合松散，且可以独立地改变它们之间的交互。中介者模式又叫调停模式，它是迪米特法则的典型应用。</p><h2 id="职责接口"><a href="#职责接口" class="headerlink" title="职责接口"></a>职责接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">register</span><span class="params">(String dname,Department d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">command</span><span class="params">(String dname)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="部门接口"><a href="#部门接口" class="headerlink" title="部门接口"></a>部门接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同事类接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selfAction</span><span class="params">()</span></span>; <span class="comment">//做本部门的事情</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">outAction</span><span class="params">()</span></span>; <span class="comment">//发出申请</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="研发部"><a href="#研发部" class="headerlink" title="研发部"></a>研发部</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Development</span> <span class="keyword">implements</span> <span class="title">Department</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Mediator m; <span class="comment">//持有中介者的引用</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Development</span><span class="params">(Mediator m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.m = m;</span><br><span class="line">m.register(<span class="string">"development"</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selfAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"开发项目"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"研发部汇报工作"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="财务部"><a href="#财务部" class="headerlink" title="财务部"></a>财务部</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Finacial</span> <span class="keyword">implements</span> <span class="title">Department</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Mediator m; <span class="comment">//持有中介者的引用</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Finacial</span><span class="params">(Mediator m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.m = m;</span><br><span class="line">m.register(<span class="string">"finacial"</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selfAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"数钱"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"财务部汇报工作"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="市场部"><a href="#市场部" class="headerlink" title="市场部"></a>市场部</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Market</span> <span class="keyword">implements</span> <span class="title">Department</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Mediator m; <span class="comment">//持有中介者的引用</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Market</span><span class="params">(Mediator m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.m = m;</span><br><span class="line">m.register(<span class="string">"market"</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selfAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"调研接项目"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"市场部汇报工作"</span>);</span><br><span class="line">m.command(<span class="string">"finacial"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总管理"><a href="#总管理" class="headerlink" title="总管理"></a>总管理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">President</span> <span class="keyword">implements</span> <span class="title">Mediator</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Map&lt;String,Department&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(String dname, Department d)</span> </span>&#123;</span><br><span class="line">map.put(dname,d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">command</span><span class="params">(String dname)</span> </span>&#123;</span><br><span class="line">map.get(dname).selfAction();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Mediator m=<span class="keyword">new</span> President();</span><br><span class="line">Market market=<span class="keyword">new</span> Market(m);</span><br><span class="line">Development devp=<span class="keyword">new</span> Development(m);</span><br><span class="line">Finacial f=<span class="keyword">new</span> Finacial(m);</span><br><span class="line">market.selfAction();</span><br><span class="line">market.outAction();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><blockquote><p>调研接项目<br>市场部汇报工作<br>数钱</p></blockquote><h1 id="命令模式-Command"><a href="#命令模式-Command" class="headerlink" title="命令模式(Command)"></a>命令模式(Command)</h1><p>将请求封装为一个对象，从而使我们可用不同的请求对客户端进行参数化。</p><h2 id="执行者"><a href="#执行者" class="headerlink" title="执行者"></a>执行者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 真正的执行者</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Receiver.action()"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="命令接口及实现"><a href="#命令接口及实现" class="headerlink" title="命令接口及实现"></a>命令接口及实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回一个结果为空的方法</span></span><br><span class="line"><span class="comment"> * 根据实际需求可以写多个不同方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommand</span> <span class="keyword">implements</span> <span class="title">Command</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Receiver receiver;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcreteCommand</span><span class="params">(Receiver receiver)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//自行添加相关处理</span></span><br><span class="line">receiver.action();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Invoke</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Command command;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Invoke</span><span class="params">(Command command)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.command = command;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//业务方法，调用命令类的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">command.execute();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Command c=<span class="keyword">new</span> ConcreteCommand(<span class="keyword">new</span> Receiver());</span><br><span class="line">Invoke i=<span class="keyword">new</span> Invoke(c);</span><br><span class="line">i.call();</span><br><span class="line"><span class="comment">//new Receiver().action();</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><blockquote><p>Receiver.action()</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GOF设计模式之中介者模式-Mediator-与命令模式-Command&quot;&gt;&lt;a href=&quot;#GOF设计模式之中介者模式-Mediator-与命令模式-Command&quot; class=&quot;headerlink&quot; title=&quot;GOF设计模式之中介者模式(Mediator)与命令模式(Command)&quot;&gt;&lt;/a&gt;GOF设计模式之中介者模式(Mediator)与命令模式(Command)&lt;/h1&gt;
    
    </summary>
    
      <category term="GOF设计模式" scheme="http://yoursite.com/categories/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="GOF设计模式" scheme="http://yoursite.com/tags/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>GOF23设计模式（十）</title>
    <link href="http://yoursite.com/2019/08/29/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/29/GOF23设计模式（十）/</id>
    <published>2019-08-29T15:40:47.000Z</published>
    <updated>2019-08-30T13:28:50.426Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GOF设计模式之责任链模式-Chain-of-Responsibility-与迭代器模式-iterator"><a href="#GOF设计模式之责任链模式-Chain-of-Responsibility-与迭代器模式-iterator" class="headerlink" title="GOF设计模式之责任链模式(Chain of Responsibility)与迭代器模式(iterator)"></a>GOF设计模式之责任链模式(Chain of Responsibility)与迭代器模式(iterator)</h1><a id="more"></a><h1 id="责任链模式-Chain-of-Responsibility"><a href="#责任链模式-Chain-of-Responsibility" class="headerlink" title="责任链模式(Chain of Responsibility)"></a>责任链模式(Chain of Responsibility)</h1><p>将能够处理同一类请求的对象连成一条链，所提交的请求沿着链传递，<br>这里写一个公司请假流程管理。</p><h2 id="管理类"><a href="#管理类" class="headerlink" title="管理类"></a>管理类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Leader</span> </span>&#123;</span><br><span class="line"><span class="keyword">protected</span> String name;</span><br><span class="line"><span class="keyword">protected</span> Leader nextLeader; <span class="comment">//责任链上的后继对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Leader</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设定责任链上的后继对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNextLeader</span><span class="params">(Leader nextLeader)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.nextLeader = nextLeader;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//处理请求的核心代码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handlequest</span><span class="params">(LeaveRequest request)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="请假请求"><a href="#请假请求" class="headerlink" title="请假请求"></a>请假请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeaveRequest</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String empName;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> LeaveDays;</span><br><span class="line"><span class="keyword">private</span> String reason;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LeaveRequest</span><span class="params">(String empName, <span class="keyword">int</span> leaveDays, String reason)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.empName = empName;</span><br><span class="line">LeaveDays = leaveDays;</span><br><span class="line"><span class="keyword">this</span>.reason = reason;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEmpName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> empName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmpName</span><span class="params">(String empName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.empName = empName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLeaveDays</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> LeaveDays;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeaveDays</span><span class="params">(<span class="keyword">int</span> leaveDays)</span> </span>&#123;</span><br><span class="line">LeaveDays = leaveDays;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getReason</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> reason;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReason</span><span class="params">(String reason)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.reason = reason;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主任类"><a href="#主任类" class="headerlink" title="主任类"></a>主任类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> <span class="keyword">extends</span> <span class="title">Leader</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlequest</span><span class="params">(LeaveRequest request)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(request.getLeaveDays()&lt;<span class="number">3</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"员工："</span>+request.getEmpName()+<span class="string">"请假，天数："</span>+request.getLeaveDays()</span><br><span class="line">+<span class="string">",理由："</span>+request.getReason());</span><br><span class="line">System.out.println(<span class="string">"主任："</span>+<span class="keyword">this</span>.name+<span class="string">"批准"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.nextLeader!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.nextLeader.handlequest(request);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="经理类"><a href="#经理类" class="headerlink" title="经理类"></a>经理类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Leader</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlequest</span><span class="params">(LeaveRequest request)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(request.getLeaveDays()&lt;<span class="number">10</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"员工："</span>+request.getEmpName()+<span class="string">"请假，天数："</span>+request.getLeaveDays()</span><br><span class="line">+<span class="string">",理由："</span>+request.getReason());</span><br><span class="line">System.out.println(<span class="string">"经理："</span>+<span class="keyword">this</span>.name+<span class="string">"批准"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.nextLeader!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.nextLeader.handlequest(request);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总经理类"><a href="#总经理类" class="headerlink" title="总经理类"></a>总经理类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneralManager</span> <span class="keyword">extends</span> <span class="title">Leader</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">GeneralManager</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlequest</span><span class="params">(LeaveRequest request)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(request.getLeaveDays()&lt;<span class="number">30</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"员工："</span>+request.getEmpName()+<span class="string">"请假，天数："</span>+request.getLeaveDays()</span><br><span class="line">+<span class="string">",理由："</span>+request.getReason());</span><br><span class="line">System.out.println(<span class="string">"总经理："</span>+<span class="keyword">this</span>.name+<span class="string">"批准"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"不通过"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Leader a=<span class="keyword">new</span> Director(<span class="string">"张三"</span>);</span><br><span class="line">Leader b=<span class="keyword">new</span> Manager(<span class="string">"李四"</span>);</span><br><span class="line">Leader c=<span class="keyword">new</span> GeneralManager(<span class="string">"张三"</span>);</span><br><span class="line"><span class="comment">//组织责任链对象关系</span></span><br><span class="line">a.setNextLeader(b);</span><br><span class="line">b.setNextLeader(c);</span><br><span class="line"><span class="comment">//开始请假</span></span><br><span class="line">LeaveRequest req1=<span class="keyword">new</span> LeaveRequest(<span class="string">"老王"</span>, <span class="number">15</span>, <span class="string">"回乡下老家探亲"</span>);</span><br><span class="line">a.handlequest(req1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><blockquote><p>员工：老王请假，天数：15,理由：回乡下老家探亲<br>总经理：张三批准</p></blockquote><h1 id="迭代器模式-iterator"><a href="#迭代器模式-iterator" class="headerlink" title="迭代器模式(iterator)"></a>迭代器模式(iterator)</h1><p> 提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。</p><h2 id="迭代器接口"><a href="#迭代器接口" class="headerlink" title="迭代器接口"></a>迭代器接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义的迭代器接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyIterator</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">first</span><span class="params">()</span></span>; <span class="comment">//将游标指向第一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">next</span><span class="params">()</span></span>; <span class="comment">//将游标指向下一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>; <span class="comment">//判断游标是否存在下一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isFirst</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">islast</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">Object <span class="title">getCurrentObj</span><span class="params">()</span></span>; <span class="comment">//获取当前游标指向的对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义聚合类"><a href="#自定义聚合类" class="headerlink" title="自定义聚合类"></a>自定义聚合类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义聚合类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteMyAggregate</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> List&lt;Object&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObject</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.list.add(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObject</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.list.remove(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;Object&gt; list)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.list = list;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获得迭代器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MyIterator <span class="title">createIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ConcreteIterator();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内部类定义迭代器，可以使用外部类实现</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteIterator</span> <span class="keyword">implements</span> <span class="title">MyIterator</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> cursor; <span class="comment">//定义游标用于记录遍历时的位置 </span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">first</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cursor=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(cursor&lt;list.size()) &#123;</span><br><span class="line">cursor++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(cursor&lt;list.size()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cursor==<span class="number">0</span>?<span class="keyword">true</span>:<span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">islast</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cursor==(list.size()-<span class="number">1</span>)?<span class="keyword">true</span>:<span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getCurrentObj</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> list.get(cursor);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ConcreteMyAggregate cma=<span class="keyword">new</span> ConcreteMyAggregate();</span><br><span class="line">cma.addObject(<span class="string">"a"</span>);</span><br><span class="line">cma.addObject(<span class="string">"b"</span>);</span><br><span class="line">cma.addObject(<span class="string">"c"</span>);</span><br><span class="line">cma.addObject(<span class="string">"d"</span>);</span><br><span class="line">cma.addObject(<span class="string">"e"</span>);</span><br><span class="line">MyIterator iter=cma.createIterator();</span><br><span class="line"><span class="keyword">while</span>(iter.hasNext()) &#123;</span><br><span class="line">System.out.println(iter.getCurrentObj());</span><br><span class="line">iter.next();&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><blockquote><p>a<br>b<br>c<br>d<br>e</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GOF设计模式之责任链模式-Chain-of-Responsibility-与迭代器模式-iterator&quot;&gt;&lt;a href=&quot;#GOF设计模式之责任链模式-Chain-of-Responsibility-与迭代器模式-iterator&quot; class=&quot;headerlink&quot; title=&quot;GOF设计模式之责任链模式(Chain of Responsibility)与迭代器模式(iterator)&quot;&gt;&lt;/a&gt;GOF设计模式之责任链模式(Chain of Responsibility)与迭代器模式(iterator)&lt;/h1&gt;
    
    </summary>
    
      <category term="GOF设计模式" scheme="http://yoursite.com/categories/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="GOF设计模式" scheme="http://yoursite.com/tags/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>GOF23设计模式（九）</title>
    <link href="http://yoursite.com/2019/08/29/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B9%9D%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/29/GOF23设计模式（九）/</id>
    <published>2019-08-29T06:37:33.000Z</published>
    <updated>2019-08-30T13:28:31.457Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GOF设计模式之享元模式-FlyWeight"><a href="#GOF设计模式之享元模式-FlyWeight" class="headerlink" title="GOF设计模式之享元模式(FlyWeight)"></a>GOF设计模式之享元模式(FlyWeight)</h1><p> 享元模式以共享的方式高效地支持大量细粒度对象的重用。<br> 享元对象能做到共享的关键是区分了内部状态和外部状态<br>  ·内部状态：可以共享，不会随环境变化而改变<br>  ·外部状态：不可以共享，会随环境变化而改变</p><a id="more"></a><h2 id="享元类"><a href="#享元类" class="headerlink" title="享元类"></a>享元类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 享元类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ChessFlyWeight</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String c)</span></span>;</span><br><span class="line"><span class="function">String <span class="title">getColor</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(Coordinate c)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteChess</span> <span class="keyword">implements</span> <span class="title">ChessFlyWeight</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcreteChess</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.color=c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(Coordinate c)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"棋子颜色"</span>+color);</span><br><span class="line">System.out.println(<span class="string">"棋子位置"</span>+c.getX()+<span class="string">"-----"</span>+c.getY());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="外部状态"><a href="#外部状态" class="headerlink" title="外部状态"></a>外部状态</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 外部状态UnSharedConcreteFlayWeight</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coordinate</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> x,y;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Coordinate</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.x = x;</span><br><span class="line"><span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.x = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setY</span><span class="params">(<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="享元工厂"><a href="#享元工厂" class="headerlink" title="享元工厂"></a>享元工厂</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 享元工厂</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChessFlyWeightFactory</span> </span>&#123;</span><br><span class="line"><span class="comment">//享元池</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,ChessFlyWeight&gt; map=<span class="keyword">new</span> HashMap&lt;String,ChessFlyWeight&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  ChessFlyWeight <span class="title">getChess</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(map.get(color)!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> map.get(color);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">ChessFlyWeight cfw=<span class="keyword">new</span> ConcreteChess(color);</span><br><span class="line">map.put(color,cfw);</span><br><span class="line"><span class="keyword">return</span> cfw;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ChessFlyWeight chess1=ChessFlyWeightFactory.getChess(<span class="string">"黑色"</span>);</span><br><span class="line">ChessFlyWeight chess2=ChessFlyWeightFactory.getChess(<span class="string">"黑色"</span>);</span><br><span class="line">System.out.println(chess1);</span><br><span class="line">System.out.println(chess2);</span><br><span class="line">System.out.println(<span class="string">"外部状态处理"</span>);</span><br><span class="line">chess1.display(<span class="keyword">new</span> Coordinate(<span class="number">12</span>,<span class="number">5</span>));</span><br><span class="line">chess2.display(<span class="keyword">new</span> Coordinate(<span class="number">15</span>,<span class="number">7</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><blockquote><p>FlyWeight.ConcreteChess@15db9742<br>FlyWeight.ConcreteChess@15db9742<br>外部状态处理<br>棋子颜色黑色<br>棋子位置12—–5<br>棋子颜色黑色<br>棋子位置15—–7</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GOF设计模式之享元模式-FlyWeight&quot;&gt;&lt;a href=&quot;#GOF设计模式之享元模式-FlyWeight&quot; class=&quot;headerlink&quot; title=&quot;GOF设计模式之享元模式(FlyWeight)&quot;&gt;&lt;/a&gt;GOF设计模式之享元模式(FlyWeight)&lt;/h1&gt;&lt;p&gt; 享元模式以共享的方式高效地支持大量细粒度对象的重用。&lt;br&gt; 享元对象能做到共享的关键是区分了内部状态和外部状态&lt;br&gt;  ·内部状态：可以共享，不会随环境变化而改变&lt;br&gt;  ·外部状态：不可以共享，会随环境变化而改变&lt;/p&gt;
    
    </summary>
    
      <category term="GOF设计模式" scheme="http://yoursite.com/categories/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="GOF设计模式" scheme="http://yoursite.com/tags/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>GOF23设计模式（八）</title>
    <link href="http://yoursite.com/2019/08/28/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%85%AB%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/28/GOF23设计模式（八）/</id>
    <published>2019-08-28T12:03:26.000Z</published>
    <updated>2019-08-30T13:28:14.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GOF设计模式之装饰模式-decorator-与外观模式-Facade"><a href="#GOF设计模式之装饰模式-decorator-与外观模式-Facade" class="headerlink" title="GOF设计模式之装饰模式(decorator)与外观模式(Facade)"></a>GOF设计模式之装饰模式(decorator)与外观模式(Facade)</h1><a id="more"></a><h1 id="装饰模式-decorator"><a href="#装饰模式-decorator" class="headerlink" title="装饰模式(decorator)"></a>装饰模式(decorator)</h1><p>动态的为一个对象增加新功能。<br>装饰模式是一种用于代替继承的技术，无需通过继承增加子类就能扩展对象的新功能。使用对象的关联关系代替继承关系，更加灵活，同时避免类型体系的快速膨胀。</p><h2 id="抽象组件与实现"><a href="#抽象组件与实现" class="headerlink" title="抽象组件与实现"></a>抽象组件与实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象组件</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICar</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ConcreteComponent 具体构件角色(真实对象)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">ICar</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"在陆地上跑"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Decorator 装饰角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperCar</span> <span class="keyword">implements</span> <span class="title">ICar</span></span>&#123;</span><br><span class="line"><span class="keyword">protected</span> ICar car;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SuperCar</span><span class="params">(ICar car)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.car = car;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">car.move();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ConcreteDecorator 具体装饰角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyCar</span> <span class="keyword">extends</span> <span class="title">SuperCar</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FlyCar</span><span class="params">(ICar car)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(car);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"在天上飞"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.move();</span><br><span class="line">fly();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WaterCar</span> <span class="keyword">extends</span> <span class="title">SuperCar</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WaterCar</span><span class="params">(ICar car)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(car);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"在水上漂"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.move();</span><br><span class="line">swim();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AiCar</span> <span class="keyword">extends</span> <span class="title">SuperCar</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AiCar</span><span class="params">(ICar car)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(car);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">automove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"自动驾驶"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.move();</span><br><span class="line">automove();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ublic <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Car car=<span class="keyword">new</span> Car();</span><br><span class="line">car.move();</span><br><span class="line">FlyCar flycar=<span class="keyword">new</span> FlyCar(car);</span><br><span class="line">System.out.println(<span class="string">"---添加功能---"</span>);</span><br><span class="line">flycar.move();</span><br><span class="line">WaterCar watercar=<span class="keyword">new</span> WaterCar(flycar);</span><br><span class="line">System.out.println(<span class="string">"---添加功能---"</span>);</span><br><span class="line">watercar.move();;</span><br><span class="line">System.out.println(<span class="string">"---拥有功能---"</span>);</span><br><span class="line">AiCar aicar=<span class="keyword">new</span> AiCar(<span class="keyword">new</span> FlyCar(<span class="keyword">new</span> WaterCar(car)));</span><br><span class="line">aicar.move();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><blockquote><p>在陆地上跑<br>—添加功能—<br>在陆地上跑<br>在天上飞<br>—添加功能—<br>在陆地上跑<br>在天上飞<br>在水上漂<br>—拥有功能—<br>在陆地上跑<br>在水上漂<br>在天上飞<br>自动驾驶</p></blockquote><h1 id="外观模式-Facade"><a href="#外观模式-Facade" class="headerlink" title="外观模式(Facade)"></a>外观模式(Facade)</h1><p>这个模式经常在编程中使用，不管你听没听过这个名字，此模式就是对用户隐藏程序运行细节，只提供一个接口就可以实现。</p><h2 id="代码-代码来自博客"><a href="#代码-代码来自博客" class="headerlink" title="代码(代码来自博客)"></a>代码(代码来自博客)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//https://blog.csdn.net/u012361379/article/details/88820428  码农日常</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FacadeTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Facade f = <span class="keyword">new</span> Facade();</span><br><span class="line">        f.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//外观角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SubSystem01 obj1 = <span class="keyword">new</span> SubSystem01();</span><br><span class="line">    <span class="keyword">private</span> SubSystem02 obj2 = <span class="keyword">new</span> SubSystem02();</span><br><span class="line">    <span class="keyword">private</span> SubSystem03 obj3 = <span class="keyword">new</span> SubSystem03();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        obj1.method1();</span><br><span class="line">        obj2.method2();</span><br><span class="line">        obj3.method3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子系统角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSystem01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子系统01的method1()被调用！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子系统角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSystem02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子系统02的method2()被调用！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子系统角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSystem03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子系统03的method3()被调用！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><blockquote><p>子系统01的method1()被调用！<br>子系统02的method2()被调用！<br>子系统03的method3()被调用！</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GOF设计模式之装饰模式-decorator-与外观模式-Facade&quot;&gt;&lt;a href=&quot;#GOF设计模式之装饰模式-decorator-与外观模式-Facade&quot; class=&quot;headerlink&quot; title=&quot;GOF设计模式之装饰模式(decorator)与外观模式(Facade)&quot;&gt;&lt;/a&gt;GOF设计模式之装饰模式(decorator)与外观模式(Facade)&lt;/h1&gt;
    
    </summary>
    
      <category term="GOF设计模式" scheme="http://yoursite.com/categories/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="GOF设计模式" scheme="http://yoursite.com/tags/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>GOF23设计模式（七）</title>
    <link href="http://yoursite.com/2019/08/28/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%83%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/28/GOF23设计模式（七）/</id>
    <published>2019-08-28T06:02:02.000Z</published>
    <updated>2019-08-30T13:27:59.138Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GOF设计模式之桥接-bridge-模式与组合模式-composite"><a href="#GOF设计模式之桥接-bridge-模式与组合模式-composite" class="headerlink" title="GOF设计模式之桥接(bridge)模式与组合模式(composite)"></a>GOF设计模式之桥接(bridge)模式与组合模式(composite)</h1> <a id="more"></a><h1 id="桥接-bridge-模式"><a href="#桥接-bridge-模式" class="headerlink" title="桥接(bridge)模式"></a>桥接(bridge)模式</h1><p>桥接模式可以取代多层继承的方案。多层继承违背了单一职责原则，复用性较差，类的个数也非常多。桥接模式可以极大的减少子类的个数，从而降低管理和维护的成本。<br>桥接模式极大提高了系统可扩展性，在两个变化维度中任意扩展一个维度，都不需要修改原有的系统，符合开闭原则,适合多维度开发。</p><h2 id="接口以及实现"><a href="#接口以及实现" class="headerlink" title="接口以及实现"></a>接口以及实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Brand</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lenovo</span> <span class="keyword">implements</span> <span class="title">Brand</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.print(<span class="string">"销售联想品牌"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dell</span> <span class="keyword">implements</span> <span class="title">Brand</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.print(<span class="string">"销售戴尔品牌"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承类"><a href="#继承类" class="headerlink" title="继承类"></a>继承类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 电脑类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line"><span class="keyword">protected</span> Brand brand;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">(Brand brand)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.brand = brand;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">brand.sale();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Desktop</span> <span class="keyword">extends</span> <span class="title">Computer</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Desktop</span><span class="params">(Brand brand)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(brand);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.sale();</span><br><span class="line">System.out.println(<span class="string">"台式机"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Laptop</span> <span class="keyword">extends</span> <span class="title">Computer</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Laptop</span><span class="params">(Brand brand)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(brand);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.sale();</span><br><span class="line">System.out.println(<span class="string">"笔记本"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测设"><a href="#测设" class="headerlink" title="测设"></a>测设</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//联想笔记本</span></span><br><span class="line">Computer c=<span class="keyword">new</span> Laptop(<span class="keyword">new</span> Lenovo());</span><br><span class="line">c.sale();</span><br><span class="line">Computer c2=<span class="keyword">new</span> Desktop(<span class="keyword">new</span> Dell());</span><br><span class="line">c2.sale();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><blockquote><p>销售联想品牌笔记本<br>销售戴尔品牌台式机</p></blockquote><h1 id="组合模式-composite"><a href="#组合模式-composite" class="headerlink" title="组合模式(composite)"></a>组合模式(composite)</h1><p> 抽象构件(Component)角色：定义了叶子和容器构件的共同点。<br> 叶子(Leaf)构件角色：无子节点。<br> 容器(Composite)构件角色：有容器特征，可以包含子节点。</p><h2 id="组合模式模板"><a href="#组合模式模板" class="headerlink" title="组合模式模板"></a>组合模式模板</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模板</span></span><br><span class="line"><span class="comment"> * 抽象组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//叶子组件</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Leaf</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//容器组件</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Composite</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Component c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component c)</span></span>;</span><br><span class="line"><span class="function">Component <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模拟杀毒"><a href="#模拟杀毒" class="headerlink" title="模拟杀毒"></a>模拟杀毒</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AbstractFile</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">killVirus</span><span class="params">()</span></span>; <span class="comment">//杀毒</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageFile</span> <span class="keyword">implements</span> <span class="title">AbstractFile</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ImageFile</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">killVirus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"图像文件:"</span>+name+<span class="string">",进行查杀"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextFile</span> <span class="keyword">implements</span> <span class="title">AbstractFile</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TextFile</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">killVirus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"文本文件:"</span>+name+<span class="string">",进行查杀"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VideoFile</span> <span class="keyword">implements</span> <span class="title">AbstractFile</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">VideoFile</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">killVirus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"视频文件:"</span>+name+<span class="string">",进行查杀"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Folder</span> <span class="keyword">implements</span> <span class="title">AbstractFile</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="comment">//定义容器，用来存放本容器构建下的子节点</span></span><br><span class="line"><span class="keyword">private</span> List&lt;AbstractFile&gt; list=<span class="keyword">new</span> ArrayList&lt;AbstractFile&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Folder</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(AbstractFile file)</span> </span>&#123;</span><br><span class="line">list.add(file);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(AbstractFile file)</span> </span>&#123;</span><br><span class="line">list.remove(file);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractFile <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> list.get(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">killVirus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"文件夹:"</span>+name+<span class="string">",进行查杀"</span>);</span><br><span class="line"><span class="keyword">for</span>(AbstractFile file : list) &#123;</span><br><span class="line">file.killVirus();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">AbstractFile f1,f2,f3,f4;</span><br><span class="line">Folder f,ff;</span><br><span class="line">f=<span class="keyword">new</span> Folder(<span class="string">"我的收藏"</span>);</span><br><span class="line">f1=<span class="keyword">new</span> ImageFile(<span class="string">"图片.jpg"</span>);</span><br><span class="line">f2=<span class="keyword">new</span> TextFile(<span class="string">"C.txt"</span>);</span><br><span class="line">f.add(f1); f.add(f2);</span><br><span class="line">ff=<span class="keyword">new</span> Folder(<span class="string">"电影"</span>);</span><br><span class="line">f3=<span class="keyword">new</span> VideoFile(<span class="string">"的士速递.mp4"</span>);</span><br><span class="line">f4=<span class="keyword">new</span> VideoFile(<span class="string">"鬼怪疑云.mp4"</span>);</span><br><span class="line">ff.add(f3); ff.add(f4);</span><br><span class="line">f.add(ff);</span><br><span class="line">f.killVirus();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><blockquote><p>文件夹:我的收藏,进行查杀<br>图像文件:图片.jpg,进行查杀<br>文本文件:C.txt,进行查杀<br>文件夹:电影,进行查杀<br>视频文件:的士速递.mp4,进行查杀<br>视频文件:鬼怪疑云.mp4,进行查杀</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GOF设计模式之桥接-bridge-模式与组合模式-composite&quot;&gt;&lt;a href=&quot;#GOF设计模式之桥接-bridge-模式与组合模式-composite&quot; class=&quot;headerlink&quot; title=&quot;GOF设计模式之桥接(bridge)模式与组合模式(composite)&quot;&gt;&lt;/a&gt;GOF设计模式之桥接(bridge)模式与组合模式(composite)&lt;/h1&gt;
    
    </summary>
    
      <category term="GOF设计模式" scheme="http://yoursite.com/categories/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="GOF设计模式" scheme="http://yoursite.com/tags/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>GOF23设计模式（六）</title>
    <link href="http://yoursite.com/2019/08/27/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%85%AD%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/27/GOF23设计模式（六）/</id>
    <published>2019-08-27T06:15:00.000Z</published>
    <updated>2019-08-30T13:27:36.482Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GOF设计模式之适配器-Adapter-模式与代理模式-Proxy-pattern"><a href="#GOF设计模式之适配器-Adapter-模式与代理模式-Proxy-pattern" class="headerlink" title="GOF设计模式之适配器(Adapter)模式与代理模式(Proxy pattern)"></a>GOF设计模式之适配器(Adapter)模式与代理模式(Proxy pattern)</h1><a id="more"></a><h1 id="适配器-Adapter-模式"><a href="#适配器-Adapter-模式" class="headerlink" title="适配器(Adapter)模式"></a>适配器(Adapter)模式</h1><p> 将一个类的接口转换成客户希望的另外一个接口，Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以在一起工作。</p><h2 id="需要被适配的类"><a href="#需要被适配的类" class="headerlink" title="需要被适配的类"></a>需要被适配的类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需要被适配的类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"可以完成需求功能"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 适配器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">implements</span> <span class="title">Target</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Adaptee adaptee;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Adapter</span><span class="params">(Adaptee adaptee)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.adaptee = adaptee;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">qust</span><span class="params">()</span> </span>&#123;</span><br><span class="line">adaptee.request();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">qust</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Target t)</span> </span>&#123;</span><br><span class="line">t.qust();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Client c=<span class="keyword">new</span> Client();</span><br><span class="line">Target t=<span class="keyword">new</span> Adapter(<span class="keyword">new</span> Adaptee());</span><br><span class="line">c.test(t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><blockquote><p>可以完成需求功能</p></blockquote><h1 id="代理模式-Proxy-pattern"><a href="#代理模式-Proxy-pattern" class="headerlink" title="代理模式(Proxy pattern)"></a>代理模式(Proxy pattern)</h1><p> 通过代理，控制对对象的访问。</p><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><h3 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Star</span> </span>&#123;</span><br><span class="line"><span class="comment">//面谈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">confer</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//签合同</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">signContract</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//订票</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bookTicket</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//唱歌</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//收钱</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">collectMoney</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="真实对象"><a href="#真实对象" class="headerlink" title="真实对象"></a>真实对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealStar</span> <span class="keyword">implements</span> <span class="title">Star</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"RealStar.confer()"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">signContract</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"RealStar.signContract()"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bookTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"RealStar.bookTicket()"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"RealStar(本人唱歌).sing()"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">collectMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"RealStar.collectMoney()"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代理对象"><a href="#代理对象" class="headerlink" title="代理对象"></a>代理对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyStar</span> <span class="keyword">implements</span> <span class="title">Star</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Star star;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProxyStar</span><span class="params">(Star star)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.star = star;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"ProxyStar.confer()"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">signContract</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"ProxyStar.signContract()"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bookTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"ProxyStar.bookTicket()"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//唱歌需歌手本人唱</span></span><br><span class="line">star.sing();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">collectMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"ProxyStar.collectMoney()"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Star real=<span class="keyword">new</span> RealStar();</span><br><span class="line">Star proxy=<span class="keyword">new</span> ProxyStar(real);</span><br><span class="line">proxy.confer();</span><br><span class="line">proxy.signContract();</span><br><span class="line">proxy.bookTicket();</span><br><span class="line">proxy.sing();</span><br><span class="line">proxy.collectMoney();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h4><blockquote><p>ProxyStar.confer()<br>ProxyStar.signContract()<br>ProxyStar.bookTicket()<br>RealStar(本人唱歌).sing()<br>ProxyStar.collectMoney()</p></blockquote><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>类接口和RealStar方法与上方一致</p><h3 id="实现InvocationHandler接口"><a href="#实现InvocationHandler接口" class="headerlink" title="实现InvocationHandler接口"></a>实现InvocationHandler接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StarHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line">Star realStar;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StarHandler</span><span class="params">(Star realStar)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.realStar = realStar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">Object object=<span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//这里有点问题</span></span><br><span class="line"><span class="keyword">if</span>(method.getName().equals(<span class="string">"sing"</span>))</span><br><span class="line">&#123;</span><br><span class="line">object=method.invoke(realStar, args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Star realStar=<span class="keyword">new</span> RealStar();</span><br><span class="line">StarHandler handler=<span class="keyword">new</span> StarHandler(realStar);</span><br><span class="line">Star proxy=(Star) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="keyword">new</span> Class[] &#123;Star.class&#125;, handler);</span><br><span class="line">proxy.sing();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h4><blockquote><p>RealStar(本人唱歌).sing()</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GOF设计模式之适配器-Adapter-模式与代理模式-Proxy-pattern&quot;&gt;&lt;a href=&quot;#GOF设计模式之适配器-Adapter-模式与代理模式-Proxy-pattern&quot; class=&quot;headerlink&quot; title=&quot;GOF设计模式之适配器(Adapter)模式与代理模式(Proxy pattern)&quot;&gt;&lt;/a&gt;GOF设计模式之适配器(Adapter)模式与代理模式(Proxy pattern)&lt;/h1&gt;
    
    </summary>
    
      <category term="GOF设计模式" scheme="http://yoursite.com/categories/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="GOF设计模式" scheme="http://yoursite.com/tags/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>GOF23设计模式（五）</title>
    <link href="http://yoursite.com/2019/08/26/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/26/GOF23设计模式（五）/</id>
    <published>2019-08-26T12:45:46.000Z</published>
    <updated>2019-08-30T13:27:13.637Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GOF设计模式之原型模式（prototype）"><a href="#GOF设计模式之原型模式（prototype）" class="headerlink" title="GOF设计模式之原型模式（prototype）"></a>GOF设计模式之原型模式（prototype）</h1><p>具有深克隆和浅克隆两种方法,使用原型模式需要继承Cloneable,原型模式一般用在需要new对象要耗费大量资源时使用。（反序列可以实现深克隆，本文章没有实现）</p><a id="more"></a><h1 id="浅克隆"><a href="#浅克隆" class="headerlink" title="浅克隆"></a>浅克隆</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sheep</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Date birthday;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.clone();<span class="comment">//Object的clone方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Sheep</span><span class="params">(String name, Date birthday)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> birthday;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Sheep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原型模式（浅克隆）共同使用对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">Date date=<span class="keyword">new</span> Date(<span class="number">12345</span>);</span><br><span class="line">Sheep s1 =<span class="keyword">new</span> Sheep(<span class="string">"张三"</span>,date);</span><br><span class="line">Sheep s2=(Sheep)s1.clone();</span><br><span class="line">System.out.println(s1.getBirthday());</span><br><span class="line">date.setTime(<span class="number">564321654</span>);</span><br><span class="line">System.out.println(<span class="string">"修改后"</span>+s1.getBirthday());</span><br><span class="line">System.out.println(s2.getBirthday());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><blockquote><p>修改时间对象会影响克隆的对象<br>Thu Jan 01 08:00:12 CST 1970<br>修改后Wed Jan 07 20:45:21 CST 1970<br>Wed Jan 07 20:45:21 CST 1970</p></blockquote><h1 id="深克隆"><a href="#深克隆" class="headerlink" title="深克隆"></a>深克隆</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sheep</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Date birthday;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">Sheep s= (Sheep)<span class="keyword">super</span>.clone();</span><br><span class="line"><span class="comment">//深复制</span></span><br><span class="line">s.birthday=(Date) <span class="keyword">this</span>.birthday.clone();<span class="comment">//把属性也克隆</span></span><br><span class="line"><span class="keyword">return</span> s;<span class="comment">//返回s;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Sheep</span><span class="params">(String name, Date birthday)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> birthday;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Sheep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原型模式（深克隆）克隆对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">Date date=<span class="keyword">new</span> Date(<span class="number">12345</span>);</span><br><span class="line">Sheep s1 =<span class="keyword">new</span> Sheep(<span class="string">"张三"</span>,date);</span><br><span class="line">Sheep s2=(Sheep)s1.clone();</span><br><span class="line">System.out.println(s1.getBirthday());</span><br><span class="line">date.setTime(<span class="number">564321654</span>);</span><br><span class="line">System.out.println(<span class="string">"修改后"</span>+s1.getBirthday());</span><br><span class="line">System.out.println(s2.getBirthday());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><blockquote><p>修改时间对象不会影响克隆的对象<br>Thu Jan 01 08:00:12 CST 1970<br>修改后Wed Jan 07 20:45:21 CST 1970<br>Thu Jan 01 08:00:12 CST 1970</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GOF设计模式之原型模式（prototype）&quot;&gt;&lt;a href=&quot;#GOF设计模式之原型模式（prototype）&quot; class=&quot;headerlink&quot; title=&quot;GOF设计模式之原型模式（prototype）&quot;&gt;&lt;/a&gt;GOF设计模式之原型模式（prototype）&lt;/h1&gt;&lt;p&gt;具有深克隆和浅克隆两种方法,使用原型模式需要继承Cloneable,原型模式一般用在需要new对象要耗费大量资源时使用。（反序列可以实现深克隆，本文章没有实现）&lt;/p&gt;
    
    </summary>
    
      <category term="GOF设计模式" scheme="http://yoursite.com/categories/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="GOF设计模式" scheme="http://yoursite.com/tags/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>GOF23设计模式（四）</title>
    <link href="http://yoursite.com/2019/08/26/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/26/GOF23设计模式（四）/</id>
    <published>2019-08-26T07:35:43.000Z</published>
    <updated>2019-08-30T13:27:08.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GOF设计模式之建造者模式-Builder"><a href="#GOF设计模式之建造者模式-Builder" class="headerlink" title="GOF设计模式之建造者模式(Builder)"></a>GOF设计模式之建造者模式(Builder)</h1><p>建造者模式<a id="more"></a></p><h1 id="接口方法"><a href="#接口方法" class="headerlink" title="接口方法"></a>接口方法</h1><h2 id="飞船接口"><a href="#飞船接口" class="headerlink" title="飞船接口"></a>飞船接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AirShipBuilder</span> </span>&#123;</span><br><span class="line"><span class="function">Engine <span class="title">engineBuilder</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">OrbitalModule <span class="title">orbitaModuleBuilder</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">EscapeTower <span class="title">escapeTowerBuilder</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="管理（建造）"><a href="#管理（建造）" class="headerlink" title="管理（建造）"></a>管理（建造）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line"><span class="function">AirShip <span class="title">creatAirShip</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="继承飞船接口"><a href="#继承飞船接口" class="headerlink" title="继承飞船接口"></a>继承飞船接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XXAirShipBuilder</span> <span class="keyword">implements</span> <span class="title">AirShipBuilder</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Engine <span class="title">engineBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"建造引擎"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Engine(<span class="string">"XX牌引擎"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> OrbitalModule <span class="title">orbitaModuleBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"建造轨道舱"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> OrbitalModule(<span class="string">"XX牌轨道舱"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EscapeTower <span class="title">escapeTowerBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"建造逃逸塔"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> EscapeTower(<span class="string">"XX牌逃逸塔"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承建造接口"><a href="#继承建造接口" class="headerlink" title="继承建造接口"></a>继承建造接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AirShipDirector</span> <span class="keyword">implements</span> <span class="title">Director</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> AirShipBuilder builder;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AirShipDirector</span><span class="params">(AirShipBuilder builder)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.builder = builder;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AirShip <span class="title">creatAirShip</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Engine e=builder.engineBuilder();</span><br><span class="line">OrbitalModule d=builder.orbitaModuleBuilder();</span><br><span class="line">EscapeTower t=builder.escapeTowerBuilder();</span><br><span class="line"></span><br><span class="line">AirShip ship=<span class="keyword">new</span> AirShip();</span><br><span class="line">ship.setEngine(e);</span><br><span class="line">ship.setOrbitalModule(d);</span><br><span class="line">ship.setEscapeTower(t);</span><br><span class="line"><span class="keyword">return</span> ship;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="飞船类与相关组件"><a href="#飞船类与相关组件" class="headerlink" title="飞船类与相关组件"></a>飞船类与相关组件</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * XX牌飞船</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AirShip</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> OrbitalModule orbitalModule; <span class="comment">//轨道舱</span></span><br><span class="line"><span class="keyword">private</span> Engine engine; <span class="comment">//发动机</span></span><br><span class="line"><span class="keyword">private</span> EscapeTower escapeTower; <span class="comment">//逃逸塔</span></span><br><span class="line"><span class="comment">//这里可以加入相关方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> OrbitalModule <span class="title">getOrbitalModule</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> orbitalModule;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrbitalModule</span><span class="params">(OrbitalModule orbitalModule)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.orbitalModule = orbitalModule;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Engine <span class="title">getEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> engine;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEngine</span><span class="params">(Engine engine)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.engine = engine;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> EscapeTower <span class="title">getEscapeTower</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> escapeTower;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEscapeTower</span><span class="params">(EscapeTower escapeTower)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.escapeTower = escapeTower;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrbitalModule</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OrbitalModule</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Engine</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Engine</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EscapeTower</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">EscapeTower</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>public class Client {<br>    public static void main(String[] args) {<br>        AirShipDirector director=new AirShipDirector(new XXAirShipBuilder());<br>        AirShip ship=director.creatAirShip();<br>        System.out.println(ship.getEngine().getName());<br>    }<br>}```</p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>建造引擎<br>建造轨道舱<br>建造逃逸塔<br>XX牌引擎</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GOF设计模式之建造者模式-Builder&quot;&gt;&lt;a href=&quot;#GOF设计模式之建造者模式-Builder&quot; class=&quot;headerlink&quot; title=&quot;GOF设计模式之建造者模式(Builder)&quot;&gt;&lt;/a&gt;GOF设计模式之建造者模式(Builder)&lt;/h1&gt;&lt;p&gt;建造者模式
    
    </summary>
    
      <category term="GOF设计模式" scheme="http://yoursite.com/categories/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="GOF设计模式" scheme="http://yoursite.com/tags/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>GOF23设计模式（三）</title>
    <link href="http://yoursite.com/2019/08/25/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/25/GOF23设计模式（三）/</id>
    <published>2019-08-25T13:49:58.000Z</published>
    <updated>2019-08-30T13:27:02.626Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GOF设计模式之工厂模式-Factory"><a href="#GOF设计模式之工厂模式-Factory" class="headerlink" title="GOF设计模式之工厂模式(Factory)"></a>GOF设计模式之工厂模式(Factory)</h1><p> 实例化对象，用工厂方法代替new操作。<br> 将选择实现类、创建对象统一管理和控制。从而将调用者跟我们的实现类解耦。</p><a id="more"></a><h1 id="工厂模式之简单工厂模式"><a href="#工厂模式之简单工厂模式" class="headerlink" title="工厂模式之简单工厂模式"></a>工厂模式之简单工厂模式</h1><h2 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承接口实现方法"><a href="#继承接口实现方法" class="headerlink" title="继承接口实现方法"></a>继承接口实现方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"猫在叫"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"狗在叫"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工厂"><a href="#工厂" class="headerlink" title="工厂"></a>工厂</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animalfactory</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Animal <span class="title">get</span><span class="params">(String st)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(st.equals(<span class="string">"猫"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Cat();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(st.equals(<span class="string">"狗"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Dog();</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单工厂模式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123; <span class="comment">//调用者</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Animal c1=Animalfactory.get(<span class="string">"猫"</span>);</span><br><span class="line">Animal c2=Animalfactory.get(<span class="string">"狗"</span>);</span><br><span class="line">c1.run();</span><br><span class="line">c2.run();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="GOF设计模式之工厂方法模式"><a href="#GOF设计模式之工厂方法模式" class="headerlink" title="GOF设计模式之工厂方法模式"></a>GOF设计模式之工厂方法模式</h1><h2 id="接口实现-1"><a href="#接口实现-1" class="headerlink" title="接口实现"></a>接口实现</h2><h3 id="Animal接口"><a href="#Animal接口" class="headerlink" title="Animal接口"></a>Animal接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Creatfactory接口"><a href="#Creatfactory接口" class="headerlink" title="Creatfactory接口"></a>Creatfactory接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Creatfactory</span> </span>&#123;</span><br><span class="line"><span class="function">Animal <span class="title">creatAnimal</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承接口实现方法-1"><a href="#继承接口实现方法-1" class="headerlink" title="继承接口实现方法"></a>继承接口实现方法</h2><h3 id="继承Animal"><a href="#继承Animal" class="headerlink" title="继承Animal"></a>继承Animal</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"猫在叫"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"狗在叫"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承Creatfactory"><a href="#继承Creatfactory" class="headerlink" title="继承Creatfactory"></a>继承Creatfactory</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Catfactory</span> <span class="keyword">implements</span> <span class="title">Creatfactory</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Animal <span class="title">creatAnimal</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Cat();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dogfactory</span> <span class="keyword">implements</span> <span class="title">Creatfactory</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Animal <span class="title">creatAnimal</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Dog();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工厂方法模式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Animal c1=<span class="keyword">new</span> Catfactory().creatAnimal();</span><br><span class="line">Animal c2=<span class="keyword">new</span> Dogfactory().creatAnimal();</span><br><span class="line">c1.run();</span><br><span class="line">c2.run();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="GOF设计模式之抽象工厂模式"><a href="#GOF设计模式之抽象工厂模式" class="headerlink" title="GOF设计模式之抽象工厂模式"></a>GOF设计模式之抽象工厂模式</h1><h2 id="接口实现-2"><a href="#接口实现-2" class="headerlink" title="接口实现"></a>接口实现</h2><h3 id="Tyre接口"><a href="#Tyre接口" class="headerlink" title="Tyre接口"></a>Tyre接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Tyre</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">revolve</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Seat接口"><a href="#Seat接口" class="headerlink" title="Seat接口"></a>Seat接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Seat</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">massage</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Engine接口"><a href="#Engine接口" class="headerlink" title="Engine接口"></a>Engine接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Engine</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CarFactory接口"><a href="#CarFactory接口" class="headerlink" title="CarFactory接口"></a>CarFactory接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line"><span class="function">Engine <span class="title">creatEngine</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">Seat <span class="title">creatSeat</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">Tyre <span class="title">creatTyre</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承接口实现方法-2"><a href="#继承接口实现方法-2" class="headerlink" title="继承接口实现方法"></a>继承接口实现方法</h2><h3 id="继承Tyre"><a href="#继承Tyre" class="headerlink" title="继承Tyre"></a>继承Tyre</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LuxuryTyre</span> <span class="keyword">implements</span> <span class="title">Tyre</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">revolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"磨损小"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LowTyre</span> <span class="keyword">implements</span> <span class="title">Tyre</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">revolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"磨损大"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承Seat"><a href="#继承Seat" class="headerlink" title="继承Seat"></a>继承Seat</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LuxurySeat</span> <span class="keyword">implements</span> <span class="title">Seat</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">massage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"可以按摩"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LowSeat</span> <span class="keyword">implements</span> <span class="title">Seat</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">massage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"不可以按摩"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承Engine"><a href="#继承Engine" class="headerlink" title="继承Engine"></a>继承Engine</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LuxuryEngine</span> <span class="keyword">implements</span> <span class="title">Engine</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"跑的快"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"启动快"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LowEngine</span> <span class="keyword">implements</span> <span class="title">Engine</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"跑的慢"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"启动慢"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承CarFactory"><a href="#继承CarFactory" class="headerlink" title="继承CarFactory"></a>继承CarFactory</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LuxuryCarFactory</span> <span class="keyword">implements</span> <span class="title">CarFactory</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Engine <span class="title">creatEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> LuxuryEngine();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Seat <span class="title">creatSeat</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> LuxurySeat();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Tyre <span class="title">creatTyre</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> LuxuryTyre();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LowCarFactory</span> <span class="keyword">implements</span> <span class="title">CarFactory</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Engine <span class="title">creatEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> LowEngine();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Seat <span class="title">creatSeat</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> LowSeat();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Tyre <span class="title">creatTyre</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> LowTyre();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">CarFactory factory=<span class="keyword">new</span> LuxuryCarFactory();</span><br><span class="line">Engine e=factory.creatEngine();</span><br><span class="line">CarFactory factory1=<span class="keyword">new</span> LowCarFactory();</span><br><span class="line">Engine e1=factory1.creatEngine();</span><br><span class="line">e.run();</span><br><span class="line">e.start();</span><br><span class="line">e1.run();</span><br><span class="line">e1.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h4 id="·核心本质"><a href="#·核心本质" class="headerlink" title="·核心本质"></a>·核心本质</h4><p>   – 实例化对象，用工厂方法代替new操作。<br>   – 将选择实现类、创建对象统一管理和控制。从而将调用者跟我们的实现类解耦。</p><h4 id="·工厂模式"><a href="#·工厂模式" class="headerlink" title="·工厂模式"></a>·工厂模式</h4><p>  – 简单工厂模式<br>      ·用来生产同一等级结构中的任意产品。（对于增加新的产品，需要修改已有代码）<br>  – 工厂方法模式<br>      ·用来生产同一等级结构中的固定产品。（支持增加任意产品）<br>  – 抽象工厂模式<br>      ·用来生产不同产品族的全部产品。（对于增加的新产品，无能为力：支持增加产品族） </p><h4 id="·工厂模式要点"><a href="#·工厂模式要点" class="headerlink" title="·工厂模式要点"></a>·工厂模式要点</h4><p>  – 简单工厂模式（静态工厂模式）<br>      ·虽然某种程度不符合设计原则，但实际应用最多。<br>  – 工厂方法模式<br>      ·不修改已有类的前提下，通过增加新的工厂类实现扩展。<br>  – 抽象工厂模式<br>      ·不可以增加产品，可以增加产品族。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GOF设计模式之工厂模式-Factory&quot;&gt;&lt;a href=&quot;#GOF设计模式之工厂模式-Factory&quot; class=&quot;headerlink&quot; title=&quot;GOF设计模式之工厂模式(Factory)&quot;&gt;&lt;/a&gt;GOF设计模式之工厂模式(Factory)&lt;/h1&gt;&lt;p&gt; 实例化对象，用工厂方法代替new操作。&lt;br&gt; 将选择实现类、创建对象统一管理和控制。从而将调用者跟我们的实现类解耦。&lt;/p&gt;
    
    </summary>
    
      <category term="GOF设计模式" scheme="http://yoursite.com/categories/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="GOF设计模式" scheme="http://yoursite.com/tags/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>GOF23设计模式（二）</title>
    <link href="http://yoursite.com/2019/08/25/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/25/GOF23设计模式（二）/</id>
    <published>2019-08-25T07:08:24.000Z</published>
    <updated>2019-08-30T13:26:58.299Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GOF设计模式之单例模式（二）"><a href="#GOF设计模式之单例模式（二）" class="headerlink" title="GOF设计模式之单例模式（二）"></a>GOF设计模式之单例模式（二）</h1><p>静态内部类式和枚举式<a id="more"></a></p><h1 id="单例模式之静态内部类"><a href="#单例模式之静态内部类" class="headerlink" title="单例模式之静态内部类"></a>单例模式之静态内部类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例模式：静态内部类</span></span><br><span class="line"><span class="comment"> * 线程安全，效率高，并发高效和延迟加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton3</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonInstance</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton3 instance=<span class="keyword">new</span> Singleton3();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Singleton3 <span class="title">getinstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> SingletonInstance.instance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> Singleton3().getinstance());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="单例模式之枚举式"><a href="#单例模式之枚举式" class="headerlink" title="单例模式之枚举式"></a>单例模式之枚举式</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例模式：枚举实现</span></span><br><span class="line"><span class="comment"> * 效率高，没有延迟加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//1.避免了反射和反序列化的漏洞。2.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton4 &#123;</span><br><span class="line"><span class="comment">//枚举元素本身就是单例对象</span></span><br><span class="line">INSTANCE;</span><br><span class="line"><span class="comment">//添加自己需要的代码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SingletonOperation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="单例模式总结"><a href="#单例模式总结" class="headerlink" title="单例模式总结"></a>单例模式总结</h1><h2 id="主要："><a href="#主要：" class="headerlink" title="主要："></a>主要：</h2><p>– 饿汉式（线程安全，调用效率高，不能延时加载）<br>– 懒汉式（线程安全，调用效率不高，能延时加载）</p><h2 id="其它："><a href="#其它：" class="headerlink" title="其它："></a>其它：</h2><p>– 双重检查锁式（由于JVM底层内部模型原因，偶尔会出问题，不推荐使用）<br>– 静态内部类式（线程安全，调用效率高，可以延时加载）<br>– 枚举式（线程安全，调用效率高，不能延时加载）</p><h2 id="如何选用"><a href="#如何选用" class="headerlink" title="如何选用"></a>如何选用</h2><h3 id="单例对象占用资源少，不需要延时加载："><a href="#单例对象占用资源少，不需要延时加载：" class="headerlink" title="单例对象占用资源少，不需要延时加载："></a>单例对象占用资源少，不需要延时加载：</h3><p>– 枚举式好于饿汉式</p><h3 id="单例对象占用资源大，需要延时加载："><a href="#单例对象占用资源大，需要延时加载：" class="headerlink" title="单例对象占用资源大，需要延时加载："></a>单例对象占用资源大，需要延时加载：</h3><p>– 静态内部类式好于懒汉式</p><h2 id="以上除了（枚举式）不能被反射和反序列化破解以外，其它都能破解"><a href="#以上除了（枚举式）不能被反射和反序列化破解以外，其它都能破解" class="headerlink" title="以上除了（枚举式）不能被反射和反序列化破解以外，其它都能破解"></a>以上除了（枚举式）不能被反射和反序列化破解以外，其它都能破解</h2><h3 id="如何防止反射的破解（简单了解）"><a href="#如何防止反射的破解（简单了解）" class="headerlink" title="如何防止反射的破解（简单了解）"></a>如何防止反射的破解（简单了解）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在私有构造器上加上检查，不为空的时候手动抛出异常</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(instance!=<span class="keyword">null</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何防止反序列化破解（简单了解）"><a href="#如何防止反序列化破解（简单了解）" class="headerlink" title="如何防止反序列化破解（简单了解）"></a>如何防止反序列化破解（简单了解）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在反序列化时调用此方法直接返回instance，不需要在单独创建对象。</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span><span class="keyword">throws</span> ObjectStreamException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GOF设计模式之单例模式（二）&quot;&gt;&lt;a href=&quot;#GOF设计模式之单例模式（二）&quot; class=&quot;headerlink&quot; title=&quot;GOF设计模式之单例模式（二）&quot;&gt;&lt;/a&gt;GOF设计模式之单例模式（二）&lt;/h1&gt;&lt;p&gt;静态内部类式和枚举式
    
    </summary>
    
      <category term="GOF设计模式" scheme="http://yoursite.com/categories/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="GOF设计模式" scheme="http://yoursite.com/tags/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>GOF23设计模式（一）</title>
    <link href="http://yoursite.com/2019/08/24/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/24/GOF23设计模式（一）/</id>
    <published>2019-08-24T12:21:54.000Z</published>
    <updated>2019-08-30T13:26:54.057Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GOF设计模式之单例模式（一）"><a href="#GOF设计模式之单例模式（一）" class="headerlink" title="GOF设计模式之单例模式（一）"></a>GOF设计模式之单例模式（一）</h1><p>单例模式：保证一个类只有一个实例，并且提供一个访问该实例的全局访问点。<a id="more"></a></p><h1 id="单例模式之饿汉式"><a href="#单例模式之饿汉式" class="headerlink" title="单例模式之饿汉式"></a>单例模式之饿汉式</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例模式：饿汉式</span></span><br><span class="line"><span class="comment"> * 直接在初始化类的时候把对象new出来，如果不用对象就会浪费空间。</span></span><br><span class="line"><span class="comment"> * 线程安全，调用效率高，不需要同步锁。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton1 instance=<span class="keyword">new</span> Singleton1();</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(Singleton1.getInstance());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="单例模式之懒汉式（双重检查锁结合版）"><a href="#单例模式之懒汉式（双重检查锁结合版）" class="headerlink" title="单例模式之懒汉式（双重检查锁结合版）"></a>单例模式之懒汉式（双重检查锁结合版）</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例模式：懒汉式</span></span><br><span class="line"><span class="comment"> * 多线程调用模式下需要在对象上加上volatile，避免指令重排导致对象多次new。</span></span><br><span class="line"><span class="comment"> * 线程安全，调用效率不高，需要同步锁,不浪费资源，使用时在new对象。</span></span><br><span class="line"><span class="comment"> * 这个写法改进了懒汉式与双重检查锁结合。</span></span><br><span class="line"><span class="comment"> * volatile：每当子线程某一语句要用到volatile变量时，</span></span><br><span class="line"><span class="comment"> * 都会从主线程重新拷贝一份，这样就保证子线程的会跟主线程的一致。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span> </span>&#123;</span><br><span class="line"><span class="comment">//多线程模式下加上volatile</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton2 instance;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(instance==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//double checking 提高效率。</span></span><br><span class="line"><span class="keyword">synchronized</span>(Singleton2.class)&#123;</span><br><span class="line"><span class="keyword">if</span>(instance==<span class="keyword">null</span>) &#123;</span><br><span class="line">instance=<span class="keyword">new</span> Singleton2();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">System.out.println(Singleton2.getInstance());</span><br><span class="line">&#125;).start() ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="单例模式之双重检查锁式"><a href="#单例模式之双重检查锁式" class="headerlink" title="单例模式之双重检查锁式"></a>单例模式之双重检查锁式</h1><p>不推荐使用，在使用时由于编译器优化原因和JVM底层内部模型原因，偶尔会出问题，指令重排，在JDK1.5后加入volatile可以解决此问题，详见本博客的懒汉式写法。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GOF设计模式之单例模式（一）&quot;&gt;&lt;a href=&quot;#GOF设计模式之单例模式（一）&quot; class=&quot;headerlink&quot; title=&quot;GOF设计模式之单例模式（一）&quot;&gt;&lt;/a&gt;GOF设计模式之单例模式（一）&lt;/h1&gt;&lt;p&gt;单例模式：保证一个类只有一个实例，并且提供一个访问该实例的全局访问点。
    
    </summary>
    
      <category term="GOF设计模式" scheme="http://yoursite.com/categories/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="GOF设计模式" scheme="http://yoursite.com/tags/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>基于TCP的多人聊天室（二）</title>
    <link href="http://yoursite.com/2019/08/20/%E5%9F%BA%E4%BA%8ETCP%E7%9A%84%E5%A4%9A%E4%BA%BA%E8%81%8A%E5%A4%A9%E5%AE%A4%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/20/基于TCP的多人聊天室（二）/</id>
    <published>2019-08-20T07:15:47.000Z</published>
    <updated>2019-08-20T07:25:15.203Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于TCP的多人聊天室（二）"><a href="#基于TCP的多人聊天室（二）" class="headerlink" title="基于TCP的多人聊天室（二）"></a>基于TCP的多人聊天室（二）</h1><p>进行了封装，没有写单独的一个类，可自行实现，实现了多人聊天，没有实现私聊和一些细节问题，等有空再实现。<a id="more"></a></p><h1 id="关闭流："><a href="#关闭流：" class="headerlink" title="关闭流："></a>关闭流：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Closed</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Closeable... targets)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(Closeable target:targets) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">null</span>!=target)</span><br><span class="line">target.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="聊天室服务器："><a href="#聊天室服务器：" class="headerlink" title="聊天室服务器："></a>聊天室服务器：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 聊天室服务器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chat_Server</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> CopyOnWriteArrayList&lt;Channel&gt; list=<span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"-------Server-------"</span>);</span><br><span class="line"><span class="comment">// 1.指定端口，使用ServerSocket创建服务器</span></span><br><span class="line">ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line"><span class="comment">// 2.阻塞式等待链接 accept</span></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">Socket Server = server.accept();</span><br><span class="line">System.out.println(<span class="string">"客户端连接已建立"</span>);</span><br><span class="line">Channel C=<span class="keyword">new</span> Channel(Server);</span><br><span class="line">list.add(C);</span><br><span class="line"><span class="keyword">new</span> Thread(C).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> CopyOnWriteArrayList&lt;Channel&gt; <span class="title">List</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个客户端代表一个用户（Channel）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Channel</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> DataInputStream dis;</span><br><span class="line"><span class="keyword">private</span> DataOutputStream dos;</span><br><span class="line"><span class="keyword">private</span> Socket Server;</span><br><span class="line"><span class="keyword">private</span>  CopyOnWriteArrayList&lt;Channel&gt; list=<span class="keyword">new</span> Chat_Server().List();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Channel</span><span class="params">(Socket server)</span> </span>&#123;</span><br><span class="line">Server = server;</span><br><span class="line"><span class="comment">// 3.操作：输入输出流</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">dis = <span class="keyword">new</span> DataInputStream(Server.getInputStream());</span><br><span class="line">dos = <span class="keyword">new</span> DataOutputStream(Server.getOutputStream());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="comment">// 4.释放资源</span></span><br><span class="line"><span class="keyword">new</span> Closed().close(dos,dis,Server);</span><br><span class="line"><span class="keyword">this</span>.flag=<span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//发送</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">dos.writeUTF(msg);</span><br><span class="line">dos.flush();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// 4.释放资源</span></span><br><span class="line"><span class="keyword">new</span> Closed().close(dos,dis,Server);</span><br><span class="line"><span class="keyword">this</span>.flag=<span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取消息</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> String msg = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">msg = dis.readUTF();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="keyword">new</span> Closed().close(dos,dis,Server);</span><br><span class="line"><span class="keyword">this</span>.flag=<span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//发给其他人</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendOther</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(Channel c:list) &#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">c.send(msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(flag) &#123;</span><br><span class="line">String msg=getMsg();</span><br><span class="line"><span class="keyword">if</span>(!msg.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">sendOther(msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="聊天室客户端："><a href="#聊天室客户端：" class="headerlink" title="聊天室客户端："></a>聊天室客户端：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 聊天室客户端</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chat_Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"-------Client-------"</span>);</span><br><span class="line"><span class="comment">// 1.建立连接：使用Socket创建客户端：服务器地址和端口</span></span><br><span class="line">Socket Client = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>, <span class="number">6666</span>);</span><br><span class="line">BufferedReader bf=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">System.out.println(<span class="string">"请输入用户名："</span>);</span><br><span class="line">String name=bf.readLine();</span><br><span class="line"><span class="comment">//发送接收</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Send(Client,name)).start();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Receive(Client)).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送端</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Send</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> DataOutputStream dos;</span><br><span class="line"><span class="keyword">private</span> BufferedReader bf; </span><br><span class="line"><span class="keyword">private</span> Socket Client;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Send</span><span class="params">(Socket client,String name)</span> </span>&#123;</span><br><span class="line">Client = client;</span><br><span class="line"><span class="keyword">this</span>.name=name;</span><br><span class="line">bf= <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">dos= <span class="keyword">new</span> DataOutputStream(Client.getOutputStream());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line"><span class="keyword">new</span> Closed().close(dos,bf,Client);</span><br><span class="line"><span class="keyword">this</span>.flag=<span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//发送</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">dos.writeUTF(msg);</span><br><span class="line">dos.flush();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line"><span class="keyword">new</span> Closed().close(dos,bf,Client);</span><br><span class="line"><span class="keyword">this</span>.flag=<span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//控制台信息</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> String msg = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">msg = bf.readLine();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="keyword">new</span> Closed().close(dos,Client,bf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (flag) &#123;</span><br><span class="line">String msg=getMsg();</span><br><span class="line"><span class="keyword">if</span>(!msg.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">send(<span class="keyword">this</span>.name+<span class="string">"说："</span>+msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接收端</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Receive</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> DataInputStream dis; </span><br><span class="line"><span class="keyword">private</span> Socket Client;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Receive</span><span class="params">(Socket client)</span> </span>&#123;</span><br><span class="line">Client = client;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">dis= <span class="keyword">new</span> DataInputStream(Client.getInputStream());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line"><span class="keyword">new</span> Closed().close(dis,Client);</span><br><span class="line"><span class="keyword">this</span>.flag=<span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接收</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">receive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String msg=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">msg = dis.readUTF();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line"><span class="keyword">new</span> Closed().close(dis,Client);</span><br><span class="line"><span class="keyword">this</span>.flag=<span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(flag) &#123;</span><br><span class="line">String msg=receive();</span><br><span class="line"><span class="keyword">if</span>(!msg.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">System.out.println(msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简易实现基于TCP的网络聊天室。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基于TCP的多人聊天室（二）&quot;&gt;&lt;a href=&quot;#基于TCP的多人聊天室（二）&quot; class=&quot;headerlink&quot; title=&quot;基于TCP的多人聊天室（二）&quot;&gt;&lt;/a&gt;基于TCP的多人聊天室（二）&lt;/h1&gt;&lt;p&gt;进行了封装，没有写单独的一个类，可自行实现，实现了多人聊天，没有实现私聊和一些细节问题，等有空再实现。
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="网络编程" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>基于TCP的多人聊天室（一）</title>
    <link href="http://yoursite.com/2019/08/16/%E5%9F%BA%E4%BA%8ETCP%E7%9A%84%E5%A4%9A%E4%BA%BA%E8%81%8A%E5%A4%A9%E5%AE%A4%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/16/基于TCP的多人聊天室（一）/</id>
    <published>2019-08-16T12:23:39.000Z</published>
    <updated>2019-08-16T12:31:38.267Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于TCP的多人聊天室（一）"><a href="#基于TCP的多人聊天室（一）" class="headerlink" title="基于TCP的多人聊天室（一）"></a>基于TCP的多人聊天室（一）</h1><p>利用TCP来实现网络多人聊天室，此版本只能实现发送接收，不能随意发言，还没实现客户端互相传输，只能自己发送自己接收。<a id="more"></a></p><h1 id="聊天室服务器："><a href="#聊天室服务器：" class="headerlink" title="聊天室服务器："></a>聊天室服务器：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 聊天室服务器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chat_Server</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"-------Server-------"</span>);</span><br><span class="line"><span class="comment">// 1.指定端口，使用ServerSocket创建服务器</span></span><br><span class="line">ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line"><span class="comment">// 2.阻塞式等待链接 accept</span></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">Socket Server = server.accept();</span><br><span class="line">System.out.println(<span class="string">"客户端连接已建立"</span>);</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">DataInputStream dis = <span class="keyword">null</span>;</span><br><span class="line">DataOutputStream dos = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">dis = <span class="keyword">new</span> DataInputStream(Server.getInputStream());</span><br><span class="line">dos = <span class="keyword">new</span> DataOutputStream(Server.getOutputStream());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">// 3.操作：输入输出流</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (flag) &#123;</span><br><span class="line">dos.writeUTF(dis.readUTF());</span><br><span class="line">dos.flush();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">flag=<span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4.释放资源</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == dis)</span><br><span class="line">dis.close();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == dis) &#123;</span><br><span class="line">dos.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == dis) &#123;</span><br><span class="line">Server.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="聊天室客户端："><a href="#聊天室客户端：" class="headerlink" title="聊天室客户端："></a>聊天室客户端：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 聊天室客户端</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chat_Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"-------Client-------"</span>);</span><br><span class="line"><span class="comment">// 1.建立连接：使用Socket创建客户端：服务器地址和端口</span></span><br><span class="line">Socket Client = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>, <span class="number">6666</span>);</span><br><span class="line"><span class="comment">// 2.操作：输入输出流</span></span><br><span class="line">DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(Client.getOutputStream());</span><br><span class="line">BufferedReader bf = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">DataInputStream dis = <span class="keyword">new</span> DataInputStream(Client.getInputStream());</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">while</span> (flag) &#123;</span><br><span class="line">String st = bf.readLine();</span><br><span class="line">dos.writeUTF(st);</span><br><span class="line">dos.flush();</span><br><span class="line">String sss = dis.readUTF();</span><br><span class="line">System.out.println(sss);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">dis.close();</span><br><span class="line">dos.close();</span><br><span class="line">Client.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基于TCP的多人聊天室（一）&quot;&gt;&lt;a href=&quot;#基于TCP的多人聊天室（一）&quot; class=&quot;headerlink&quot; title=&quot;基于TCP的多人聊天室（一）&quot;&gt;&lt;/a&gt;基于TCP的多人聊天室（一）&lt;/h1&gt;&lt;p&gt;利用TCP来实现网络多人聊天室，此版本只能实现发送接收，不能随意发言，还没实现客户端互相传输，只能自己发送自己接收。
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="网络编程" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>多人登录验证</title>
    <link href="http://yoursite.com/2019/08/16/%E5%A4%9A%E4%BA%BA%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81/"/>
    <id>http://yoursite.com/2019/08/16/多人登录验证/</id>
    <published>2019-08-16T12:17:49.000Z</published>
    <updated>2019-08-16T12:22:55.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多人登录验证"><a href="#多人登录验证" class="headerlink" title="多人登录验证"></a>多人登录验证</h1><p>请求响应模式下多人验证模式<a id="more"></a></p><h1 id="服务器："><a href="#服务器：" class="headerlink" title="服务器："></a>服务器：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务器(双向)多人登录： </span></span><br><span class="line"><span class="comment"> * 1.指定端口，使用ServerSocket创建服务器 </span></span><br><span class="line"><span class="comment"> * 2.阻塞式等待链接 accept 返回一个Socket </span></span><br><span class="line"><span class="comment"> * 3.操作：输入输出流</span></span><br><span class="line"><span class="comment"> * 4.释放资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCP_MultiWayServer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"-------Server-------"</span>);</span><br><span class="line"><span class="comment">// 1.指定端口，使用ServerSocket创建服务器</span></span><br><span class="line">ServerSocket SS = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line"><span class="comment">// 2.阻塞式等待链接 accept</span></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">Socket Client = SS.accept();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Server(Client)).start();</span><br><span class="line">System.out.println(<span class="string">"客户端连接已建立"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Socket Client;</span><br><span class="line"><span class="comment">// 3.操作：输入输出流</span></span><br><span class="line"><span class="keyword">private</span> DataInputStream dis;</span><br><span class="line"><span class="keyword">private</span> DataOutputStream out;</span><br><span class="line"><span class="keyword">private</span> String name = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">private</span> String pwd = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">private</span> String st;</span><br><span class="line"></span><br><span class="line">Server(Socket client) &#123;</span><br><span class="line">Client = client;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">dis = <span class="keyword">new</span> DataInputStream(Client.getInputStream());</span><br><span class="line">out = <span class="keyword">new</span> DataOutputStream(Client.getOutputStream());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Client.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">st = dis.readUTF();</span><br><span class="line">String[] data = st.split(<span class="string">"&amp;"</span>);</span><br><span class="line"><span class="keyword">for</span> (String b : data) &#123;</span><br><span class="line">String[] c = b.split(<span class="string">"="</span>);</span><br><span class="line"><span class="keyword">if</span> (c[<span class="number">0</span>].equals(<span class="string">"name"</span>)) &#123;</span><br><span class="line">name = c[<span class="number">1</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">pwd = c[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">SendandReceive();</span><br><span class="line"><span class="comment">// 4.释放资源</span></span><br><span class="line">dis.close();</span><br><span class="line">out.close();</span><br><span class="line">Client.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendandReceive</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (name.equals(<span class="string">"123"</span>) &amp;&amp; pwd.equals(<span class="string">"456"</span>)) &#123;</span><br><span class="line">out.writeUTF(<span class="string">"登陆成功"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">out.writeUTF(<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="客户端："><a href="#客户端：" class="headerlink" title="客户端："></a>客户端：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端(双向)多人登录：</span></span><br><span class="line"><span class="comment"> * 1.建立连接：使用Socket创建客户端：服务器地址和端口</span></span><br><span class="line"><span class="comment"> * 2.操作：输入输出流</span></span><br><span class="line"><span class="comment"> * 3.释放资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCP_MultiWayClient</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"-------Client-------"</span>);</span><br><span class="line"><span class="comment">//1.建立连接：使用Socket创建客户端：服务器地址和端口</span></span><br><span class="line">Socket S=<span class="keyword">new</span> Socket(<span class="string">"localhost"</span>,<span class="number">6666</span>);</span><br><span class="line"><span class="keyword">new</span> Client(S).in();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Socket client;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Client</span><span class="params">(Socket client)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.client = client;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> BufferedReader bf=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String pwd;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"请输入姓名："</span>);</span><br><span class="line"> name=bf.readLine();</span><br><span class="line">System.out.println(<span class="string">"请输入密码："</span>);</span><br><span class="line"> pwd=bf.readLine();</span><br><span class="line"> SendandReceive();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendandReceive</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 2.操作：输入输出流</span></span><br><span class="line">DataOutputStream out;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">out = <span class="keyword">new</span> DataOutputStream(client.getOutputStream());</span><br><span class="line">out.writeUTF(<span class="string">"name="</span>+name+<span class="string">"&amp;"</span>+<span class="string">"pwd="</span>+pwd);</span><br><span class="line">out.flush();</span><br><span class="line">DataInputStream dis=<span class="keyword">new</span> DataInputStream(client.getInputStream());</span><br><span class="line">String sss=dis.readUTF();</span><br><span class="line">System.out.println(sss);</span><br><span class="line"><span class="comment">// 3.释放资源</span></span><br><span class="line">dis.close();</span><br><span class="line">out.close();</span><br><span class="line">client.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;多人登录验证&quot;&gt;&lt;a href=&quot;#多人登录验证&quot; class=&quot;headerlink&quot; title=&quot;多人登录验证&quot;&gt;&lt;/a&gt;多人登录验证&lt;/h1&gt;&lt;p&gt;请求响应模式下多人验证模式
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="网络编程" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>TCP文件上传</title>
    <link href="http://yoursite.com/2019/08/15/TCP%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>http://yoursite.com/2019/08/15/TCP文件上传/</id>
    <published>2019-08-15T13:05:41.000Z</published>
    <updated>2019-08-26T06:48:07.094Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TCP文件上传"><a href="#TCP文件上传" class="headerlink" title="TCP文件上传"></a>TCP文件上传</h1><p>实现文件上传与服务器文件下载与拷贝。<a id="more"></a></p><h1 id="文件服务器："><a href="#文件服务器：" class="headerlink" title="文件服务器："></a>文件服务器：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件服务器（下载|拷贝）：</span></span><br><span class="line"><span class="comment"> * 1.指定端口，使用ServerSocket创建服务器</span></span><br><span class="line"><span class="comment"> * 2.阻塞式等待链接 accept 返回一个Socket</span></span><br><span class="line"><span class="comment"> * 3.操作：输入输出流</span></span><br><span class="line"><span class="comment"> * 4.释放资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">File_Server</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"-------Server-------"</span>);</span><br><span class="line"><span class="comment">//1.指定端口，使用ServerSocket创建服务器</span></span><br><span class="line">ServerSocket SS=<span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line"><span class="comment">// 2.阻塞式等待链接 accept</span></span><br><span class="line">Socket Client=SS.accept();</span><br><span class="line">System.out.println(<span class="string">"客户端连接已建立"</span>);</span><br><span class="line"><span class="comment">// 3.操作：输入输出流</span></span><br><span class="line">InputStream buf=<span class="keyword">new</span> BufferedInputStream(Client.getInputStream());</span><br><span class="line">OutputStream bof=<span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"c.txt"</span>));</span><br><span class="line"><span class="keyword">byte</span> b[]=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">while</span>(buf.read(b)!=-<span class="number">1</span>) &#123;</span><br><span class="line">bof.write(b);</span><br><span class="line">&#125;</span><br><span class="line">bof.flush();</span><br><span class="line"><span class="comment">// 4.释放资源</span></span><br><span class="line">bof.close();</span><br><span class="line">buf.close();</span><br><span class="line">Client.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="文件客户端："><a href="#文件客户端：" class="headerlink" title="文件客户端："></a>文件客户端：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件客户端（上传）：</span></span><br><span class="line"><span class="comment"> * 1.建立连接：使用Socket创建客户端：服务器地址和端口</span></span><br><span class="line"><span class="comment"> * 2.操作：输入输出流</span></span><br><span class="line"><span class="comment"> * 3.释放资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">File_Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"-------Client-------"</span>);</span><br><span class="line"><span class="comment">//1.建立连接：使用Socket创建客户端：服务器地址和端口</span></span><br><span class="line">Socket S=<span class="keyword">new</span> Socket(<span class="string">"localhost"</span>,<span class="number">6666</span>);</span><br><span class="line"><span class="comment">// 3.操作：输入输出流</span></span><br><span class="line">InputStream buf=<span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"D:/javawork/java 17级软工学生体测数据统计系统/用户信息.txt"</span>));</span><br><span class="line">OutputStream bof=<span class="keyword">new</span> BufferedOutputStream(S.getOutputStream());</span><br><span class="line"><span class="keyword">byte</span> b[]=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">while</span>(buf.read(b)!=-<span class="number">1</span>) &#123;</span><br><span class="line">bof.write(b);</span><br><span class="line">&#125;</span><br><span class="line">bof.flush();</span><br><span class="line"><span class="comment">// 4.释放资源</span></span><br><span class="line">S.close();</span><br><span class="line">buf.close();</span><br><span class="line">bof.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;TCP文件上传&quot;&gt;&lt;a href=&quot;#TCP文件上传&quot; class=&quot;headerlink&quot; title=&quot;TCP文件上传&quot;&gt;&lt;/a&gt;TCP文件上传&lt;/h1&gt;&lt;p&gt;实现文件上传与服务器文件下载与拷贝。
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="网络编程" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
