<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hello</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-02T12:27:34.561Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JiskZcz</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring xml学习</title>
    <link href="http://yoursite.com/2020/04/02/Spring%20xml%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2020/04/02/Spring xml学习/</id>
    <published>2020-04-02T12:19:00.000Z</published>
    <updated>2020-04-02T12:27:34.561Z</updated>
    
    <content type="html"><![CDATA[<p>Spring xml 的一些基本配置。<a id="more"></a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置bean 需要有相对应的setter方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloWord"</span> <span class="attr">class</span>=<span class="string">"HelloWord.HelloWord"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Spring"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置单独的bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"HelloWord.Person"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用构造器来填充数据，需按照属性顺序 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"小丽"</span> &gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"女"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"45000"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 空值填充 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span><span class="tag">&lt;<span class="name">null</span>/&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"HelloWord.Student"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"张三 "</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"男 "</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">value</span>=<span class="string">"2019-1-2"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用ref进行调用定义的bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"person"</span>  <span class="attr">ref</span>=<span class="string">"person"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 使用自动装配(根据名字进行自动装配)  这里还使用了P命名空间(需开启)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">class</span>=<span class="string">"List.Test"</span> <span class="attr">p:name</span>=<span class="string">"测试"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 测试配置的继承 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可以使用bean的 abstract="true" 属性来设置抽象bean，不能被IOC容器实例化 只用来被继承配置--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果没有指定class 必须将Bean设定为抽象Bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address"</span> <span class="attr">class</span>=<span class="string">"List.Address"</span> <span class="attr">p:address</span>=<span class="string">"重庆"</span> <span class="attr">p:street</span>=<span class="string">"万盛"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address2"</span> <span class="attr">class</span>=<span class="string">"List.Address"</span>  <span class="attr">p:street</span>=<span class="string">"渝北"</span> <span class="attr">parent</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">使用bean 的scope 属性来设置bean 的作用域</span></span><br><span class="line"><span class="comment">singleton：默认值，容器初始时创建bean 实例，在整个容器的生命周期内只创建这一个bean，单例的。</span></span><br><span class="line"><span class="comment">prototype：原型的，容器初始化时不创建bean 的实例，而在每次请求时都创建一个新的bean 实例并返回。</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"Person"</span> <span class="attr">class</span>=<span class="string">"HelloWord.Person"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 外部文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:pro.properties"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbc"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 使用外部文件的属性 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;user&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring xml 的一些基本配置。
    
    </summary>
    
      <category term="Spring xml" scheme="http://yoursite.com/categories/Spring-xml/"/>
    
    
      <category term="Spring xml" scheme="http://yoursite.com/tags/Spring-xml/"/>
    
  </entry>
  
  <entry>
    <title>Java反射机制</title>
    <link href="http://yoursite.com/2020/03/29/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2020/03/29/Java反射机制/</id>
    <published>2020-03-29T10:30:40.000Z</published>
    <updated>2020-03-30T02:17:06.669Z</updated>
    
    <content type="html"><![CDATA[<p>反射：框架设计的灵魂<br>     框架：半成品软件。可以在框架的基础上进行软件开发，简化编码<br>     反射：将类的各个组成部分封装为其他对象，这就是反射机制<br>         好处：<br>            1. 可以在程序运行过程中，操作这些对象。<br>            2. 可以解耦，提高程序的可扩展性。<a id="more"></a></p><h1 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h1><p>1.Class.forName(“全类名”)：将字节码文件加载进内存，返回Class对象<br>多用于配置文件，将类名定义在配置文件中。读取文件，加载类<br>2.类名.class：通过类名的属性class获取<br>多用于参数的传递<br>3.对象.getClass()：getClass()方法在Object类中定义着。<br>多用于对象的获取字节码的方式<br> 结论：<br>  同一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象都是同一个。</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> domain.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest1</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取Class对象的方式：</span></span><br><span class="line"><span class="comment"> *   1.Class.forName("全类名")：将字节码文件加载进内存，返回Class对象</span></span><br><span class="line"><span class="comment"> *   2.类名.class：通过类名的属性class获取</span></span><br><span class="line"><span class="comment"> *   3.对象.getClass()：getClass()方法在Object类中定义着</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 1.Class.forName("全类名")</span></span><br><span class="line">Class clasz1 = Class.forName(<span class="string">"domain.Person"</span>);</span><br><span class="line">System.out.println(clasz1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.类名.class</span></span><br><span class="line">Class clasz2 = Person.class;</span><br><span class="line">System.out.println(clasz2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.对象.getClass()</span></span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">Class clasz3 = p.getClass();</span><br><span class="line">System.out.println(clasz3);</span><br><span class="line">System.out.println(clasz1 == clasz2);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Class对象功能"><a href="#Class对象功能" class="headerlink" title="Class对象功能"></a>Class对象功能</h1><h2 id="1-获取成员变量"><a href="#1-获取成员变量" class="headerlink" title="1. 获取成员变量"></a>1. 获取成员变量</h2><p>  Field[] getFields() ：获取所有public修饰的成员变量<br>  Field getField(String name)   获取指定名称的 public修饰的成员变量</p><p>  Field[] getDeclaredFields()  获取所有的成员变量，不考虑修饰符<br>  Field getDeclaredField(String name)  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//getFields()方法只能获取public成员变量</span></span><br><span class="line">Class clasz = Person.class;</span><br><span class="line">Field[] field = clasz.getFields();</span><br><span class="line"><span class="keyword">for</span> (Field field2 : field) &#123;</span><br><span class="line">System.out.println(field2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//getField(String name)获取指定名称的public成员变量</span></span><br><span class="line">Field f = clasz.getField(<span class="string">"a"</span>);</span><br><span class="line">System.out.println(f);</span><br><span class="line"><span class="comment">//获取成员变量的值</span></span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">Object value = f.get(p);</span><br><span class="line">System.out.println(value);</span><br><span class="line"><span class="comment">//设置成员变量的值</span></span><br><span class="line">f.set(p, <span class="string">"张三"</span>);</span><br><span class="line">System.out.println(p);</span><br><span class="line">System.out.println(<span class="string">"--------------------------"</span>);</span><br><span class="line"><span class="comment">//Field[] getDeclaredFields()获取所有的成员变量，不考虑修饰符</span></span><br><span class="line">Field[] field3 = clasz.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span> (Field field2 : field3) &#123;</span><br><span class="line">System.out.println(field2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取指定名称的成员变量</span></span><br><span class="line">f = clasz.getDeclaredField(<span class="string">"Name"</span>);</span><br><span class="line"><span class="comment">//忽略访问权限修饰符的安全检查</span></span><br><span class="line">f.setAccessible(<span class="keyword">true</span>);<span class="comment">//暴力反射</span></span><br><span class="line">System.out.println(f.get(p));</span><br></pre></td></tr></table></figure><h2 id="2-获取构造方法"><a href="#2-获取构造方法" class="headerlink" title="2. 获取构造方法"></a>2. 获取构造方法</h2><p>Constructor&lt;?&gt;[] getConstructors()</p><p>Constructor<t> getConstructor(类&lt;?&gt;… parameterTypes) </t></p><p>Constructor<t> getDeclaredConstructor(类&lt;?&gt;… parameterTypes)</t></p><p>Constructor&lt;?&gt;[] getDeclaredConstructors() </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Class clasz = Person.class;</span><br><span class="line"><span class="comment">//Constructor&lt;?&gt;[] getConstructors() </span></span><br><span class="line">Constructor constructror = clasz.getConstructor(String.class,String.class);</span><br><span class="line">System.out.println(constructror);</span><br><span class="line"><span class="comment">//使用newInstance创建对象</span></span><br><span class="line">Object person = constructror.newInstance(<span class="string">"张三"</span>,<span class="string">"男"</span>);</span><br><span class="line">System.out.println(person);</span><br><span class="line"><span class="comment">//空参构造可以使用Class的newInstance()方法</span></span><br><span class="line">Object o = clasz.newInstance();</span><br><span class="line">System.out.println(o);</span><br></pre></td></tr></table></figure><h2 id="3-获取成员方法"><a href="#3-获取成员方法" class="headerlink" title="3. 获取成员方法"></a>3. 获取成员方法</h2><p>  Method[] getMethods()<br>  Method getMethod(String name, 类&lt;?&gt;… parameterTypes)  </p><p>  Method[] getDeclaredMethods()<br>  Method getDeclaredMethod(String name, 类&lt;?&gt;… parameterTypes)  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class clasz = Person.class;</span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">Method method = clasz.getMethod(<span class="string">"Eat"</span>);</span><br><span class="line">method.invoke(p);</span><br><span class="line">method = clasz.getMethod(<span class="string">"Eat"</span>,String.class);</span><br><span class="line">method.invoke(p,<span class="string">"鸡腿"</span>);</span><br></pre></td></tr></table></figure><h2 id="4-获取全类名"><a href="#4-获取全类名" class="headerlink" title="4. 获取全类名"></a>4. 获取全类名</h2><p>  String getName() </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class clasz = Person.class;</span><br><span class="line">System.out.println(clasz.getName());</span><br></pre></td></tr></table></figure><h1 id="Field：成员变量"><a href="#Field：成员变量" class="headerlink" title="Field：成员变量"></a>Field：成员变量</h1><p>操作：</p><ol><li><p>设置值<br>void set(Object obj, Object value)  </p></li><li><p>获取值<br>get(Object obj) </p></li><li><p>忽略访问权限修饰符的安全检查<br>setAccessible(true):暴力反射</p></li></ol><h1 id="Constructor-构造方法"><a href="#Constructor-构造方法" class="headerlink" title="Constructor:构造方法"></a>Constructor:构造方法</h1><p>创建对象：<br>   T newInstance(Object… initargs)<br>     如果使用空参数构造方法创建对象，操作可以简化：Class对象的newInstance方法</p><h1 id="Method：方法对象"><a href="#Method：方法对象" class="headerlink" title="Method：方法对象"></a>Method：方法对象</h1><ul><li>执行方法：<br>Object invoke(Object obj, Object… args)<br>获取方法名称：<br>String getName:获取方法名</li></ul><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p>   需求：写一个”框架”，不能改变该类的任何代码的前提下，可以帮我们创建任意类的对象，并且执行其中任意方法<br>     实现：<br>       1. 配置文件<br>       2. 反射<br>     步骤：<br>       1. 将需要创建的对象的全类名和需要执行的方法定义在配置文件中<br>       2. 在程序中加载读取配置文件<br>       3. 使用反射技术来加载类文件进内存<br>       4. 创建对象<br>       5. 执行方法</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>   1.配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ClassName=domain.Person</span><br><span class="line">MethodName=Eat</span><br></pre></td></tr></table></figure><p>   2.相关代码<br>Person类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> String a;</span><br><span class="line"><span class="keyword">protected</span> String b;</span><br><span class="line">String c;</span><br><span class="line"><span class="keyword">private</span> String Name;</span><br><span class="line"><span class="keyword">private</span> String Sex;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">Name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">Sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, String sex)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">Name = name;</span><br><span class="line">Sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Person [a="</span> + a + <span class="string">", b="</span> + b + <span class="string">", c="</span> + c + <span class="string">", Name="</span> + Name + <span class="string">", Sex="</span> + Sex + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"eat..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Eat</span><span class="params">(String food)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"eat..."</span>+food);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Student类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Sleep..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   3.实现代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reflec</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line">InputStream in = Reflec.class.getClassLoader().getResourceAsStream(<span class="string">"pro.properties"</span>);</span><br><span class="line">p.load(in);</span><br><span class="line">String ClassName = p.getProperty(<span class="string">"ClassName"</span>);</span><br><span class="line">String MethodName = p.getProperty(<span class="string">"MethodName"</span>);</span><br><span class="line"><span class="comment">//加载进内存</span></span><br><span class="line">Class clasz = Class.forName(ClassName);</span><br><span class="line"><span class="comment">//获取对象</span></span><br><span class="line">Object obj = clasz.newInstance();</span><br><span class="line"><span class="comment">//获取方法对象</span></span><br><span class="line">Method method = clasz.getMethod(MethodName);</span><br><span class="line">method.invoke(obj);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;反射：框架设计的灵魂&lt;br&gt;     框架：半成品软件。可以在框架的基础上进行软件开发，简化编码&lt;br&gt;     反射：将类的各个组成部分封装为其他对象，这就是反射机制&lt;br&gt;         好处：&lt;br&gt;            1. 可以在程序运行过程中，操作这些对象。&lt;br&gt;            2. 可以解耦，提高程序的可扩展性。
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>数据库连接池</title>
    <link href="http://yoursite.com/2020/03/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    <id>http://yoursite.com/2020/03/01/数据库连接池/</id>
    <published>2020-03-01T04:27:15.000Z</published>
    <updated>2020-04-02T06:03:39.001Z</updated>
    
    <content type="html"><![CDATA[<p>这里使用常用的两种创建数据库连接池的方法,dbcp与c3p0<a id="more"></a></p><h1 id="DBCP"><a href="#DBCP" class="headerlink" title="DBCP"></a>DBCP</h1><p>使用 DBCP 数据库连接池， 加入 jar 包(2 个jar 包). 依赖于 Commons Pool。</p><p>配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">username=root</span><br><span class="line">password=123456</span><br><span class="line">driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql://localhost:3306/text</span><br></pre></td></tr></table></figure><p>代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 加载 dbcp 的 properties 配置文件: 配置文件中的键需要来自 BasicDataSource</span></span><br><span class="line"><span class="comment"> * 的属性.</span></span><br><span class="line"><span class="comment"> * 2. 调用 BasicDataSourceFactory 的 createDataSource 方法创建 DataSource</span></span><br><span class="line"><span class="comment"> * 实例</span></span><br><span class="line"><span class="comment"> * 3. 从 DataSource 实例中获取数据库连接. </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDBCPWithDataSourceFactory</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">InputStream inStream = JDBCTest.class.getClassLoader()</span><br><span class="line">.getResourceAsStream(<span class="string">"dbcp.properties"</span>);</span><br><span class="line">properties.load(inStream);</span><br><span class="line"></span><br><span class="line">DataSource dataSource = </span><br><span class="line">BasicDataSourceFactory.createDataSource(properties);</span><br><span class="line">System.out.println(dataSource.getConnection()); </span><br><span class="line"><span class="comment">//需要在配置文件添加相关属性</span></span><br><span class="line"><span class="comment">//BasicDataSource basicDataSource = </span></span><br><span class="line"><span class="comment">//(BasicDataSource) dataSource;</span></span><br><span class="line"><span class="comment">//System.out.println(basicDataSource.getMaxWait()); </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h1><p>C3P0推荐是用xml配置文件，格式为c3p0-config.xml。依赖于mchange-commons-java-0.2.19.jar</p><p>配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">"helloc3p0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定连接数据源的基本属性 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span>jdbc:mysql://localhost:3306/text<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 若数据库中连接数不足时, 一次向数据库服务器申请多少个连接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireIncrement"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 初始化数据库连接池时连接的数量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池中的最小的数据库连接数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池中的最大的数据库连接数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- C3P0 数据库连接池可以维护的 Statement 的个数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 每个连接同时可以使用的 Statement 对象的个数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatementsPerConnection"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testC3poWithConfigFile</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">DataSource dataSource = </span><br><span class="line"><span class="keyword">new</span> ComboPooledDataSource(<span class="string">"helloc3p0"</span>);  </span><br><span class="line">System.out.println(dataSource.getConnection()); </span><br><span class="line">ComboPooledDataSource comboPooledDataSource = </span><br><span class="line">(ComboPooledDataSource) dataSource;</span><br><span class="line"><span class="comment">//System.out.println(comboPooledDataSource.getMaxStatements()); </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里使用常用的两种创建数据库连接池的方法,dbcp与c3p0
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="数据库处理" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>JDBC批量处理</title>
    <link href="http://yoursite.com/2020/02/28/JDBC%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2020/02/28/JDBC批量处理/</id>
    <published>2020-02-28T02:07:46.000Z</published>
    <updated>2020-03-01T04:51:14.748Z</updated>
    
    <content type="html"><![CDATA[<p>测试往数据库插入大量数据时，不同方法的速度<a id="more"></a></p><h1 id="使用-Statement"><a href="#使用-Statement" class="headerlink" title="使用 Statement"></a>使用 Statement</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBatchWithStatement</span><span class="params">()</span></span>&#123;</span><br><span class="line">Connection connection = <span class="keyword">null</span>;</span><br><span class="line">Statement statement = <span class="keyword">null</span>;</span><br><span class="line">String sql = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">connection = JDBCTools.getConnection();</span><br><span class="line">JDBCTools.beginTx(connection);</span><br><span class="line"></span><br><span class="line">statement = connection.createStatement();</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)&#123;</span><br><span class="line">sql = <span class="string">"INSERT INTO customers VALUES("</span> + (i + <span class="number">1</span>) </span><br><span class="line">+ <span class="string">", 'name_"</span> + i + <span class="string">"', '29-6月 -13')"</span>;</span><br><span class="line">statement.addBatch(sql);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Time: "</span> + (end - begin)); <span class="comment">//结果为39567毫秒</span></span><br><span class="line"></span><br><span class="line">JDBCTools.commit(connection);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">JDBCTools.rollback(connection);</span><br><span class="line">&#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">JDBCTools.releaseDB(<span class="keyword">null</span>, statement, connection);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用PreparedStatement"><a href="#使用PreparedStatement" class="headerlink" title="使用PreparedStatement"></a>使用PreparedStatement</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBatchWithPreparedStatement</span><span class="params">()</span></span>&#123;</span><br><span class="line">Connection connection = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">String sql = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">connection = JDBCTools.getConnection();</span><br><span class="line">JDBCTools.beginTx(connection);</span><br><span class="line">sql = <span class="string">"INSERT INTO customers VALUES(?,?,?)"</span>;</span><br><span class="line">preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">Date date = <span class="keyword">new</span> Date(<span class="keyword">new</span> java.util.Date().getTime());</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)&#123;</span><br><span class="line">preparedStatement.setInt(<span class="number">1</span>, i + <span class="number">1</span>);</span><br><span class="line">preparedStatement.setString(<span class="number">2</span>, <span class="string">"name_"</span> + i);</span><br><span class="line">preparedStatement.setDate(<span class="number">3</span>, date);</span><br><span class="line"></span><br><span class="line">preparedStatement.executeUpdate();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Time: "</span> + (end - begin)); <span class="comment">//结果为9819毫秒</span></span><br><span class="line"></span><br><span class="line">JDBCTools.commit(connection);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">JDBCTools.rollback(connection);</span><br><span class="line">&#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">JDBCTools.releaseDB(<span class="keyword">null</span>, preparedStatement, connection);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用preparedStatement-addBatch"><a href="#使用preparedStatement-addBatch" class="headerlink" title="使用preparedStatement.addBatch()"></a>使用preparedStatement.addBatch()</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBatch</span><span class="params">()</span></span>&#123;</span><br><span class="line">Connection connection = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">String sql = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">connection = JDBCTools.getConnection();</span><br><span class="line">JDBCTools.beginTx(connection);</span><br><span class="line">sql = <span class="string">"INSERT INTO customers VALUES(?,?,?)"</span>;</span><br><span class="line">preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">Date date = <span class="keyword">new</span> Date(<span class="keyword">new</span> java.util.Date().getTime());</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)&#123;</span><br><span class="line">preparedStatement.setInt(<span class="number">1</span>, i + <span class="number">1</span>);</span><br><span class="line">preparedStatement.setString(<span class="number">2</span>, <span class="string">"name_"</span> + i);</span><br><span class="line">preparedStatement.setDate(<span class="number">3</span>, date);</span><br><span class="line"></span><br><span class="line"><span class="comment">//"积攒" SQL </span></span><br><span class="line">preparedStatement.addBatch();</span><br><span class="line"></span><br><span class="line"><span class="comment">//当 "积攒" 到一定程度, 就统一的执行一次. 并且清空先前 "积攒" 的 SQL</span></span><br><span class="line"><span class="keyword">if</span>((i + <span class="number">1</span>) % <span class="number">300</span> == <span class="number">0</span>)&#123;</span><br><span class="line">preparedStatement.executeBatch();</span><br><span class="line">preparedStatement.clearBatch();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//若总条数不是批量数值的整数倍, 则还需要再额外的执行一次. </span></span><br><span class="line">preparedStatement.executeBatch();</span><br><span class="line">preparedStatement.clearBatch();</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Time: "</span> + (end - begin)); <span class="comment">//结果为569毫秒</span></span><br><span class="line"></span><br><span class="line">JDBCTools.commit(connection);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">JDBCTools.rollback(connection);</span><br><span class="line">&#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">JDBCTools.releaseDB(<span class="keyword">null</span>, preparedStatement, connection);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;测试往数据库插入大量数据时，不同方法的速度
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="数据库处理" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>关于JSP</title>
    <link href="http://yoursite.com/2020/02/22/%E5%85%B3%E4%BA%8EJSP/"/>
    <id>http://yoursite.com/2020/02/22/关于JSP/</id>
    <published>2020-02-22T05:05:56.000Z</published>
    <updated>2020-02-23T02:05:53.441Z</updated>
    
    <content type="html"><![CDATA[<p>对于JSP在现在这个技术发展的情况下，我认为可以不学习JSP了但可以去了解一下。<br><a href="https://www.zhihu.com/question/305924723/answer/557800752" target="_blank" rel="noopener"><br><font color="red">点击这里</font></a>有详细介绍Java后端现在该怎么学。</p><a id="more"></a><h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><p>  JSP 是简 Servlet 编写的一种技术, 它将 Java 代码和 HTML 语句混合在同一个文件中编写,只对网页中的要动态产生的内容采用 Java 代码来编写，而对固定不变的静态内容采用普通静态 HTML 页面的方式编写。<br>JSP：Java Server Page: Java 服务器端网页. 在 HTML 页面中编写 Java 代码的页面. </p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 新建一个 JSP 页面, 在 body 节点内的 &lt;% %&gt; 即可编写 Java 代码. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;% </span><br><span class="line">Date date = <span class="keyword">new</span> Date();</span><br><span class="line">System.out.print(date); </span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>JSP 可以放置在 WEB 应用程序中的除了 <font color="red">WEB-INF</font> 及其子目录外的其他任何目录中,<br>JSP 页面的访问路径与普通 HTML 页面的访问路径形式也完全一样。</p><h1 id="JSP的运行原理-JSP-本质上是一个-Servlet"><a href="#JSP的运行原理-JSP-本质上是一个-Servlet" class="headerlink" title="JSP的运行原理: JSP 本质上是一个 Servlet."></a>JSP的运行原理: JSP 本质上是一个 Servlet.</h1><p>  每个JSP 页面在第一次被访问时, JSP 引擎将它翻译成一个 Servlet 源程序, 接着再把这个 Servlet 源程序编译成 Servlet 的 class 类文件.<br>然后再由WEB容器（Servlet引擎）像调用普通Servlet程序一样的方式来装载和解释执行这个由JSP页面翻译成的Servlet程序。 </p><h1 id="JSP-页面的隐含变量"><a href="#JSP-页面的隐含变量" class="headerlink" title="JSP 页面的隐含变量"></a>JSP 页面的隐含变量</h1><p>  没有声明就可以使用的对象. JSP页面一共有 9 个隐含对象. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    PageContext pageContext = <span class="keyword">null</span>;</span><br><span class="line">    HttpSession session = <span class="keyword">null</span>;</span><br><span class="line">    ServletContext application = <span class="keyword">null</span>;</span><br><span class="line">    ServletConfig config = <span class="keyword">null</span>;</span><br><span class="line">    JspWriter out = <span class="keyword">null</span>;</span><br><span class="line">    Object page = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用  &lt;% %&gt; 编写的代码在此位置. 可以用到 request, response, pageContext, session</span></span><br><span class="line"><span class="comment">//application, config, out, page 这 8 个隐含对象. (实际上还可以使用一个叫 exception 的隐含对象)</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>①. request: HttpServletRequest 的一个对象. *</p><p>②. response: HttpServletResponse 的一个对象(在 JSP 页面中几乎不会调用 response 的任何方法.)</p><p>③. pageContext: 页面的上下文, 是 PageContext 的一个对象. 可以从该对象中获取到其他 8 个隐含对象. 也可以从中获取到当前<br>页面的其他信息. (自定义标签时使用它) *</p><p>④. session: 代表浏览器和服务器的一次会话, 是 HttpSession 的一个对象. *</p><p>⑤. application: 代表当前 WEB 应用. 是 ServletContext 对象. *</p><p>⑥. config: 当前 JSP 对应的 Servlet 的 ServletConfig 对象(几乎不使用). 若需要访问当前 JSP 配置的初始化参数,<br>需要通过映射的地址才可以.</p><p>映射 JSP:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hellojsp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">jsp-file</span>&gt;</span>/hello.jsp<span class="tag">&lt;/<span class="name">jsp-file</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>test<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>testValue<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hellojsp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hellojsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>⑦. out: JspWriter 对象. 调用 out.println() 可以直接把字符串打印到浏览器上. *</p><p>⑧. page: 指向当前 JSP 对应的 Servlet 对象的引用, 但为 Object 类型, 只能调用 Object 类的方法(几乎不使用) </p><p>⑨. exception: 在声明了 page 指令的 isErrorPage=”true” 时, 才可以使用. *</p><p>&lt;%@ page isErrorPage=”true” %&gt;</p><p>pageContext, request, session, application(对属性的作用域的范围从小到大)<br>out, response, config, page<br>exception</p><h1 id="JSP模版元素"><a href="#JSP模版元素" class="headerlink" title="JSP模版元素"></a>JSP模版元素</h1><p>JSP页面中的静态HTML内容称 </p><h1 id="JSP表达式（expression）"><a href="#JSP表达式（expression）" class="headerlink" title="JSP表达式（expression）"></a>JSP表达式（expression）</h1><p>提供了将一个 java 变量或表达式的计算结果输出到客户端的简化方式，它将要输出的变量或表达式直接封装在&lt;%= 和 %&gt;之中。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;% </span><br><span class="line">Date date = <span class="keyword">new</span> Date();</span><br><span class="line">out.print(date);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%= date %&gt;</span><br></pre></td></tr></table></figure><h1 id="JSP脚本片断（scriptlet）"><a href="#JSP脚本片断（scriptlet）" class="headerlink" title="JSP脚本片断（scriptlet）"></a>JSP脚本片断（scriptlet）</h1><p>指嵌套在&lt;% 和 %&gt;之中的一条或多条Java程序代码，多个脚本片断中的代码可以相互访问</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;% </span><br><span class="line">String ageStr = request.getParameter(<span class="string">"age"</span>);</span><br><span class="line">Integer age = Integer.parseInt(ageStr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(age &gt;= <span class="number">18</span>)&#123;</span><br><span class="line">%&gt;</span><br><span class="line">成人...</span><br><span class="line">&lt;%</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">%&gt;</span><br><span class="line">未成人...</span><br><span class="line">&lt;%</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h1 id="JSP-声明"><a href="#JSP-声明" class="headerlink" title="JSP 声明"></a>JSP 声明</h1><p>  JSP 声明将 Java 代码封装在&lt;%！和 %&gt;之中，它里面的代码将被插入进 Servle t的 _jspService 方法的外面(在 JSP 页面中几乎从不这样使用)</p><h1 id="JSP注释的格式"><a href="#JSP注释的格式" class="headerlink" title="JSP注释的格式"></a>JSP注释的格式</h1><p>“&lt;%– JSP 注释 –%&gt;” “<!-- HTML 注释 -->“<br>区别: JSP 注释可以阻止 Java 代码的执行. </p><h1 id="域对象的属性操作"><a href="#域对象的属性操作" class="headerlink" title="域对象的属性操作"></a>域对象的属性操作</h1><p>方法：<br>void setAttribute(String name, Object o): 设置属性  </p><p>Object getAttribute(String name): 获取指定的属性</p><p>Enumeration getAttributeNames(): 获取所有的属性的名字组成的 Enumeration 对象</p><p>removeAttribute(String name): 移除指定的属性<br>pageContext, request, session, application 对象都有这些方法，这四个对象也称之为域对象. </p><p>pageContext: 属性的作用范围仅限于当前 JSP 页面<br>request:  属性的作用范围仅限于同一个请求.<br>session: 属性的作用范围限于一次会话: 浏览器打开直到关闭称之为一次会话(在此期间会话不失效)<br>application: 属性的作用范围限于当前 WEB 应用. 是范围最大的属性作用范围, 只要在一处设置属性, 在其他各处的 JSP 或 Servlet 中<br>都可以获取到. </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于JSP在现在这个技术发展的情况下，我认为可以不学习JSP了但可以去了解一下。&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/question/305924723/answer/557800752&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;br&gt;&lt;font color=&quot;red&quot;&gt;点击这里&lt;/font&gt;&lt;/a&gt;有详细介绍Java后端现在该怎么学。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JSP" scheme="http://yoursite.com/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>如何在 Serlvet 中获取请求信息</title>
    <link href="http://yoursite.com/2020/02/20/GET%E8%AF%B7%E6%B1%82%E4%B8%8EPOST%E8%AF%B7%E6%B1%82/"/>
    <id>http://yoursite.com/2020/02/20/GET请求与POST请求/</id>
    <published>2020-02-20T06:30:30.000Z</published>
    <updated>2020-03-02T01:43:46.797Z</updated>
    
    <content type="html"><![CDATA[<p>在我们获取信息前需要了解GET请求和POST请求是HTTP请求的两种基本方法。<a id="more"></a></p><h1 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h1><p>使用GET请求方式传递参数：<br>①. 在浏览器地址栏中输入某个URL地址或单击网页上的一个超链接时，浏览器发出的HTTP请求消息的请求方式为GET。<br>②. 如果网页中的form表单元素的 method 属性被设置为了“GET”，浏览器提交这个FORM表单时生成的HTTP请求消息的请求方式也为GET。<br>③. 使用GET请求方式给WEB服务器传递参数的格式</p><h1 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h1><p>使用 POST 方式传递参数:<br>①. POST 请求方式主要用于向 WEB 服务器端程序提交 FORM 表单中的数据: form 表单的 method 置为 POST<br>②. POST 方式将各个表单字段元素及其数据作为 HTTP 消息的实体内容发送给 WEB 服务器，传送的数据量要比使用GET方式传送的数据量大得多。 </p><h1 id="如何在-Serlvet-中获取请求信息"><a href="#如何在-Serlvet-中获取请求信息" class="headerlink" title="如何在 Serlvet 中获取请求信息"></a>如何在 Serlvet 中获取请求信息</h1><p>  Servlet 的 service() 方法用于应答请求: 因为每次请求都会调用 service() 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest request, ServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function"><span class="comment">/* ServletRequest: 封装了请求信息. 可以从中获取到任何的请求信息.</span></span></span><br><span class="line"><span class="function"><span class="comment">   ServletResponse: 封装了响应信息, 如果想给用户什么响应, 具体可以使用该接口的方法实现. </span></span></span><br><span class="line"><span class="function"><span class="comment">   这两个接口的实现类都是服务器给予实现的, 并在服务器调用 service 方法时传入. </span></span></span><br><span class="line"><span class="function"><span class="comment">*/</span></span></span><br></pre></td></tr></table></figure><h2 id="ServletRequest的方法"><a href="#ServletRequest的方法" class="headerlink" title="ServletRequest的方法"></a>ServletRequest的方法</h2><p>html文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"loginServlet"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">user: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user"</span>/&gt;</span></span><br><span class="line">password:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">ceshi:</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"ceshi"</span> <span class="attr">value</span>=<span class="string">"reading"</span>/&gt;</span>Reading</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"ceshi"</span> <span class="attr">value</span>=<span class="string">"game"</span>/&gt;</span>Game</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"ceshi"</span> <span class="attr">value</span>=<span class="string">"party"</span>/&gt;</span>Party</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"ceshi"</span> <span class="attr">value</span>=<span class="string">"sport"</span>/&gt;</span>Sport</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"ceshi"</span> <span class="attr">value</span>=<span class="string">"tv"</span>/&gt;</span>TV</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>xml文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>TTT.Login<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/loginServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//获取参数名的值</span></span><br><span class="line">String st = request.getParameter(<span class="string">"user"</span>);</span><br><span class="line">System.out.println(st);</span><br><span class="line"><span class="comment">//一个参数名对应多个参数值</span></span><br><span class="line">String[] ceshi = request.getParameterValues(<span class="string">"ceshi"</span>);</span><br><span class="line"><span class="keyword">for</span>(String st1 : ceshi) &#123;</span><br><span class="line">System.out.println(st1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//HttpServletRequest: 是 SerlvetRequest 的子接口. 针对于 HTTP 请求所定义. 里边包含了大量获取 HTTP 请求相关的方法.</span></span><br><span class="line">HttpServletRequest httpServletRequest = (HttpServletRequest) request;</span><br><span class="line"><span class="comment">//获取URL</span></span><br><span class="line">String requestURI = httpServletRequest.getRequestURI();</span><br><span class="line">System.out.println(requestURI); </span><br><span class="line"><span class="comment">//获取请求方式</span></span><br><span class="line">String method = httpServletRequest.getMethod();</span><br><span class="line">System.out.println(method); </span><br><span class="line"><span class="comment">//若是一个 GET 请求, 获取请求参数对应的那个字符串, 即 ? 后的那个字符串. </span></span><br><span class="line">String queryString = httpServletRequest.getQueryString();</span><br><span class="line">System.out.println(queryString);</span><br><span class="line"><span class="comment">//获取请求的 Serlvet 的映射路径 </span></span><br><span class="line">String servletPath = httpServletRequest.getServletPath();</span><br><span class="line">   System.out.println(servletPath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><blockquote><p>123<br>reading game party<br>/JavaWeb_Study/loginServlet<br>POST<br>null<br>/loginServlet</p></blockquote><h1 id="ServletResponse的方法"><a href="#ServletResponse的方法" class="headerlink" title="ServletResponse的方法"></a>ServletResponse的方法</h1><p>①getWriter(): 返回 PrintWriter 对象. 调用该对象的 print() 方法, 将把 print() 中的参数直接打印<br>到客户的浏览器上. getOutputStream()，一般用来输出二进制内容，例如图片。getWriter()，用来输出文本类型的内容，如HTML和纯文本。<br>文本输出情况下需设置编码类型，在调用response.getWriter()前，我们必须设置content type</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">"text/html; charset=GBK"</span>);</span><br></pre></td></tr></table></figure><p>②设置响应的内容类型: response.setContentType(“application/msword”);<br>③void sendRedirect(String location): 请求的重定向. (此方法为 HttpServletResponse 中定义.)</p><h1 id="请求的转发和重定向"><a href="#请求的转发和重定向" class="headerlink" title="请求的转发和重定向"></a>请求的转发和重定向</h1><p>本质区别: 请求的转发只发出了一次请求, 而重定向则发出了两次请求. </p><p>具体:</p><p>①. 请求的转发: 地址栏是初次发出请求的地址.<br>       请求的重定向: 地址栏不再是初次发出的请求地址. 地址栏为最后响应的那个地址 </p><p>②. 请求转发: 在最终的 Servlet 中, request 对象和中转的那个 request 是同一个对象.<br>       请求的重定向: 在最终的 Servlet 中, request 对象和中转的那个 request 不是同一个对象.       </p><p>③. 请求的转发: 只能转发给当前 WEB 应用的的资源<br>       请求的重定向: 可以重定向到任何资源. </p><p>④. 请求的转发: / 代表的是当前 WEB 应用的根目录<br>       请求的重定向: / 代表的是当前 WEB 站点的根目录. </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在我们获取信息前需要了解GET请求和POST请求是HTTP请求的两种基本方法。
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>ServletConfig对象以及方法</title>
    <link href="http://yoursite.com/2020/02/18/ServletConfig%E5%AF%B9%E8%B1%A1%E4%BB%A5%E5%8F%8A%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2020/02/18/ServletConfig对象以及方法/</id>
    <published>2020-02-18T04:12:34.000Z</published>
    <updated>2020-02-20T06:26:49.058Z</updated>
    
    <content type="html"><![CDATA[<p>ServletConfig对象对应web.xml文件中的<servlet>元素，在Servlet的配置文件web.xml中，可以使用一个或多个<init-param>标签为servlet配置一些初始化参数，然后使用ServletConfig对象中的方法一一获取。<a id="more"></a></init-param></servlet></p><h1 id="通过ServletConfig获取Servlet的初始化参数"><a href="#通过ServletConfig获取Servlet的初始化参数" class="headerlink" title="通过ServletConfig获取Servlet的初始化参数"></a>通过ServletConfig获取Servlet的初始化参数</h1><p>　当servlet配置了初始化参数后，web容器在创建servlet实例对象时，会自动将这些初始化参数封装到ServletConfig对象中，并在调用servlet的init方法时，将ServletConfig对象传递给servlet。进而，我们通过ServletConfig对象就可以得到当前servlet的初始化参数信息。</p><h2 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是获取servlet的配置信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"><span class="comment">/*getInitParameter("参数名")用于获取参数值*/</span></span><br><span class="line">String user = config.getInitParameter(<span class="string">"user"</span>);</span><br><span class="line">String user1 = config.getInitParameter(<span class="string">"root"</span>);</span><br><span class="line">System.out.println(<span class="string">"user:"</span> + user);System.out.println(<span class="string">"user:"</span> + user1);</span><br><span class="line"><span class="comment">/*getInitParameterNames()用于获取参数名*/</span></span><br><span class="line">Enumeration&lt;String&gt; name = config.getInitParameterNames();</span><br><span class="line"><span class="keyword">while</span>(name.hasMoreElements()) &#123;</span><br><span class="line">String name1 = name.nextElement();</span><br><span class="line">System.out.println(<span class="string">"password:"</span> + name1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*getServletName()用于获取服务器名称(了解即可)*/</span></span><br><span class="line">String ServletName = config.getServletName();</span><br><span class="line">System.out.println(ServletName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Web-xml"><a href="#Web-xml" class="headerlink" title="Web.xml"></a>Web.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置和映射 Servlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Servlet 注册的名字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletConfig_Study<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Servlet 的全类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>TTT.ServletConfig_Study<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置 Serlvet 的初始化参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 参数名由 getInitParameterNames()方法获取 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>user<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 参数值由 getInitParameter("参数名") 方法获取--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>123<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>root<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>464<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行结果如下：</p><blockquote><p>user:123<br>user:464<br>password:root<br>password:user<br>ServletConfig_Study</p></blockquote><h1 id="ServletConfig对象的方法"><a href="#ServletConfig对象的方法" class="headerlink" title="ServletConfig对象的方法"></a>ServletConfig对象的方法</h1><p> getInitParameterNames()方法、getInitParameter()方法、getServletName()方法、getServletContext()方法，getServletContext()方法非常重要。</p><h2 id="getInitParameterNames-方法"><a href="#getInitParameterNames-方法" class="headerlink" title="getInitParameterNames()方法"></a>getInitParameterNames()方法</h2><p>  getInitParameterNames()方法用于获取参数的名字，返回值为Enumeration<e>类型。<br>  例子:</e></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Enumeration&lt;String&gt; name = config.getInitParameterNames();</span><br><span class="line"><span class="keyword">while</span>(name.hasMoreElements()) &#123;</span><br><span class="line">String name1 = name.nextElement();</span><br><span class="line">System.out.println(<span class="string">"password:"</span> + name1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="getInitParameter-方法"><a href="#getInitParameter-方法" class="headerlink" title="getInitParameter()方法"></a>getInitParameter()方法</h2><p>getInitParameter()方法用于获取参数名的值，返回值为String类型。<br>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String user = config.getInitParameter(<span class="string">"user"</span>);</span><br></pre></td></tr></table></figure><h2 id="getServletName-方法"><a href="#getServletName-方法" class="headerlink" title="getServletName()方法"></a>getServletName()方法</h2><p>getServletName()用于获取服务器名称(了解即可)，返回值String类型。<br>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String ServletName = config.getServletName();</span><br></pre></td></tr></table></figure><h2 id="getServletContext-方法"><a href="#getServletContext-方法" class="headerlink" title="getServletContext()方法"></a>getServletContext()方法</h2><p>  ServletContext 可以由  SerlvetConfig对象 获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//config是 SerlvetConfig对象</span></span><br><span class="line">ServletContext servletContext = config.getServletContext();</span><br></pre></td></tr></table></figure><p>该对象代表当前 WEB 应用: 可以认为 SerlvetContext 是当前 WEB 应用的一个大管家. 可以从中获取到当前 WEB 应用的各个方面的信息.</p><h3 id="①获取当前-Web-应用的初始化参数"><a href="#①获取当前-Web-应用的初始化参数" class="headerlink" title="①获取当前 Web 应用的初始化参数"></a>①获取当前 Web 应用的初始化参数</h3><p> 设置初始化参数: 可以为所有的 Servlet 所获取, 而 Servlet 的初始化参数只用那个 Serlvet 可以获取. </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置当前 Web 应用的初始化参数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 上下文的参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 参数名由 getInitParameterNames()方法获取 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>driver<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 参数值由 getInitParameter("参数名") 方法获取--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>jdbcurl<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/text<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取ServletContext对象</span></span><br><span class="line">ServletContext servletContext = config.getServletContext();</span><br><span class="line"><span class="comment">//getInitParameter("参数名")用于获取参数值</span></span><br><span class="line">String driver = servletContext.getInitParameter(<span class="string">"driver"</span>);</span><br><span class="line">String jdbcurl = servletContext.getInitParameter(<span class="string">"jdbcurl"</span>);</span><br><span class="line">System.out.println(<span class="string">"driver:"</span> + driver);System.out.println(<span class="string">"jdbcurl:"</span> + jdbcurl);</span><br><span class="line"><span class="comment">//getInitParameterNames()用于获取参数名</span></span><br><span class="line">Enumeration&lt;String&gt; n = servletContext.getInitParameterNames();</span><br><span class="line"><span class="keyword">while</span>(n.hasMoreElements()) &#123;</span><br><span class="line">String name1 = n.nextElement();</span><br><span class="line">System.out.println(<span class="string">"name:"</span> + name1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><blockquote><p>driver:com.mysql.jdbc.Driver<br>jdbcurl:jdbc:mysql://localhost:3306/text<br>name:driver<br>name:jdbcurl</p></blockquote><h3 id="②获取当前-WEB-应用的某一个文件在服务器上的绝对路径-而不是部署前的路径"><a href="#②获取当前-WEB-应用的某一个文件在服务器上的绝对路径-而不是部署前的路径" class="headerlink" title="②获取当前 WEB 应用的某一个文件在服务器上的绝对路径, 而不是部署前的路径"></a>②获取当前 WEB 应用的某一个文件在服务器上的绝对路径, 而不是部署前的路径</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tring realPath = servletContext.getRealPath(<span class="string">"/note.txt"</span>);</span><br><span class="line">System.out.println(realPath);</span><br></pre></td></tr></table></figure><h3 id="③获取当前-WEB-应用的名称"><a href="#③获取当前-WEB-应用的名称" class="headerlink" title="③获取当前 WEB 应用的名称"></a>③获取当前 WEB 应用的名称</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String contextPath = servletContext.getContextPath();</span><br><span class="line">System.out.println(contextPath);</span><br></pre></td></tr></table></figure><h3 id="④获取当前-WEB-应用的某一个文件对应的输入流"><a href="#④获取当前-WEB-应用的某一个文件对应的输入流" class="headerlink" title="④获取当前 WEB 应用的某一个文件对应的输入流."></a>④获取当前 WEB 应用的某一个文件对应的输入流.</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//getResourceAsStream(String path): path 的 / 为当前 WEB 应用的根目录. </span></span><br><span class="line">InputStream is2 = servletContext.getResourceAsStream(<span class="string">"/WEB-INF/classes/jdbc.properties"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ServletConfig对象对应web.xml文件中的&lt;servlet&gt;元素，在Servlet的配置文件web.xml中，可以使用一个或多个&lt;init-param&gt;标签为servlet配置一些初始化参数，然后使用ServletConfig对象中的方法一一获取。
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>Servlet生命周期</title>
    <link href="http://yoursite.com/2020/02/15/Servlet%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://yoursite.com/2020/02/15/Servlet生命周期/</id>
    <published>2020-02-15T01:36:06.000Z</published>
    <updated>2020-02-15T01:56:24.112Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h1><p>   Servlet生命周期由构造器、init方法、service方法和destroy方法组成。<a id="more"></a></p><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><p>   只被调用一次，只有第一次请求Servlet时，创建Servlet的实例，调用构造器。</p><h2 id="init方法"><a href="#init方法" class="headerlink" title="init方法"></a>init方法</h2><p>   只被调用一次，再创建好实例后立即被调用，用于初始当前的Servlet。</p><h2 id="service方法"><a href="#service方法" class="headerlink" title="service方法"></a>service方法</h2><p>   被多次调用，每次请求都会调用service方法。实际用于响应请求的。</p><h2 id="destroy方法"><a href="#destroy方法" class="headerlink" title="destroy方法"></a>destroy方法</h2><p>   只被调用一次，在当前Servlet所在的WEB应用被卸载前调用，用于释放当前Servlet所占用的资源。</p><h1 id="load-on-startup"><a href="#load-on-startup" class="headerlink" title="load-on-startup"></a>load-on-startup</h1><p>  补充说一下，load-on-startup可以指定Servlet被创建的时机，若为负数，则在第一次请求时被创建，若为0或正数，则在当前WEB应用被调用Servlet<br>容器加载时创建实例，且数字越小越早被创建。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;load-on-startup&gt;任意数字&lt;/load-on-startup&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Servlet生命周期&quot;&gt;&lt;a href=&quot;#Servlet生命周期&quot; class=&quot;headerlink&quot; title=&quot;Servlet生命周期&quot;&gt;&lt;/a&gt;Servlet生命周期&lt;/h1&gt;&lt;p&gt;   Servlet生命周期由构造器、init方法、service方法和destroy方法组成。
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>MySQL存储过程的语法</title>
    <link href="http://yoursite.com/2019/09/19/MySQL%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E7%9A%84%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2019/09/19/MySQL存储过程的语法/</id>
    <published>2019-09-19T12:04:56.000Z</published>
    <updated>2019-09-19T12:05:59.990Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL存储过程的语法"><a href="#MySQL存储过程的语法" class="headerlink" title="MySQL存储过程的语法"></a>MySQL存储过程的语法</h1><p>  含义：一组预先编译好的SQL语句的集合，理解成批处理语句<a id="more"></a></p><h1 id="创建语法"><a href="#创建语法" class="headerlink" title="创建语法"></a>创建语法</h1><p>create procedure 存储过程名(参数列表)<br>begin<br>       存储过程体(一组合法的SQL语句)<br>end</p><h1 id="调用语法"><a href="#调用语法" class="headerlink" title="调用语法"></a>调用语法</h1><p>call 存储过程名(实参列表);</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>1、参数列表包含三部分<br>参数模式  参数名  参数类型<br>举例：<br>IN stuname varchar(20)</p><p>参数模式：<br>IN：该参数可以作为输入，也就是该参数需要调用方传入值</p><p>OU：该参数可以作为输出，也就是该参数可以作为返回值</p><p>INOUT：既可以输入也可以输出，也就是该参数既需要传入值，又可以返回值</p><p>2、如果存储过程体仅仅只有一句话，begin  end可以省略。</p><p>存储过程体中的每条SQL语句的结尾要求必须加分号。</p><p>存储过程体中的结尾可以使用 delimiter 重新设置。<br>语法：<br>delimiter 结束标记<br>案例：<br>delimiter *</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="空参列表（不带参数）"><a href="#空参列表（不带参数）" class="headerlink" title="空参列表（不带参数）"></a>空参列表（不带参数）</h2><p>插入2条记录到admin表中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">delimiter *</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> c()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">admin</span>(<span class="keyword">name</span>,<span class="string">'password'</span>)</span><br><span class="line"><span class="keyword">values</span>(<span class="string">'jack'</span>,<span class="number">123456</span>),(<span class="string">'rose'</span>,<span class="number">678910</span>);</span><br><span class="line"><span class="keyword">end</span> *</span><br><span class="line"></span><br><span class="line">调用</span><br><span class="line"><span class="keyword">call</span> c()*</span><br></pre></td></tr></table></figure><h2 id="带in模式参数模式的存储过程"><a href="#带in模式参数模式的存储过程" class="headerlink" title="带in模式参数模式的存储过程"></a>带in模式参数模式的存储过程</h2><p>创建存储过程实现  根据女生名字，查询对应的男朋友信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> c1(<span class="keyword">in</span> beautyname <span class="built_in">varchar</span>(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line"><span class="keyword">select</span> bo.* <span class="keyword">from</span> boys bo <span class="keyword">right</span> <span class="keyword">join</span> beauty b <span class="keyword">on</span> bo.id=b.boyfriend_id</span><br><span class="line"><span class="keyword">where</span> b.name=beautyname;</span><br><span class="line"><span class="keyword">end</span> *</span><br><span class="line"></span><br><span class="line">调用</span><br><span class="line"><span class="keyword">call</span> c1(<span class="string">'苍井空'</span>)* (这里可能报错，是字符集问题，可以修改字符集：<span class="keyword">set</span> <span class="keyword">names</span> gbk)</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">names</span> gbk*</span><br></pre></td></tr></table></figure><h2 id="带out模式的存储过程"><a href="#带out模式的存储过程" class="headerlink" title="带out模式的存储过程"></a>带out模式的存储过程</h2><p>根据女生名字，返回男朋友信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> c2(<span class="keyword">in</span> beautyname <span class="built_in">varchar</span>(<span class="number">10</span>),<span class="keyword">out</span> boyname <span class="built_in">varchar</span>(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">select</span> bo.boyname <span class="keyword">from</span> boys bo <span class="keyword">inner</span> <span class="keyword">join</span> beauty b <span class="keyword">on</span> bo.id=b.boyfriend_id</span><br><span class="line"><span class="keyword">where</span> b.name=beautyname;</span><br><span class="line"><span class="keyword">end</span> *</span><br><span class="line"></span><br><span class="line">调用</span><br><span class="line"><span class="keyword">set</span> @bName* (定义用户变量)</span><br><span class="line"><span class="keyword">call</span> c2(<span class="string">'苍井空'</span>,@bName)*</span><br><span class="line"><span class="keyword">select</span> @bName*</span><br></pre></td></tr></table></figure><h2 id="带inout模式参数的存储过程"><a href="#带inout模式参数的存储过程" class="headerlink" title="带inout模式参数的存储过程"></a>带inout模式参数的存储过程</h2><p>传入a和b两个值，最终a和b都翻倍并返回</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">creat procedure c3(inout a int,inout b int)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">set</span> a=a*<span class="number">2</span>;  <span class="comment"># 局部变量赋值</span></span><br><span class="line"><span class="keyword">set</span> b=b*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">end</span>*</span><br><span class="line"></span><br><span class="line">调用</span><br><span class="line"><span class="keyword">set</span> @m=<span class="number">10</span>*</span><br><span class="line"><span class="keyword">set</span> @g=<span class="number">20</span>*</span><br><span class="line"><span class="keyword">call</span> c3(@m,@g)*</span><br><span class="line"><span class="keyword">select</span> @m,@g;</span><br></pre></td></tr></table></figure><h1 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h1><p>语法：drop procedure 存储过程名称 #一次只能删除一个。</p><h1 id="查看存储过程的信息"><a href="#查看存储过程的信息" class="headerlink" title="查看存储过程的信息"></a>查看存储过程的信息</h1><p>show create procedure c;</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MySQL存储过程的语法&quot;&gt;&lt;a href=&quot;#MySQL存储过程的语法&quot; class=&quot;headerlink&quot; title=&quot;MySQL存储过程的语法&quot;&gt;&lt;/a&gt;MySQL存储过程的语法&lt;/h1&gt;&lt;p&gt;  含义：一组预先编译好的SQL语句的集合，理解成批处理语句
    
    </summary>
    
      <category term="MySQL数据库" scheme="http://yoursite.com/categories/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL数据库" scheme="http://yoursite.com/tags/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库之事务</title>
    <link href="http://yoursite.com/2019/09/04/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E4%BA%8B%E5%8A%A1/"/>
    <id>http://yoursite.com/2019/09/04/MySQL数据库之事务/</id>
    <published>2019-09-04T15:30:00.000Z</published>
    <updated>2019-09-04T15:35:41.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>数据库的事务。<a id="more"></a></p><h2 id="事务基本概念"><a href="#事务基本概念" class="headerlink" title="事务基本概念"></a>事务基本概念</h2><p>一组要么同时执行成功，要么同时执行失败的SQL语句，是数据库操作的一个执行单元。</p><h2 id="事物开始于"><a href="#事物开始于" class="headerlink" title="事物开始于"></a>事物开始于</h2><p>连接到数据库上，并执行一条DML语句(INSERT、UPDATE或DELETE)</p><p>前一个事务结束后，又输入了另一条DML语句。</p><h2 id="事务结束于"><a href="#事务结束于" class="headerlink" title="事务结束于"></a>事务结束于</h2><p>执行COMMIT或ROLLBAC。</p><p>执行一条DDL语句，例如CREATE TABLE或；在这种情况下，会自动执行COMMIT语句。</p><p>执行一条DCL语句，例如GRANT语句；在这种情况下，会自动执行COMMIT语句。</p><p>断开与数据库的连接。</p><p>执行了一套DML，该语句却失败了；在这种情况中，会为这个无效的DML语句执行ROLLBACK语句。</p><h1 id="事务的四大特点-ACID"><a href="#事务的四大特点-ACID" class="headerlink" title="事务的四大特点(ACID)"></a>事务的四大特点(ACID)</h1><p>atomicity（原子性）<br>·表示一个事务内的所有操作是一个整体，要么全部成功，要么全失败；</p><p>consistency（一致性）<br>·表示一个事务内有一个操作失败时，所有的更改过的数据都必须回滚到修改前的状态。</p><p>isolation（隔离性）<br>·事务查看数据时数据所处的状态，要么是另一并发事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看中间状态的数据。</p><p>durability（持久性）<br>·持久性事务完成之后，它对于系统的影响是永久性的。</p><h1 id="事务隔离级别从低到高"><a href="#事务隔离级别从低到高" class="headerlink" title="事务隔离级别从低到高"></a>事务隔离级别从低到高</h1><p>读取未提交（Read Uncommitted）</p><p>读取已提交（Read Committed）</p><p>可重复读（Repeatable Read）</p><p>序列化（serializable）</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;事务&quot;&gt;&lt;a href=&quot;#事务&quot; class=&quot;headerlink&quot; title=&quot;事务&quot;&gt;&lt;/a&gt;事务&lt;/h1&gt;&lt;p&gt;数据库的事务。
    
    </summary>
    
      <category term="MySQL数据库" scheme="http://yoursite.com/categories/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL数据库" scheme="http://yoursite.com/tags/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>GOF23设计模式（完）</title>
    <link href="http://yoursite.com/2019/08/31/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%AE%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/31/GOF23设计模式（完）/</id>
    <published>2019-08-31T12:27:56.000Z</published>
    <updated>2019-08-31T12:36:40.367Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GOF23设计模式总结"><a href="#GOF23设计模式总结" class="headerlink" title="GOF23设计模式总结"></a>GOF23设计模式总结</h1><h1 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h1><p> 单例模式、工厂模式、建造者模式、原型模式。</p><h1 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h1><p> 装饰模式、享元模式、桥接模式、组合模式、外观模式、代理模式、适配器模式。</p><h1 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h1><p> 模板方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、策略模式、状态模式、责任链模式、访问者模式。</p><a id="more"></a><h1 id="创建型模式-1"><a href="#创建型模式-1" class="headerlink" title="创建型模式"></a>创建型模式</h1><p>  关注对象的创建过程。</p><h2 id="单例模式-Singleton"><a href="#单例模式-Singleton" class="headerlink" title="单例模式(Singleton)"></a>单例模式(Singleton)</h2><p> 保证一个类只有一个实例，并且提供一个访问该实例的全局访问点。</p><h2 id="工厂模式-Factory"><a href="#工厂模式-Factory" class="headerlink" title="工厂模式(Factory)"></a>工厂模式(Factory)</h2><p> 实例化对象，用工厂方法代替new操作。<br> 将选择实现类、创建对象统一管理和控制。从而将调用者跟我们的实现类解耦。</p><h2 id="建造者模式-Builder"><a href="#建造者模式-Builder" class="headerlink" title="建造者模式(Builder)"></a>建造者模式(Builder)</h2><p> 具体的建造者类之间是相互独立的，容易扩展。</p><h2 id="原型模式-Prototype"><a href="#原型模式-Prototype" class="headerlink" title="原型模式(Prototype)"></a>原型模式(Prototype)</h2><p> 扩展性好，由于写原型模式的时候使用了抽象原型类，在客户端进行编程的时候可以将具体的原型类通过配置进行读取。</p><h1 id="结构型模式-1"><a href="#结构型模式-1" class="headerlink" title="结构型模式"></a>结构型模式</h1><p>关注对象和类的组织。</p><h2 id="适配器-Adapter-模式"><a href="#适配器-Adapter-模式" class="headerlink" title="适配器(Adapter)模式"></a>适配器(Adapter)模式</h2><p> 将一个类的接口转换成客户希望的另外一个接口，Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以在一起工作。</p><h2 id="代理模式-Proxy-pattern"><a href="#代理模式-Proxy-pattern" class="headerlink" title="代理模式(Proxy pattern)"></a>代理模式(Proxy pattern)</h2><p> 通过代理，控制对对象的访问。</p><h2 id="桥接模式-bridge"><a href="#桥接模式-bridge" class="headerlink" title="桥接模式(bridge)"></a>桥接模式(bridge)</h2><p> 桥接模式可以取代多层继承的方案。多层继承违背了单一职责原则，复用性较差，类的个数也非常多。桥接模式可以极大的减少子类的个数，从而降低管理和维护的成本。<br> 桥接模式极大提高了系统可扩展性，在两个变化维度中任意扩展一个维度，都不需要修改原有的系统，符合开闭原则。</p><h2 id="组合模式-composite"><a href="#组合模式-composite" class="headerlink" title="组合模式(composite)"></a>组合模式(composite)</h2><p> 抽象构件(Component)角色：定义了叶子和容器构件的共同点。<br> 叶子(Leaf)构件角色：无子节点。<br> 容器(Composite)构件角色：有容器特征，可以包含子节点。</p><h2 id="装饰模式-decorator"><a href="#装饰模式-decorator" class="headerlink" title="装饰模式(decorator)"></a>装饰模式(decorator)</h2><p> 动态的为一个对象增加新功能。<br> 装饰模式是一种用于代替继承的技术，无需通过继承增加子类就能扩展对象的新功能。使用对象的关联关系代替继承关系，更加灵活，同时避免类型体系的快速膨胀。</p><h2 id="外观模式-Facade"><a href="#外观模式-Facade" class="headerlink" title="外观模式(Facade)"></a>外观模式(Facade)</h2><p> 为子系统提供统一的入口，封装子系统的复杂性，便于客户端调用。</p><h2 id="享元模式-FlyWeight"><a href="#享元模式-FlyWeight" class="headerlink" title="享元模式(FlyWeight)"></a>享元模式(FlyWeight)</h2><p> 享元模式以共享的方式高效地支持大量细粒度对象的重用。<br> 享元对象能做到共享的关键是区分了内部状态和外部状态<br>  ·内部状态：可以共享，不会随环境变化而改变<br>  ·外部状态：不可以共享，会随环境变化而改变</p><h1 id="行为型模式-1"><a href="#行为型模式-1" class="headerlink" title="行为型模式"></a>行为型模式</h1><p>  关注系统中对象之间的相互交互研究系统在运行时对象之间的相互通信和协作，进一步明确对象的职责。</p><h2 id="责任链模式-Chain-of-Responsibility"><a href="#责任链模式-Chain-of-Responsibility" class="headerlink" title="责任链模式(Chain of Responsibility)"></a>责任链模式(Chain of Responsibility)</h2><p> 将能够处理同一类请求的对象连成一条链，所提交的请求沿着链传递，链上的对象逐个判断是否有能力处理该请求，如果能则处理，如果不能则传递给链上的下一个对象.</p><h2 id="迭代器模式-iterator"><a href="#迭代器模式-iterator" class="headerlink" title="迭代器模式(iterator)"></a>迭代器模式(iterator)</h2><p> 提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。</p><h2 id="中介者模式-Mediator"><a href="#中介者模式-Mediator" class="headerlink" title="中介者模式(Mediator)"></a>中介者模式(Mediator)</h2><p> 定义一个中介对象来封装一系列对象之间的交互，使原有对象之间的耦合松散，且可以独立地改变它们之间的交互。中介者模式又叫调停模式，它是迪米特法则的典型应用。</p><h2 id="命令模式-command"><a href="#命令模式-command" class="headerlink" title="命令模式(command)"></a>命令模式(command)</h2><p> 将请求封装为一个对象，从而使我们可用不同的请求对客户端进行参数化。</p><h2 id="解释器模式-Interpreter"><a href="#解释器模式-Interpreter" class="headerlink" title="解释器模式(Interpreter)"></a>解释器模式(Interpreter)</h2><p> 用于描述如何构成一个简单的语言解释器，主要用于使用面向对象语言开发的编译器和解释器设计。</p><h2 id="访问者模式-Visitor"><a href="#访问者模式-Visitor" class="headerlink" title="访问者模式(Visitor)"></a>访问者模式(Visitor)</h2><p> 表示一个作用于对象结构中的各元素的操作，它使我们可以在不改变元素的类的前提下定义作用于这些元素的新操作。</p><h2 id="策略模式-Strategy"><a href="#策略模式-Strategy" class="headerlink" title="策略模式(Strategy)"></a>策略模式(Strategy)</h2><p> 分离算法，选择实现。</p><h2 id="模板方法模式-template-method"><a href="#模板方法模式-template-method" class="headerlink" title="模板方法模式(template method)"></a>模板方法模式(template method)</h2><p> 定义一个操作中的算法骨架，将某些步骤延迟到子类中实现。</p><h2 id="状态模式-state"><a href="#状态模式-state" class="headerlink" title="状态模式(state)"></a>状态模式(state)</h2><p> 用于解决系统中复杂对象的状态转换以及不同状态下行为的封装问题。</p><h2 id="观察者模式-Observer"><a href="#观察者模式-Observer" class="headerlink" title="观察者模式(Observer)"></a>观察者模式(Observer)</h2><p> 主要用于1:N的通知。当一个对象的状态变化时，他需要及时告知一系列对象，令他们做出响应。</p><h2 id="备忘录模式-memento"><a href="#备忘录模式-memento" class="headerlink" title="备忘录模式(memento)"></a>备忘录模式(memento)</h2><p> 保存某个对象内部状态的拷贝，这样以后就可以将该对象恢复到原先的状态。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GOF23设计模式总结&quot;&gt;&lt;a href=&quot;#GOF23设计模式总结&quot; class=&quot;headerlink&quot; title=&quot;GOF23设计模式总结&quot;&gt;&lt;/a&gt;GOF23设计模式总结&lt;/h1&gt;&lt;h1 id=&quot;创建型模式&quot;&gt;&lt;a href=&quot;#创建型模式&quot; class=&quot;headerlink&quot; title=&quot;创建型模式&quot;&gt;&lt;/a&gt;创建型模式&lt;/h1&gt;&lt;p&gt; 单例模式、工厂模式、建造者模式、原型模式。&lt;/p&gt;
&lt;h1 id=&quot;结构型模式&quot;&gt;&lt;a href=&quot;#结构型模式&quot; class=&quot;headerlink&quot; title=&quot;结构型模式&quot;&gt;&lt;/a&gt;结构型模式&lt;/h1&gt;&lt;p&gt; 装饰模式、享元模式、桥接模式、组合模式、外观模式、代理模式、适配器模式。&lt;/p&gt;
&lt;h1 id=&quot;行为型模式&quot;&gt;&lt;a href=&quot;#行为型模式&quot; class=&quot;headerlink&quot; title=&quot;行为型模式&quot;&gt;&lt;/a&gt;行为型模式&lt;/h1&gt;&lt;p&gt; 模板方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、策略模式、状态模式、责任链模式、访问者模式。&lt;/p&gt;
    
    </summary>
    
      <category term="GOF设计模式" scheme="http://yoursite.com/categories/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="GOF设计模式" scheme="http://yoursite.com/tags/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>GOF23设计模式（十五）</title>
    <link href="http://yoursite.com/2019/08/31/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/31/GOF23设计模式（十五）/</id>
    <published>2019-08-31T12:27:32.000Z</published>
    <updated>2019-08-31T12:29:21.286Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GOF设计模式之备忘录模式-memento"><a href="#GOF设计模式之备忘录模式-memento" class="headerlink" title="GOF设计模式之备忘录模式(memento)"></a>GOF设计模式之备忘录模式(memento)</h1><a id="more"></a><h1 id="备忘录模式-memento"><a href="#备忘录模式-memento" class="headerlink" title="备忘录模式(memento)"></a>备忘录模式(memento)</h1><p>保存某个对象内部状态的拷贝，这样以后就可以将该对象恢复到原先的状态。</p><h2 id="源发器"><a href="#源发器" class="headerlink" title="源发器"></a>源发器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 源发器类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//备忘录操作</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EmpMemento <span class="title">memento</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> EmpMemento(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进行数据恢复，恢复成指定备忘录对象的值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recovery</span><span class="params">(EmpMemento mmt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name=mmt.getName();</span><br><span class="line"><span class="keyword">this</span>.age=mmt.getAge();</span><br><span class="line"><span class="keyword">this</span>.salary=mmt.getSalary();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Emp</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="备忘录"><a href="#备忘录" class="headerlink" title="备忘录"></a>备忘录</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  备忘录类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpMemento</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">EmpMemento</span><span class="params">(Emp e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name=e.getName();</span><br><span class="line"><span class="keyword">this</span>.age=e.getAge();</span><br><span class="line"><span class="keyword">this</span>.salary=e.getSalary();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="负责人"><a href="#负责人" class="headerlink" title="负责人"></a>负责人</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 负责人类</span></span><br><span class="line"><span class="comment"> * 管理备忘录对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CareTaker</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> EmpMemento memento;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> EmpMemento <span class="title">getMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> memento;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(EmpMemento memento)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.memento = memento;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">CareTaker taker = <span class="keyword">new</span> CareTaker();</span><br><span class="line">Emp emp = <span class="keyword">new</span> Emp(<span class="string">"小四"</span>,<span class="number">19</span>,<span class="number">1000</span>);</span><br><span class="line">System.out.println(<span class="string">"Once"</span>+<span class="string">"年龄："</span>+emp.getAge()+<span class="string">"，姓名："</span>+emp.getName()</span><br><span class="line">+<span class="string">"，工资："</span>+emp.getSalary());</span><br><span class="line">taker.setMemento(emp.memento());<span class="comment">//记录一次</span></span><br><span class="line">emp.setAge(<span class="number">20</span>);emp.setName(<span class="string">"大四"</span>);emp.setSalary(<span class="number">1200</span>);</span><br><span class="line">System.out.println(<span class="string">"Twice"</span>+<span class="string">"年龄："</span>+emp.getAge()+<span class="string">"，姓名："</span>+emp.getName()</span><br><span class="line">+<span class="string">"，工资："</span>+emp.getSalary());</span><br><span class="line">emp.recovery(taker.getMemento());<span class="comment">//恢复</span></span><br><span class="line">System.out.println(<span class="string">"-----"</span>+<span class="string">"年龄："</span>+emp.getAge()+<span class="string">"，姓名："</span>+emp.getName()</span><br><span class="line">+<span class="string">"，工资："</span>+emp.getSalary());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><blockquote><p>Once年龄：19，姓名：小四，工资：1000.0<br>Twice年龄：20，姓名：大四，工资：1200.0<br>—–年龄：19，姓名：小四，工资：1000.0</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GOF设计模式之备忘录模式-memento&quot;&gt;&lt;a href=&quot;#GOF设计模式之备忘录模式-memento&quot; class=&quot;headerlink&quot; title=&quot;GOF设计模式之备忘录模式(memento)&quot;&gt;&lt;/a&gt;GOF设计模式之备忘录模式(memento)&lt;/h1&gt;
    
    </summary>
    
      <category term="GOF设计模式" scheme="http://yoursite.com/categories/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="GOF设计模式" scheme="http://yoursite.com/tags/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>GOF23设计模式（十四）</title>
    <link href="http://yoursite.com/2019/08/31/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/31/GOF23设计模式（十四）/</id>
    <published>2019-08-31T06:16:11.000Z</published>
    <updated>2019-08-31T06:17:17.399Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GOF设计模式之状态模式-state-与观察者模式-Observer"><a href="#GOF设计模式之状态模式-state-与观察者模式-Observer" class="headerlink" title="GOF设计模式之状态模式(state)与观察者模式(Observer)"></a>GOF设计模式之状态模式(state)与观察者模式(Observer)</h1><a id="more"></a><h1 id="状态模式-state"><a href="#状态模式-state" class="headerlink" title="状态模式(state)"></a>状态模式(state)</h1><p>用于解决系统中复杂对象的状态转换以及不同状态下行为的封装问题。</p><h2 id="状态接口"><a href="#状态接口" class="headerlink" title="状态接口"></a>状态接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 空闲状态</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FreeState</span> <span class="keyword">implements</span> <span class="title">State</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"房间空闲没人住"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 预订状态</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookedState</span> <span class="keyword">implements</span> <span class="title">State</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"房间已预订"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 已入住状态</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckedInState</span> <span class="keyword">implements</span> <span class="title">State</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"房间已入住"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 房间状态管理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeContext</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> State state;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(State s)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"修改状态"</span>);</span><br><span class="line">state=s;</span><br><span class="line">state.handle();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> HomeContext c=<span class="keyword">new</span> HomeContext();</span><br><span class="line"> c.setState(<span class="keyword">new</span> FreeState());</span><br><span class="line"> </span><br><span class="line"> c.setState(<span class="keyword">new</span> BookedState());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><blockquote><p>修改状态<br>房间空闲没人住<br>修改状态<br>房间已预订</p></blockquote><h1 id="观察者模式-Observer"><a href="#观察者模式-Observer" class="headerlink" title="观察者模式(Observer)"></a>观察者模式(Observer)</h1><p>主要用于1:N的通知。当一个对象的状态变化时，他需要及时告知一系列对象，令他们做出响应。</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Subject subject)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现接口-1"><a href="#实现接口-1" class="headerlink" title="实现接口"></a>实现接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverA</span> <span class="keyword">implements</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> Mystate; <span class="comment">//与目标对象保持一致</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Subject subject)</span> </span>&#123;</span><br><span class="line">Mystate=((ConcreteSubject)subject).getState();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMystate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Mystate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMystate</span><span class="params">(<span class="keyword">int</span> mystate)</span> </span>&#123;</span><br><span class="line">Mystate = mystate;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="观察者容器"><a href="#观察者容器" class="headerlink" title="观察者容器"></a>观察者容器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"><span class="keyword">protected</span> List&lt;Observer&gt; list =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Observer obs)</span> </span>&#123;</span><br><span class="line">list.add(obs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer obs)</span> </span>&#123;</span><br><span class="line">list.remove(obs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通知所有观察者更新状态</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyAllObserver</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (Observer observer : list) &#123;</span><br><span class="line">observer.update(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> <span class="keyword">extends</span> <span class="title">Subject</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> state;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.state = state;</span><br><span class="line"><span class="comment">//值发生了变化</span></span><br><span class="line"><span class="keyword">this</span>.notifyAllObserver();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//目标对象</span></span><br><span class="line">ConcreteSubject subject =<span class="keyword">new</span> ConcreteSubject();</span><br><span class="line"><span class="comment">//观察者</span></span><br><span class="line">ObserverA a = <span class="keyword">new</span> ObserverA();</span><br><span class="line">ObserverA b = <span class="keyword">new</span> ObserverA();</span><br><span class="line">ObserverA c = <span class="keyword">new</span> ObserverA();</span><br><span class="line"><span class="comment">//添加到容器里去</span></span><br><span class="line">subject.register(a);</span><br><span class="line">subject.register(b);</span><br><span class="line">subject.register(c);</span><br><span class="line"></span><br><span class="line"><span class="comment">//改变subjec状态</span></span><br><span class="line">subject.setState(<span class="number">200</span>);</span><br><span class="line"><span class="comment">//查看观察者状态</span></span><br><span class="line">System.out.println(a.getMystate());</span><br><span class="line">System.out.println(b.getMystate());</span><br><span class="line">System.out.println(c.getMystate());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h2><blockquote><p>200<br>200<br>200</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GOF设计模式之状态模式-state-与观察者模式-Observer&quot;&gt;&lt;a href=&quot;#GOF设计模式之状态模式-state-与观察者模式-Observer&quot; class=&quot;headerlink&quot; title=&quot;GOF设计模式之状态模式(state)与观察者模式(Observer)&quot;&gt;&lt;/a&gt;GOF设计模式之状态模式(state)与观察者模式(Observer)&lt;/h1&gt;
    
    </summary>
    
      <category term="GOF设计模式" scheme="http://yoursite.com/categories/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="GOF设计模式" scheme="http://yoursite.com/tags/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>GOF23设计模式（十三）</title>
    <link href="http://yoursite.com/2019/08/30/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/30/GOF23设计模式（十三）/</id>
    <published>2019-08-30T13:50:11.000Z</published>
    <updated>2019-08-30T13:51:37.811Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GOF设计模式之策略模式-Strategy-与模板方法模式-template-method"><a href="#GOF设计模式之策略模式-Strategy-与模板方法模式-template-method" class="headerlink" title="GOF设计模式之策略模式(Strategy)与模板方法模式(template method)"></a>GOF设计模式之策略模式(Strategy)与模板方法模式(template method)</h1><a id="more"></a><h1 id="策略模式-Strategy"><a href="#策略模式-Strategy" class="headerlink" title="策略模式(Strategy)"></a>策略模式(Strategy)</h1><p>分离算法，选择实现。</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">(<span class="keyword">double</span> standardPrice)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现接口方法"><a href="#实现接口方法" class="headerlink" title="实现接口方法"></a>实现接口方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewCustomerFewStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">(<span class="keyword">double</span> standardPrice)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"不打折，原价"</span>);</span><br><span class="line"><span class="keyword">return</span> standardPrice;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewCustomerManyStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">(<span class="keyword">double</span> standardPrice)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"打九折"</span>);</span><br><span class="line"><span class="keyword">return</span> standardPrice*<span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OldCustomerFewStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">(<span class="keyword">double</span> standardPrice)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"打八五折"</span>);</span><br><span class="line"><span class="keyword">return</span> standardPrice*<span class="number">0.85</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OldCustomerManyStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">(<span class="keyword">double</span> standardPrice)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"打八折"</span>);</span><br><span class="line"><span class="keyword">return</span> standardPrice*<span class="number">0.8</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="负责交互"><a href="#负责交互" class="headerlink" title="负责交互"></a>负责交互</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 负责和具体的策略类交互</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Strategy strategy;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStrategy</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pringPrice</span><span class="params">(<span class="keyword">double</span> s)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"您的价格是："</span>+strategy.getPrice(s));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Strategy s1 =<span class="keyword">new</span> OldCustomerManyStrategy();</span><br><span class="line">Context ctx =<span class="keyword">new</span> Context(s1);</span><br><span class="line">ctx.pringPrice(<span class="number">864</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><blockquote><p>打八折<br>您的价格是：691.2</p></blockquote><h1 id="模板方法模式-template-method"><a href="#模板方法模式-template-method" class="headerlink" title="模板方法模式(template method)"></a>模板方法模式(template method)</h1><p>定义一个操作中的算法骨架，将某些步骤延迟到子类中实现。</p><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BankTemplateMethod</span> </span>&#123;</span><br><span class="line"><span class="comment">//具体方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"取号排队"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">transact</span><span class="params">()</span></span>;<span class="comment">//办理具体的业务 钩子方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">evaluate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"反馈评分"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123; <span class="comment">//模板方法</span></span><br><span class="line"><span class="keyword">this</span>.takeNumber();</span><br><span class="line"><span class="keyword">this</span>.transact();</span><br><span class="line"><span class="keyword">this</span>.evaluate();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">BankTemplateMethod btm=<span class="keyword">new</span> DrawMoney();</span><br><span class="line">btm.process();</span><br><span class="line"><span class="comment">//匿名内部类</span></span><br><span class="line">BankTemplateMethod btm1 = <span class="keyword">new</span> BankTemplateMethod() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transact</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我要存钱"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">btm1.process();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrawMoney</span> <span class="keyword">extends</span> <span class="title">BankTemplateMethod</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transact</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我要取款！！！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><blockquote><p>取号排队<br>我要取款！！！<br>反馈评分<br>取号排队<br>我要存钱<br>反馈评分</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GOF设计模式之策略模式-Strategy-与模板方法模式-template-method&quot;&gt;&lt;a href=&quot;#GOF设计模式之策略模式-Strategy-与模板方法模式-template-method&quot; class=&quot;headerlink&quot; title=&quot;GOF设计模式之策略模式(Strategy)与模板方法模式(template method)&quot;&gt;&lt;/a&gt;GOF设计模式之策略模式(Strategy)与模板方法模式(template method)&lt;/h1&gt;
    
    </summary>
    
      <category term="GOF设计模式" scheme="http://yoursite.com/categories/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="GOF设计模式" scheme="http://yoursite.com/tags/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>GOF23设计模式（十二）</title>
    <link href="http://yoursite.com/2019/08/30/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/30/GOF23设计模式（十二）/</id>
    <published>2019-08-30T12:53:16.000Z</published>
    <updated>2019-08-30T13:29:18.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GOF设计模式之解释器模式-Interpreter-与访问者模式-Visitor"><a href="#GOF设计模式之解释器模式-Interpreter-与访问者模式-Visitor" class="headerlink" title="GOF设计模式之解释器模式(Interpreter)与访问者模式(Visitor)"></a>GOF设计模式之解释器模式(Interpreter)与访问者模式(Visitor)</h1><p>这两个模式了解即可，可自行百度，谷歌。<a id="more"></a></p><h1 id="解释器模式-Interpreter"><a href="#解释器模式-Interpreter" class="headerlink" title="解释器模式(Interpreter)"></a>解释器模式(Interpreter)</h1><p>用于描述如何构成一个简单的语言解释器，主要用于使用面向对象语言开发的编译器和解释器设计。</p><h1 id="访问者模式-Visitor"><a href="#访问者模式-Visitor" class="headerlink" title="访问者模式(Visitor)"></a>访问者模式(Visitor)</h1><p>表示一个作用于对象结构中的各元素的操作，它使我们可以在不改变元素的类的前提下</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GOF设计模式之解释器模式-Interpreter-与访问者模式-Visitor&quot;&gt;&lt;a href=&quot;#GOF设计模式之解释器模式-Interpreter-与访问者模式-Visitor&quot; class=&quot;headerlink&quot; title=&quot;GOF设计模式之解释器模式(Interpreter)与访问者模式(Visitor)&quot;&gt;&lt;/a&gt;GOF设计模式之解释器模式(Interpreter)与访问者模式(Visitor)&lt;/h1&gt;&lt;p&gt;这两个模式了解即可，可自行百度，谷歌。
    
    </summary>
    
      <category term="GOF设计模式" scheme="http://yoursite.com/categories/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="GOF设计模式" scheme="http://yoursite.com/tags/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>GOF23设计模式（十一）</title>
    <link href="http://yoursite.com/2019/08/30/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/30/GOF23设计模式（十一）/</id>
    <published>2019-08-30T05:48:14.000Z</published>
    <updated>2019-08-30T13:29:11.202Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GOF设计模式之中介者模式-Mediator-与命令模式-Command"><a href="#GOF设计模式之中介者模式-Mediator-与命令模式-Command" class="headerlink" title="GOF设计模式之中介者模式(Mediator)与命令模式(Command)"></a>GOF设计模式之中介者模式(Mediator)与命令模式(Command)</h1><a id="more"></a><h1 id="中介者模式-Mediator"><a href="#中介者模式-Mediator" class="headerlink" title="中介者模式(Mediator)"></a>中介者模式(Mediator)</h1><p>定义一个中介对象来封装一系列对象之间的交互，使原有对象之间的耦合松散，且可以独立地改变它们之间的交互。中介者模式又叫调停模式，它是迪米特法则的典型应用。</p><h2 id="职责接口"><a href="#职责接口" class="headerlink" title="职责接口"></a>职责接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">register</span><span class="params">(String dname,Department d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">command</span><span class="params">(String dname)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="部门接口"><a href="#部门接口" class="headerlink" title="部门接口"></a>部门接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同事类接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selfAction</span><span class="params">()</span></span>; <span class="comment">//做本部门的事情</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">outAction</span><span class="params">()</span></span>; <span class="comment">//发出申请</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="研发部"><a href="#研发部" class="headerlink" title="研发部"></a>研发部</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Development</span> <span class="keyword">implements</span> <span class="title">Department</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Mediator m; <span class="comment">//持有中介者的引用</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Development</span><span class="params">(Mediator m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.m = m;</span><br><span class="line">m.register(<span class="string">"development"</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selfAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"开发项目"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"研发部汇报工作"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="财务部"><a href="#财务部" class="headerlink" title="财务部"></a>财务部</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Finacial</span> <span class="keyword">implements</span> <span class="title">Department</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Mediator m; <span class="comment">//持有中介者的引用</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Finacial</span><span class="params">(Mediator m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.m = m;</span><br><span class="line">m.register(<span class="string">"finacial"</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selfAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"数钱"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"财务部汇报工作"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="市场部"><a href="#市场部" class="headerlink" title="市场部"></a>市场部</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Market</span> <span class="keyword">implements</span> <span class="title">Department</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Mediator m; <span class="comment">//持有中介者的引用</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Market</span><span class="params">(Mediator m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.m = m;</span><br><span class="line">m.register(<span class="string">"market"</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selfAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"调研接项目"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"市场部汇报工作"</span>);</span><br><span class="line">m.command(<span class="string">"finacial"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总管理"><a href="#总管理" class="headerlink" title="总管理"></a>总管理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">President</span> <span class="keyword">implements</span> <span class="title">Mediator</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Map&lt;String,Department&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(String dname, Department d)</span> </span>&#123;</span><br><span class="line">map.put(dname,d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">command</span><span class="params">(String dname)</span> </span>&#123;</span><br><span class="line">map.get(dname).selfAction();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Mediator m=<span class="keyword">new</span> President();</span><br><span class="line">Market market=<span class="keyword">new</span> Market(m);</span><br><span class="line">Development devp=<span class="keyword">new</span> Development(m);</span><br><span class="line">Finacial f=<span class="keyword">new</span> Finacial(m);</span><br><span class="line">market.selfAction();</span><br><span class="line">market.outAction();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><blockquote><p>调研接项目<br>市场部汇报工作<br>数钱</p></blockquote><h1 id="命令模式-Command"><a href="#命令模式-Command" class="headerlink" title="命令模式(Command)"></a>命令模式(Command)</h1><p>将请求封装为一个对象，从而使我们可用不同的请求对客户端进行参数化。</p><h2 id="执行者"><a href="#执行者" class="headerlink" title="执行者"></a>执行者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 真正的执行者</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Receiver.action()"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="命令接口及实现"><a href="#命令接口及实现" class="headerlink" title="命令接口及实现"></a>命令接口及实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回一个结果为空的方法</span></span><br><span class="line"><span class="comment"> * 根据实际需求可以写多个不同方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommand</span> <span class="keyword">implements</span> <span class="title">Command</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Receiver receiver;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcreteCommand</span><span class="params">(Receiver receiver)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//自行添加相关处理</span></span><br><span class="line">receiver.action();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Invoke</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Command command;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Invoke</span><span class="params">(Command command)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.command = command;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//业务方法，调用命令类的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">command.execute();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Command c=<span class="keyword">new</span> ConcreteCommand(<span class="keyword">new</span> Receiver());</span><br><span class="line">Invoke i=<span class="keyword">new</span> Invoke(c);</span><br><span class="line">i.call();</span><br><span class="line"><span class="comment">//new Receiver().action();</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><blockquote><p>Receiver.action()</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GOF设计模式之中介者模式-Mediator-与命令模式-Command&quot;&gt;&lt;a href=&quot;#GOF设计模式之中介者模式-Mediator-与命令模式-Command&quot; class=&quot;headerlink&quot; title=&quot;GOF设计模式之中介者模式(Mediator)与命令模式(Command)&quot;&gt;&lt;/a&gt;GOF设计模式之中介者模式(Mediator)与命令模式(Command)&lt;/h1&gt;
    
    </summary>
    
      <category term="GOF设计模式" scheme="http://yoursite.com/categories/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="GOF设计模式" scheme="http://yoursite.com/tags/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>GOF23设计模式（十）</title>
    <link href="http://yoursite.com/2019/08/29/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%8D%81%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/29/GOF23设计模式（十）/</id>
    <published>2019-08-29T15:40:47.000Z</published>
    <updated>2019-08-30T13:28:50.426Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GOF设计模式之责任链模式-Chain-of-Responsibility-与迭代器模式-iterator"><a href="#GOF设计模式之责任链模式-Chain-of-Responsibility-与迭代器模式-iterator" class="headerlink" title="GOF设计模式之责任链模式(Chain of Responsibility)与迭代器模式(iterator)"></a>GOF设计模式之责任链模式(Chain of Responsibility)与迭代器模式(iterator)</h1><a id="more"></a><h1 id="责任链模式-Chain-of-Responsibility"><a href="#责任链模式-Chain-of-Responsibility" class="headerlink" title="责任链模式(Chain of Responsibility)"></a>责任链模式(Chain of Responsibility)</h1><p>将能够处理同一类请求的对象连成一条链，所提交的请求沿着链传递，<br>这里写一个公司请假流程管理。</p><h2 id="管理类"><a href="#管理类" class="headerlink" title="管理类"></a>管理类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Leader</span> </span>&#123;</span><br><span class="line"><span class="keyword">protected</span> String name;</span><br><span class="line"><span class="keyword">protected</span> Leader nextLeader; <span class="comment">//责任链上的后继对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Leader</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设定责任链上的后继对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNextLeader</span><span class="params">(Leader nextLeader)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.nextLeader = nextLeader;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//处理请求的核心代码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handlequest</span><span class="params">(LeaveRequest request)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="请假请求"><a href="#请假请求" class="headerlink" title="请假请求"></a>请假请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeaveRequest</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String empName;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> LeaveDays;</span><br><span class="line"><span class="keyword">private</span> String reason;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LeaveRequest</span><span class="params">(String empName, <span class="keyword">int</span> leaveDays, String reason)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.empName = empName;</span><br><span class="line">LeaveDays = leaveDays;</span><br><span class="line"><span class="keyword">this</span>.reason = reason;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEmpName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> empName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmpName</span><span class="params">(String empName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.empName = empName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLeaveDays</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> LeaveDays;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeaveDays</span><span class="params">(<span class="keyword">int</span> leaveDays)</span> </span>&#123;</span><br><span class="line">LeaveDays = leaveDays;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getReason</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> reason;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReason</span><span class="params">(String reason)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.reason = reason;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主任类"><a href="#主任类" class="headerlink" title="主任类"></a>主任类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> <span class="keyword">extends</span> <span class="title">Leader</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlequest</span><span class="params">(LeaveRequest request)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(request.getLeaveDays()&lt;<span class="number">3</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"员工："</span>+request.getEmpName()+<span class="string">"请假，天数："</span>+request.getLeaveDays()</span><br><span class="line">+<span class="string">",理由："</span>+request.getReason());</span><br><span class="line">System.out.println(<span class="string">"主任："</span>+<span class="keyword">this</span>.name+<span class="string">"批准"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.nextLeader!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.nextLeader.handlequest(request);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="经理类"><a href="#经理类" class="headerlink" title="经理类"></a>经理类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Leader</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlequest</span><span class="params">(LeaveRequest request)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(request.getLeaveDays()&lt;<span class="number">10</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"员工："</span>+request.getEmpName()+<span class="string">"请假，天数："</span>+request.getLeaveDays()</span><br><span class="line">+<span class="string">",理由："</span>+request.getReason());</span><br><span class="line">System.out.println(<span class="string">"经理："</span>+<span class="keyword">this</span>.name+<span class="string">"批准"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.nextLeader!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.nextLeader.handlequest(request);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总经理类"><a href="#总经理类" class="headerlink" title="总经理类"></a>总经理类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneralManager</span> <span class="keyword">extends</span> <span class="title">Leader</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">GeneralManager</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlequest</span><span class="params">(LeaveRequest request)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(request.getLeaveDays()&lt;<span class="number">30</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"员工："</span>+request.getEmpName()+<span class="string">"请假，天数："</span>+request.getLeaveDays()</span><br><span class="line">+<span class="string">",理由："</span>+request.getReason());</span><br><span class="line">System.out.println(<span class="string">"总经理："</span>+<span class="keyword">this</span>.name+<span class="string">"批准"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"不通过"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Leader a=<span class="keyword">new</span> Director(<span class="string">"张三"</span>);</span><br><span class="line">Leader b=<span class="keyword">new</span> Manager(<span class="string">"李四"</span>);</span><br><span class="line">Leader c=<span class="keyword">new</span> GeneralManager(<span class="string">"张三"</span>);</span><br><span class="line"><span class="comment">//组织责任链对象关系</span></span><br><span class="line">a.setNextLeader(b);</span><br><span class="line">b.setNextLeader(c);</span><br><span class="line"><span class="comment">//开始请假</span></span><br><span class="line">LeaveRequest req1=<span class="keyword">new</span> LeaveRequest(<span class="string">"老王"</span>, <span class="number">15</span>, <span class="string">"回乡下老家探亲"</span>);</span><br><span class="line">a.handlequest(req1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><blockquote><p>员工：老王请假，天数：15,理由：回乡下老家探亲<br>总经理：张三批准</p></blockquote><h1 id="迭代器模式-iterator"><a href="#迭代器模式-iterator" class="headerlink" title="迭代器模式(iterator)"></a>迭代器模式(iterator)</h1><p> 提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。</p><h2 id="迭代器接口"><a href="#迭代器接口" class="headerlink" title="迭代器接口"></a>迭代器接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义的迭代器接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyIterator</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">first</span><span class="params">()</span></span>; <span class="comment">//将游标指向第一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">next</span><span class="params">()</span></span>; <span class="comment">//将游标指向下一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>; <span class="comment">//判断游标是否存在下一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isFirst</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">islast</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">Object <span class="title">getCurrentObj</span><span class="params">()</span></span>; <span class="comment">//获取当前游标指向的对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义聚合类"><a href="#自定义聚合类" class="headerlink" title="自定义聚合类"></a>自定义聚合类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义聚合类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteMyAggregate</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> List&lt;Object&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObject</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.list.add(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObject</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.list.remove(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;Object&gt; list)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.list = list;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获得迭代器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MyIterator <span class="title">createIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ConcreteIterator();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内部类定义迭代器，可以使用外部类实现</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteIterator</span> <span class="keyword">implements</span> <span class="title">MyIterator</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> cursor; <span class="comment">//定义游标用于记录遍历时的位置 </span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">first</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cursor=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(cursor&lt;list.size()) &#123;</span><br><span class="line">cursor++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(cursor&lt;list.size()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cursor==<span class="number">0</span>?<span class="keyword">true</span>:<span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">islast</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cursor==(list.size()-<span class="number">1</span>)?<span class="keyword">true</span>:<span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getCurrentObj</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> list.get(cursor);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ConcreteMyAggregate cma=<span class="keyword">new</span> ConcreteMyAggregate();</span><br><span class="line">cma.addObject(<span class="string">"a"</span>);</span><br><span class="line">cma.addObject(<span class="string">"b"</span>);</span><br><span class="line">cma.addObject(<span class="string">"c"</span>);</span><br><span class="line">cma.addObject(<span class="string">"d"</span>);</span><br><span class="line">cma.addObject(<span class="string">"e"</span>);</span><br><span class="line">MyIterator iter=cma.createIterator();</span><br><span class="line"><span class="keyword">while</span>(iter.hasNext()) &#123;</span><br><span class="line">System.out.println(iter.getCurrentObj());</span><br><span class="line">iter.next();&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><blockquote><p>a<br>b<br>c<br>d<br>e</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GOF设计模式之责任链模式-Chain-of-Responsibility-与迭代器模式-iterator&quot;&gt;&lt;a href=&quot;#GOF设计模式之责任链模式-Chain-of-Responsibility-与迭代器模式-iterator&quot; class=&quot;headerlink&quot; title=&quot;GOF设计模式之责任链模式(Chain of Responsibility)与迭代器模式(iterator)&quot;&gt;&lt;/a&gt;GOF设计模式之责任链模式(Chain of Responsibility)与迭代器模式(iterator)&lt;/h1&gt;
    
    </summary>
    
      <category term="GOF设计模式" scheme="http://yoursite.com/categories/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="GOF设计模式" scheme="http://yoursite.com/tags/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>GOF23设计模式（九）</title>
    <link href="http://yoursite.com/2019/08/29/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B9%9D%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/29/GOF23设计模式（九）/</id>
    <published>2019-08-29T06:37:33.000Z</published>
    <updated>2019-08-30T13:28:31.457Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GOF设计模式之享元模式-FlyWeight"><a href="#GOF设计模式之享元模式-FlyWeight" class="headerlink" title="GOF设计模式之享元模式(FlyWeight)"></a>GOF设计模式之享元模式(FlyWeight)</h1><p> 享元模式以共享的方式高效地支持大量细粒度对象的重用。<br> 享元对象能做到共享的关键是区分了内部状态和外部状态<br>  ·内部状态：可以共享，不会随环境变化而改变<br>  ·外部状态：不可以共享，会随环境变化而改变</p><a id="more"></a><h2 id="享元类"><a href="#享元类" class="headerlink" title="享元类"></a>享元类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 享元类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ChessFlyWeight</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String c)</span></span>;</span><br><span class="line"><span class="function">String <span class="title">getColor</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(Coordinate c)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteChess</span> <span class="keyword">implements</span> <span class="title">ChessFlyWeight</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcreteChess</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.color=c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(Coordinate c)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"棋子颜色"</span>+color);</span><br><span class="line">System.out.println(<span class="string">"棋子位置"</span>+c.getX()+<span class="string">"-----"</span>+c.getY());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="外部状态"><a href="#外部状态" class="headerlink" title="外部状态"></a>外部状态</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 外部状态UnSharedConcreteFlayWeight</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coordinate</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> x,y;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Coordinate</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.x = x;</span><br><span class="line"><span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.x = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setY</span><span class="params">(<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="享元工厂"><a href="#享元工厂" class="headerlink" title="享元工厂"></a>享元工厂</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 享元工厂</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChessFlyWeightFactory</span> </span>&#123;</span><br><span class="line"><span class="comment">//享元池</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,ChessFlyWeight&gt; map=<span class="keyword">new</span> HashMap&lt;String,ChessFlyWeight&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  ChessFlyWeight <span class="title">getChess</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(map.get(color)!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> map.get(color);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">ChessFlyWeight cfw=<span class="keyword">new</span> ConcreteChess(color);</span><br><span class="line">map.put(color,cfw);</span><br><span class="line"><span class="keyword">return</span> cfw;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ChessFlyWeight chess1=ChessFlyWeightFactory.getChess(<span class="string">"黑色"</span>);</span><br><span class="line">ChessFlyWeight chess2=ChessFlyWeightFactory.getChess(<span class="string">"黑色"</span>);</span><br><span class="line">System.out.println(chess1);</span><br><span class="line">System.out.println(chess2);</span><br><span class="line">System.out.println(<span class="string">"外部状态处理"</span>);</span><br><span class="line">chess1.display(<span class="keyword">new</span> Coordinate(<span class="number">12</span>,<span class="number">5</span>));</span><br><span class="line">chess2.display(<span class="keyword">new</span> Coordinate(<span class="number">15</span>,<span class="number">7</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><blockquote><p>FlyWeight.ConcreteChess@15db9742<br>FlyWeight.ConcreteChess@15db9742<br>外部状态处理<br>棋子颜色黑色<br>棋子位置12—–5<br>棋子颜色黑色<br>棋子位置15—–7</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GOF设计模式之享元模式-FlyWeight&quot;&gt;&lt;a href=&quot;#GOF设计模式之享元模式-FlyWeight&quot; class=&quot;headerlink&quot; title=&quot;GOF设计模式之享元模式(FlyWeight)&quot;&gt;&lt;/a&gt;GOF设计模式之享元模式(FlyWeight)&lt;/h1&gt;&lt;p&gt; 享元模式以共享的方式高效地支持大量细粒度对象的重用。&lt;br&gt; 享元对象能做到共享的关键是区分了内部状态和外部状态&lt;br&gt;  ·内部状态：可以共享，不会随环境变化而改变&lt;br&gt;  ·外部状态：不可以共享，会随环境变化而改变&lt;/p&gt;
    
    </summary>
    
      <category term="GOF设计模式" scheme="http://yoursite.com/categories/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="GOF设计模式" scheme="http://yoursite.com/tags/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>GOF23设计模式（八）</title>
    <link href="http://yoursite.com/2019/08/28/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%85%AB%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/28/GOF23设计模式（八）/</id>
    <published>2019-08-28T12:03:26.000Z</published>
    <updated>2019-08-30T13:28:14.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GOF设计模式之装饰模式-decorator-与外观模式-Facade"><a href="#GOF设计模式之装饰模式-decorator-与外观模式-Facade" class="headerlink" title="GOF设计模式之装饰模式(decorator)与外观模式(Facade)"></a>GOF设计模式之装饰模式(decorator)与外观模式(Facade)</h1><a id="more"></a><h1 id="装饰模式-decorator"><a href="#装饰模式-decorator" class="headerlink" title="装饰模式(decorator)"></a>装饰模式(decorator)</h1><p>动态的为一个对象增加新功能。<br>装饰模式是一种用于代替继承的技术，无需通过继承增加子类就能扩展对象的新功能。使用对象的关联关系代替继承关系，更加灵活，同时避免类型体系的快速膨胀。</p><h2 id="抽象组件与实现"><a href="#抽象组件与实现" class="headerlink" title="抽象组件与实现"></a>抽象组件与实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象组件</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICar</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ConcreteComponent 具体构件角色(真实对象)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">ICar</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"在陆地上跑"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Decorator 装饰角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperCar</span> <span class="keyword">implements</span> <span class="title">ICar</span></span>&#123;</span><br><span class="line"><span class="keyword">protected</span> ICar car;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SuperCar</span><span class="params">(ICar car)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.car = car;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">car.move();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ConcreteDecorator 具体装饰角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyCar</span> <span class="keyword">extends</span> <span class="title">SuperCar</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FlyCar</span><span class="params">(ICar car)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(car);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"在天上飞"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.move();</span><br><span class="line">fly();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WaterCar</span> <span class="keyword">extends</span> <span class="title">SuperCar</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WaterCar</span><span class="params">(ICar car)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(car);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"在水上漂"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.move();</span><br><span class="line">swim();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AiCar</span> <span class="keyword">extends</span> <span class="title">SuperCar</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AiCar</span><span class="params">(ICar car)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(car);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">automove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"自动驾驶"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.move();</span><br><span class="line">automove();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ublic <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Car car=<span class="keyword">new</span> Car();</span><br><span class="line">car.move();</span><br><span class="line">FlyCar flycar=<span class="keyword">new</span> FlyCar(car);</span><br><span class="line">System.out.println(<span class="string">"---添加功能---"</span>);</span><br><span class="line">flycar.move();</span><br><span class="line">WaterCar watercar=<span class="keyword">new</span> WaterCar(flycar);</span><br><span class="line">System.out.println(<span class="string">"---添加功能---"</span>);</span><br><span class="line">watercar.move();;</span><br><span class="line">System.out.println(<span class="string">"---拥有功能---"</span>);</span><br><span class="line">AiCar aicar=<span class="keyword">new</span> AiCar(<span class="keyword">new</span> FlyCar(<span class="keyword">new</span> WaterCar(car)));</span><br><span class="line">aicar.move();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><blockquote><p>在陆地上跑<br>—添加功能—<br>在陆地上跑<br>在天上飞<br>—添加功能—<br>在陆地上跑<br>在天上飞<br>在水上漂<br>—拥有功能—<br>在陆地上跑<br>在水上漂<br>在天上飞<br>自动驾驶</p></blockquote><h1 id="外观模式-Facade"><a href="#外观模式-Facade" class="headerlink" title="外观模式(Facade)"></a>外观模式(Facade)</h1><p>这个模式经常在编程中使用，不管你听没听过这个名字，此模式就是对用户隐藏程序运行细节，只提供一个接口就可以实现。</p><h2 id="代码-代码来自博客"><a href="#代码-代码来自博客" class="headerlink" title="代码(代码来自博客)"></a>代码(代码来自博客)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//https://blog.csdn.net/u012361379/article/details/88820428  码农日常</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FacadeTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Facade f = <span class="keyword">new</span> Facade();</span><br><span class="line">        f.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//外观角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SubSystem01 obj1 = <span class="keyword">new</span> SubSystem01();</span><br><span class="line">    <span class="keyword">private</span> SubSystem02 obj2 = <span class="keyword">new</span> SubSystem02();</span><br><span class="line">    <span class="keyword">private</span> SubSystem03 obj3 = <span class="keyword">new</span> SubSystem03();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        obj1.method1();</span><br><span class="line">        obj2.method2();</span><br><span class="line">        obj3.method3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子系统角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSystem01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子系统01的method1()被调用！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子系统角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSystem02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子系统02的method2()被调用！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子系统角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSystem03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子系统03的method3()被调用！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><blockquote><p>子系统01的method1()被调用！<br>子系统02的method2()被调用！<br>子系统03的method3()被调用！</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GOF设计模式之装饰模式-decorator-与外观模式-Facade&quot;&gt;&lt;a href=&quot;#GOF设计模式之装饰模式-decorator-与外观模式-Facade&quot; class=&quot;headerlink&quot; title=&quot;GOF设计模式之装饰模式(decorator)与外观模式(Facade)&quot;&gt;&lt;/a&gt;GOF设计模式之装饰模式(decorator)与外观模式(Facade)&lt;/h1&gt;
    
    </summary>
    
      <category term="GOF设计模式" scheme="http://yoursite.com/categories/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="GOF设计模式" scheme="http://yoursite.com/tags/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>GOF23设计模式（七）</title>
    <link href="http://yoursite.com/2019/08/28/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%83%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/28/GOF23设计模式（七）/</id>
    <published>2019-08-28T06:02:02.000Z</published>
    <updated>2019-08-30T13:27:59.138Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GOF设计模式之桥接-bridge-模式与组合模式-composite"><a href="#GOF设计模式之桥接-bridge-模式与组合模式-composite" class="headerlink" title="GOF设计模式之桥接(bridge)模式与组合模式(composite)"></a>GOF设计模式之桥接(bridge)模式与组合模式(composite)</h1> <a id="more"></a><h1 id="桥接-bridge-模式"><a href="#桥接-bridge-模式" class="headerlink" title="桥接(bridge)模式"></a>桥接(bridge)模式</h1><p>桥接模式可以取代多层继承的方案。多层继承违背了单一职责原则，复用性较差，类的个数也非常多。桥接模式可以极大的减少子类的个数，从而降低管理和维护的成本。<br>桥接模式极大提高了系统可扩展性，在两个变化维度中任意扩展一个维度，都不需要修改原有的系统，符合开闭原则,适合多维度开发。</p><h2 id="接口以及实现"><a href="#接口以及实现" class="headerlink" title="接口以及实现"></a>接口以及实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Brand</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lenovo</span> <span class="keyword">implements</span> <span class="title">Brand</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.print(<span class="string">"销售联想品牌"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dell</span> <span class="keyword">implements</span> <span class="title">Brand</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.print(<span class="string">"销售戴尔品牌"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承类"><a href="#继承类" class="headerlink" title="继承类"></a>继承类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 电脑类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line"><span class="keyword">protected</span> Brand brand;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">(Brand brand)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.brand = brand;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">brand.sale();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Desktop</span> <span class="keyword">extends</span> <span class="title">Computer</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Desktop</span><span class="params">(Brand brand)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(brand);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.sale();</span><br><span class="line">System.out.println(<span class="string">"台式机"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Laptop</span> <span class="keyword">extends</span> <span class="title">Computer</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Laptop</span><span class="params">(Brand brand)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(brand);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.sale();</span><br><span class="line">System.out.println(<span class="string">"笔记本"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测设"><a href="#测设" class="headerlink" title="测设"></a>测设</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//联想笔记本</span></span><br><span class="line">Computer c=<span class="keyword">new</span> Laptop(<span class="keyword">new</span> Lenovo());</span><br><span class="line">c.sale();</span><br><span class="line">Computer c2=<span class="keyword">new</span> Desktop(<span class="keyword">new</span> Dell());</span><br><span class="line">c2.sale();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><blockquote><p>销售联想品牌笔记本<br>销售戴尔品牌台式机</p></blockquote><h1 id="组合模式-composite"><a href="#组合模式-composite" class="headerlink" title="组合模式(composite)"></a>组合模式(composite)</h1><p> 抽象构件(Component)角色：定义了叶子和容器构件的共同点。<br> 叶子(Leaf)构件角色：无子节点。<br> 容器(Composite)构件角色：有容器特征，可以包含子节点。</p><h2 id="组合模式模板"><a href="#组合模式模板" class="headerlink" title="组合模式模板"></a>组合模式模板</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模板</span></span><br><span class="line"><span class="comment"> * 抽象组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//叶子组件</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Leaf</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//容器组件</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Composite</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Component c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component c)</span></span>;</span><br><span class="line"><span class="function">Component <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模拟杀毒"><a href="#模拟杀毒" class="headerlink" title="模拟杀毒"></a>模拟杀毒</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AbstractFile</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">killVirus</span><span class="params">()</span></span>; <span class="comment">//杀毒</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageFile</span> <span class="keyword">implements</span> <span class="title">AbstractFile</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ImageFile</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">killVirus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"图像文件:"</span>+name+<span class="string">",进行查杀"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextFile</span> <span class="keyword">implements</span> <span class="title">AbstractFile</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TextFile</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">killVirus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"文本文件:"</span>+name+<span class="string">",进行查杀"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VideoFile</span> <span class="keyword">implements</span> <span class="title">AbstractFile</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">VideoFile</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">killVirus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"视频文件:"</span>+name+<span class="string">",进行查杀"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Folder</span> <span class="keyword">implements</span> <span class="title">AbstractFile</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="comment">//定义容器，用来存放本容器构建下的子节点</span></span><br><span class="line"><span class="keyword">private</span> List&lt;AbstractFile&gt; list=<span class="keyword">new</span> ArrayList&lt;AbstractFile&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Folder</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(AbstractFile file)</span> </span>&#123;</span><br><span class="line">list.add(file);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(AbstractFile file)</span> </span>&#123;</span><br><span class="line">list.remove(file);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractFile <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> list.get(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">killVirus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"文件夹:"</span>+name+<span class="string">",进行查杀"</span>);</span><br><span class="line"><span class="keyword">for</span>(AbstractFile file : list) &#123;</span><br><span class="line">file.killVirus();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">AbstractFile f1,f2,f3,f4;</span><br><span class="line">Folder f,ff;</span><br><span class="line">f=<span class="keyword">new</span> Folder(<span class="string">"我的收藏"</span>);</span><br><span class="line">f1=<span class="keyword">new</span> ImageFile(<span class="string">"图片.jpg"</span>);</span><br><span class="line">f2=<span class="keyword">new</span> TextFile(<span class="string">"C.txt"</span>);</span><br><span class="line">f.add(f1); f.add(f2);</span><br><span class="line">ff=<span class="keyword">new</span> Folder(<span class="string">"电影"</span>);</span><br><span class="line">f3=<span class="keyword">new</span> VideoFile(<span class="string">"的士速递.mp4"</span>);</span><br><span class="line">f4=<span class="keyword">new</span> VideoFile(<span class="string">"鬼怪疑云.mp4"</span>);</span><br><span class="line">ff.add(f3); ff.add(f4);</span><br><span class="line">f.add(ff);</span><br><span class="line">f.killVirus();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><blockquote><p>文件夹:我的收藏,进行查杀<br>图像文件:图片.jpg,进行查杀<br>文本文件:C.txt,进行查杀<br>文件夹:电影,进行查杀<br>视频文件:的士速递.mp4,进行查杀<br>视频文件:鬼怪疑云.mp4,进行查杀</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GOF设计模式之桥接-bridge-模式与组合模式-composite&quot;&gt;&lt;a href=&quot;#GOF设计模式之桥接-bridge-模式与组合模式-composite&quot; class=&quot;headerlink&quot; title=&quot;GOF设计模式之桥接(bridge)模式与组合模式(composite)&quot;&gt;&lt;/a&gt;GOF设计模式之桥接(bridge)模式与组合模式(composite)&lt;/h1&gt;
    
    </summary>
    
      <category term="GOF设计模式" scheme="http://yoursite.com/categories/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="GOF设计模式" scheme="http://yoursite.com/tags/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
