<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hello</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-25T08:01:43.243Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JiskZcz</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GOF23设计模式（二）</title>
    <link href="http://yoursite.com/2019/08/25/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/25/GOF23设计模式（二）/</id>
    <published>2019-08-25T07:08:24.000Z</published>
    <updated>2019-08-25T08:01:43.243Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GOF设计模式之单例模式（二）"><a href="#GOF设计模式之单例模式（二）" class="headerlink" title="GOF设计模式之单例模式（二）"></a>GOF设计模式之单例模式（二）</h1><p>静态内部类式和枚举式<a id="more"></a></p><h1 id="单例模式之静态内部类"><a href="#单例模式之静态内部类" class="headerlink" title="单例模式之静态内部类"></a>单例模式之静态内部类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例模式：静态内部类</span></span><br><span class="line"><span class="comment"> * 线程安全，效率高，并发高效和延迟加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton3</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonInstance</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton3 instance=<span class="keyword">new</span> Singleton3();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Singleton3 <span class="title">getinstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> SingletonInstance.instance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> Singleton3().getinstance());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="单例模式之枚举式"><a href="#单例模式之枚举式" class="headerlink" title="单例模式之枚举式"></a>单例模式之枚举式</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例模式：枚举实现</span></span><br><span class="line"><span class="comment"> * 效率高，没有延迟加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//1.避免了反射和反序列化的漏洞。2.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton4 &#123;</span><br><span class="line"><span class="comment">//枚举元素本身就是单例对象</span></span><br><span class="line">INSTANCE;</span><br><span class="line"><span class="comment">//添加自己需要的代码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SingletonOperation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="单例模式总结"><a href="#单例模式总结" class="headerlink" title="单例模式总结"></a>单例模式总结</h1><h2 id="主要："><a href="#主要：" class="headerlink" title="主要："></a>主要：</h2><p>– 饿汉式（线程安全，调用效率高，不能延时加载）<br>– 懒汉式（线程安全，调用效率不高，能延时加载）</p><h2 id="其它："><a href="#其它：" class="headerlink" title="其它："></a>其它：</h2><p>– 双重检查锁式（由于JVM底层内部模型原因，偶尔会出问题，不推荐使用）<br>– 静态内部类式（线程安全，调用效率高，可以延时加载）<br>– 枚举式（线程安全，调用效率高，不能延时加载）</p><h2 id="如何选用"><a href="#如何选用" class="headerlink" title="如何选用"></a>如何选用</h2><h3 id="单例对象占用资源少，不需要延时加载："><a href="#单例对象占用资源少，不需要延时加载：" class="headerlink" title="单例对象占用资源少，不需要延时加载："></a>单例对象占用资源少，不需要延时加载：</h3><p>– 枚举式好于饿汉式</p><h3 id="单例对象占用资源大，需要延时加载："><a href="#单例对象占用资源大，需要延时加载：" class="headerlink" title="单例对象占用资源大，需要延时加载："></a>单例对象占用资源大，需要延时加载：</h3><p>– 静态内部类式好于懒汉式</p><h2 id="以上除了（枚举式）不能被反射和反序列化破解以外，其它都能破解"><a href="#以上除了（枚举式）不能被反射和反序列化破解以外，其它都能破解" class="headerlink" title="以上除了（枚举式）不能被反射和反序列化破解以外，其它都能破解"></a>以上除了（枚举式）不能被反射和反序列化破解以外，其它都能破解</h2><h3 id="如何防止反射的破解（简单了解）"><a href="#如何防止反射的破解（简单了解）" class="headerlink" title="如何防止反射的破解（简单了解）"></a>如何防止反射的破解（简单了解）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在私有构造器上加上检查，不为空的时候手动抛出异常</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(instance!=<span class="keyword">null</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何防止反序列化破解（简单了解）"><a href="#如何防止反序列化破解（简单了解）" class="headerlink" title="如何防止反序列化破解（简单了解）"></a>如何防止反序列化破解（简单了解）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在反序列化时调用此方法直接返回instance，不需要在单独创建对象。</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span><span class="keyword">throws</span> ObjectStreamException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GOF设计模式之单例模式（二）&quot;&gt;&lt;a href=&quot;#GOF设计模式之单例模式（二）&quot; class=&quot;headerlink&quot; title=&quot;GOF设计模式之单例模式（二）&quot;&gt;&lt;/a&gt;GOF设计模式之单例模式（二）&lt;/h1&gt;&lt;p&gt;静态内部类式和枚举式
    
    </summary>
    
      <category term="GOF设计模式" scheme="http://yoursite.com/categories/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="GOF设计模式" scheme="http://yoursite.com/tags/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>GOF23设计模式（一）</title>
    <link href="http://yoursite.com/2019/08/24/GOF23%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/24/GOF23设计模式（一）/</id>
    <published>2019-08-24T12:21:54.000Z</published>
    <updated>2019-08-24T12:53:28.503Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GOF设计模式之单例模式（一）"><a href="#GOF设计模式之单例模式（一）" class="headerlink" title="GOF设计模式之单例模式（一）"></a>GOF设计模式之单例模式（一）</h1><p>单例模式：保证一个类只有一个实例，并且提供一个访问该实例的全局访问点。<a id="more"></a></p><h1 id="单例模式之饿汉式"><a href="#单例模式之饿汉式" class="headerlink" title="单例模式之饿汉式"></a>单例模式之饿汉式</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例模式：饿汉式</span></span><br><span class="line"><span class="comment"> * 直接在初始化类的时候把对象new出来，如果不用对象就会浪费空间。</span></span><br><span class="line"><span class="comment"> * 线程安全，调用效率高，不需要同步锁。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton1 instance=<span class="keyword">new</span> Singleton1();</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(Singleton1.getInstance());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="单例模式之懒汉式（双重检查锁结合版）"><a href="#单例模式之懒汉式（双重检查锁结合版）" class="headerlink" title="单例模式之懒汉式（双重检查锁结合版）"></a>单例模式之懒汉式（双重检查锁结合版）</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例模式：懒汉式</span></span><br><span class="line"><span class="comment"> * 多线程调用模式下需要在对象上加上volatile，避免指令重排导致对象多次new。</span></span><br><span class="line"><span class="comment"> * 线程安全，调用效率不高，需要同步锁,不浪费资源，使用时在new对象。</span></span><br><span class="line"><span class="comment"> * 这个写法改进了懒汉式与双重检查锁结合。</span></span><br><span class="line"><span class="comment"> * volatile：每当子线程某一语句要用到volatile变量时，</span></span><br><span class="line"><span class="comment"> * 都会从主线程重新拷贝一份，这样就保证子线程的会跟主线程的一致。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span> </span>&#123;</span><br><span class="line"><span class="comment">//多线程模式下加上volatile</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton2 instance;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(instance==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//double checking 提高效率。</span></span><br><span class="line"><span class="keyword">synchronized</span>(Singleton2.class)&#123;</span><br><span class="line"><span class="keyword">if</span>(instance==<span class="keyword">null</span>) &#123;</span><br><span class="line">instance=<span class="keyword">new</span> Singleton2();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">System.out.println(Singleton2.getInstance());</span><br><span class="line">&#125;).start() ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="单例模式之双重检查锁式"><a href="#单例模式之双重检查锁式" class="headerlink" title="单例模式之双重检查锁式"></a>单例模式之双重检查锁式</h1><p>不推荐使用，在使用时由于编译器优化原因和JVM底层内部模型原因，偶尔会出问题，指令重排，在JDK1.5后加入volatile可以解决此问题，详见本博客的懒汉式写法。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GOF设计模式之单例模式（一）&quot;&gt;&lt;a href=&quot;#GOF设计模式之单例模式（一）&quot; class=&quot;headerlink&quot; title=&quot;GOF设计模式之单例模式（一）&quot;&gt;&lt;/a&gt;GOF设计模式之单例模式（一）&lt;/h1&gt;&lt;p&gt;单例模式：保证一个类只有一个实例，并且提供一个访问该实例的全局访问点。
    
    </summary>
    
      <category term="GOF设计模式" scheme="http://yoursite.com/categories/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="GOF设计模式" scheme="http://yoursite.com/tags/GOF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>基于TCP的多人聊天室（二）</title>
    <link href="http://yoursite.com/2019/08/20/%E5%9F%BA%E4%BA%8ETCP%E7%9A%84%E5%A4%9A%E4%BA%BA%E8%81%8A%E5%A4%A9%E5%AE%A4%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/20/基于TCP的多人聊天室（二）/</id>
    <published>2019-08-20T07:15:47.000Z</published>
    <updated>2019-08-20T07:25:15.203Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于TCP的多人聊天室（二）"><a href="#基于TCP的多人聊天室（二）" class="headerlink" title="基于TCP的多人聊天室（二）"></a>基于TCP的多人聊天室（二）</h1><p>进行了封装，没有写单独的一个类，可自行实现，实现了多人聊天，没有实现私聊和一些细节问题，等有空再实现。<a id="more"></a></p><h1 id="关闭流："><a href="#关闭流：" class="headerlink" title="关闭流："></a>关闭流：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Closed</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Closeable... targets)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(Closeable target:targets) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">null</span>!=target)</span><br><span class="line">target.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="聊天室服务器："><a href="#聊天室服务器：" class="headerlink" title="聊天室服务器："></a>聊天室服务器：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 聊天室服务器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chat_Server</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> CopyOnWriteArrayList&lt;Channel&gt; list=<span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"-------Server-------"</span>);</span><br><span class="line"><span class="comment">// 1.指定端口，使用ServerSocket创建服务器</span></span><br><span class="line">ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line"><span class="comment">// 2.阻塞式等待链接 accept</span></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">Socket Server = server.accept();</span><br><span class="line">System.out.println(<span class="string">"客户端连接已建立"</span>);</span><br><span class="line">Channel C=<span class="keyword">new</span> Channel(Server);</span><br><span class="line">list.add(C);</span><br><span class="line"><span class="keyword">new</span> Thread(C).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> CopyOnWriteArrayList&lt;Channel&gt; <span class="title">List</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个客户端代表一个用户（Channel）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Channel</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> DataInputStream dis;</span><br><span class="line"><span class="keyword">private</span> DataOutputStream dos;</span><br><span class="line"><span class="keyword">private</span> Socket Server;</span><br><span class="line"><span class="keyword">private</span>  CopyOnWriteArrayList&lt;Channel&gt; list=<span class="keyword">new</span> Chat_Server().List();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Channel</span><span class="params">(Socket server)</span> </span>&#123;</span><br><span class="line">Server = server;</span><br><span class="line"><span class="comment">// 3.操作：输入输出流</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">dis = <span class="keyword">new</span> DataInputStream(Server.getInputStream());</span><br><span class="line">dos = <span class="keyword">new</span> DataOutputStream(Server.getOutputStream());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="comment">// 4.释放资源</span></span><br><span class="line"><span class="keyword">new</span> Closed().close(dos,dis,Server);</span><br><span class="line"><span class="keyword">this</span>.flag=<span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//发送</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">dos.writeUTF(msg);</span><br><span class="line">dos.flush();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// 4.释放资源</span></span><br><span class="line"><span class="keyword">new</span> Closed().close(dos,dis,Server);</span><br><span class="line"><span class="keyword">this</span>.flag=<span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取消息</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> String msg = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">msg = dis.readUTF();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="keyword">new</span> Closed().close(dos,dis,Server);</span><br><span class="line"><span class="keyword">this</span>.flag=<span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//发给其他人</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendOther</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(Channel c:list) &#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">c.send(msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(flag) &#123;</span><br><span class="line">String msg=getMsg();</span><br><span class="line"><span class="keyword">if</span>(!msg.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">sendOther(msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="聊天室客户端："><a href="#聊天室客户端：" class="headerlink" title="聊天室客户端："></a>聊天室客户端：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 聊天室客户端</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chat_Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"-------Client-------"</span>);</span><br><span class="line"><span class="comment">// 1.建立连接：使用Socket创建客户端：服务器地址和端口</span></span><br><span class="line">Socket Client = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>, <span class="number">6666</span>);</span><br><span class="line">BufferedReader bf=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">System.out.println(<span class="string">"请输入用户名："</span>);</span><br><span class="line">String name=bf.readLine();</span><br><span class="line"><span class="comment">//发送接收</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Send(Client,name)).start();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Receive(Client)).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送端</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Send</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> DataOutputStream dos;</span><br><span class="line"><span class="keyword">private</span> BufferedReader bf; </span><br><span class="line"><span class="keyword">private</span> Socket Client;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Send</span><span class="params">(Socket client,String name)</span> </span>&#123;</span><br><span class="line">Client = client;</span><br><span class="line"><span class="keyword">this</span>.name=name;</span><br><span class="line">bf= <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">dos= <span class="keyword">new</span> DataOutputStream(Client.getOutputStream());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line"><span class="keyword">new</span> Closed().close(dos,bf,Client);</span><br><span class="line"><span class="keyword">this</span>.flag=<span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//发送</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">dos.writeUTF(msg);</span><br><span class="line">dos.flush();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line"><span class="keyword">new</span> Closed().close(dos,bf,Client);</span><br><span class="line"><span class="keyword">this</span>.flag=<span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//控制台信息</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> String msg = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">msg = bf.readLine();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="keyword">new</span> Closed().close(dos,Client,bf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (flag) &#123;</span><br><span class="line">String msg=getMsg();</span><br><span class="line"><span class="keyword">if</span>(!msg.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">send(<span class="keyword">this</span>.name+<span class="string">"说："</span>+msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接收端</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Receive</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> DataInputStream dis; </span><br><span class="line"><span class="keyword">private</span> Socket Client;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Receive</span><span class="params">(Socket client)</span> </span>&#123;</span><br><span class="line">Client = client;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">dis= <span class="keyword">new</span> DataInputStream(Client.getInputStream());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line"><span class="keyword">new</span> Closed().close(dis,Client);</span><br><span class="line"><span class="keyword">this</span>.flag=<span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接收</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">receive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String msg=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">msg = dis.readUTF();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line"><span class="keyword">new</span> Closed().close(dis,Client);</span><br><span class="line"><span class="keyword">this</span>.flag=<span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(flag) &#123;</span><br><span class="line">String msg=receive();</span><br><span class="line"><span class="keyword">if</span>(!msg.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">System.out.println(msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简易实现基于TCP的网络聊天室。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基于TCP的多人聊天室（二）&quot;&gt;&lt;a href=&quot;#基于TCP的多人聊天室（二）&quot; class=&quot;headerlink&quot; title=&quot;基于TCP的多人聊天室（二）&quot;&gt;&lt;/a&gt;基于TCP的多人聊天室（二）&lt;/h1&gt;&lt;p&gt;进行了封装，没有写单独的一个类，可自行实现，实现了多人聊天，没有实现私聊和一些细节问题，等有空再实现。
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="网络编程" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>基于TCP的多人聊天室（一）</title>
    <link href="http://yoursite.com/2019/08/16/%E5%9F%BA%E4%BA%8ETCP%E7%9A%84%E5%A4%9A%E4%BA%BA%E8%81%8A%E5%A4%A9%E5%AE%A4%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/16/基于TCP的多人聊天室（一）/</id>
    <published>2019-08-16T12:23:39.000Z</published>
    <updated>2019-08-16T12:31:38.267Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于TCP的多人聊天室（一）"><a href="#基于TCP的多人聊天室（一）" class="headerlink" title="基于TCP的多人聊天室（一）"></a>基于TCP的多人聊天室（一）</h1><p>利用TCP来实现网络多人聊天室，此版本只能实现发送接收，不能随意发言，还没实现客户端互相传输，只能自己发送自己接收。<a id="more"></a></p><h1 id="聊天室服务器："><a href="#聊天室服务器：" class="headerlink" title="聊天室服务器："></a>聊天室服务器：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 聊天室服务器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chat_Server</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"-------Server-------"</span>);</span><br><span class="line"><span class="comment">// 1.指定端口，使用ServerSocket创建服务器</span></span><br><span class="line">ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line"><span class="comment">// 2.阻塞式等待链接 accept</span></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">Socket Server = server.accept();</span><br><span class="line">System.out.println(<span class="string">"客户端连接已建立"</span>);</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">DataInputStream dis = <span class="keyword">null</span>;</span><br><span class="line">DataOutputStream dos = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">dis = <span class="keyword">new</span> DataInputStream(Server.getInputStream());</span><br><span class="line">dos = <span class="keyword">new</span> DataOutputStream(Server.getOutputStream());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">// 3.操作：输入输出流</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (flag) &#123;</span><br><span class="line">dos.writeUTF(dis.readUTF());</span><br><span class="line">dos.flush();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">flag=<span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4.释放资源</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == dis)</span><br><span class="line">dis.close();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == dis) &#123;</span><br><span class="line">dos.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == dis) &#123;</span><br><span class="line">Server.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="聊天室客户端："><a href="#聊天室客户端：" class="headerlink" title="聊天室客户端："></a>聊天室客户端：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 聊天室客户端</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chat_Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"-------Client-------"</span>);</span><br><span class="line"><span class="comment">// 1.建立连接：使用Socket创建客户端：服务器地址和端口</span></span><br><span class="line">Socket Client = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>, <span class="number">6666</span>);</span><br><span class="line"><span class="comment">// 2.操作：输入输出流</span></span><br><span class="line">DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(Client.getOutputStream());</span><br><span class="line">BufferedReader bf = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">DataInputStream dis = <span class="keyword">new</span> DataInputStream(Client.getInputStream());</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">while</span> (flag) &#123;</span><br><span class="line">String st = bf.readLine();</span><br><span class="line">dos.writeUTF(st);</span><br><span class="line">dos.flush();</span><br><span class="line">String sss = dis.readUTF();</span><br><span class="line">System.out.println(sss);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">dis.close();</span><br><span class="line">dos.close();</span><br><span class="line">Client.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基于TCP的多人聊天室（一）&quot;&gt;&lt;a href=&quot;#基于TCP的多人聊天室（一）&quot; class=&quot;headerlink&quot; title=&quot;基于TCP的多人聊天室（一）&quot;&gt;&lt;/a&gt;基于TCP的多人聊天室（一）&lt;/h1&gt;&lt;p&gt;利用TCP来实现网络多人聊天室，此版本只能实现发送接收，不能随意发言，还没实现客户端互相传输，只能自己发送自己接收。
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="网络编程" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>多人登录验证</title>
    <link href="http://yoursite.com/2019/08/16/%E5%A4%9A%E4%BA%BA%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81/"/>
    <id>http://yoursite.com/2019/08/16/多人登录验证/</id>
    <published>2019-08-16T12:17:49.000Z</published>
    <updated>2019-08-16T12:22:55.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多人登录验证"><a href="#多人登录验证" class="headerlink" title="多人登录验证"></a>多人登录验证</h1><p>请求响应模式下多人验证模式<a id="more"></a></p><h1 id="服务器："><a href="#服务器：" class="headerlink" title="服务器："></a>服务器：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务器(双向)多人登录： </span></span><br><span class="line"><span class="comment"> * 1.指定端口，使用ServerSocket创建服务器 </span></span><br><span class="line"><span class="comment"> * 2.阻塞式等待链接 accept 返回一个Socket </span></span><br><span class="line"><span class="comment"> * 3.操作：输入输出流</span></span><br><span class="line"><span class="comment"> * 4.释放资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCP_MultiWayServer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"-------Server-------"</span>);</span><br><span class="line"><span class="comment">// 1.指定端口，使用ServerSocket创建服务器</span></span><br><span class="line">ServerSocket SS = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line"><span class="comment">// 2.阻塞式等待链接 accept</span></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">Socket Client = SS.accept();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Server(Client)).start();</span><br><span class="line">System.out.println(<span class="string">"客户端连接已建立"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Socket Client;</span><br><span class="line"><span class="comment">// 3.操作：输入输出流</span></span><br><span class="line"><span class="keyword">private</span> DataInputStream dis;</span><br><span class="line"><span class="keyword">private</span> DataOutputStream out;</span><br><span class="line"><span class="keyword">private</span> String name = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">private</span> String pwd = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">private</span> String st;</span><br><span class="line"></span><br><span class="line">Server(Socket client) &#123;</span><br><span class="line">Client = client;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">dis = <span class="keyword">new</span> DataInputStream(Client.getInputStream());</span><br><span class="line">out = <span class="keyword">new</span> DataOutputStream(Client.getOutputStream());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Client.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">st = dis.readUTF();</span><br><span class="line">String[] data = st.split(<span class="string">"&amp;"</span>);</span><br><span class="line"><span class="keyword">for</span> (String b : data) &#123;</span><br><span class="line">String[] c = b.split(<span class="string">"="</span>);</span><br><span class="line"><span class="keyword">if</span> (c[<span class="number">0</span>].equals(<span class="string">"name"</span>)) &#123;</span><br><span class="line">name = c[<span class="number">1</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">pwd = c[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">SendandReceive();</span><br><span class="line"><span class="comment">// 4.释放资源</span></span><br><span class="line">dis.close();</span><br><span class="line">out.close();</span><br><span class="line">Client.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendandReceive</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (name.equals(<span class="string">"123"</span>) &amp;&amp; pwd.equals(<span class="string">"456"</span>)) &#123;</span><br><span class="line">out.writeUTF(<span class="string">"登陆成功"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">out.writeUTF(<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="客户端："><a href="#客户端：" class="headerlink" title="客户端："></a>客户端：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端(双向)多人登录：</span></span><br><span class="line"><span class="comment"> * 1.建立连接：使用Socket创建客户端：服务器地址和端口</span></span><br><span class="line"><span class="comment"> * 2.操作：输入输出流</span></span><br><span class="line"><span class="comment"> * 3.释放资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCP_MultiWayClient</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"-------Client-------"</span>);</span><br><span class="line"><span class="comment">//1.建立连接：使用Socket创建客户端：服务器地址和端口</span></span><br><span class="line">Socket S=<span class="keyword">new</span> Socket(<span class="string">"localhost"</span>,<span class="number">6666</span>);</span><br><span class="line"><span class="keyword">new</span> Client(S).in();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Socket client;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Client</span><span class="params">(Socket client)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.client = client;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> BufferedReader bf=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String pwd;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"请输入姓名："</span>);</span><br><span class="line"> name=bf.readLine();</span><br><span class="line">System.out.println(<span class="string">"请输入密码："</span>);</span><br><span class="line"> pwd=bf.readLine();</span><br><span class="line"> SendandReceive();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendandReceive</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 2.操作：输入输出流</span></span><br><span class="line">DataOutputStream out;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">out = <span class="keyword">new</span> DataOutputStream(client.getOutputStream());</span><br><span class="line">out.writeUTF(<span class="string">"name="</span>+name+<span class="string">"&amp;"</span>+<span class="string">"pwd="</span>+pwd);</span><br><span class="line">out.flush();</span><br><span class="line">DataInputStream dis=<span class="keyword">new</span> DataInputStream(client.getInputStream());</span><br><span class="line">String sss=dis.readUTF();</span><br><span class="line">System.out.println(sss);</span><br><span class="line"><span class="comment">// 3.释放资源</span></span><br><span class="line">dis.close();</span><br><span class="line">out.close();</span><br><span class="line">client.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;多人登录验证&quot;&gt;&lt;a href=&quot;#多人登录验证&quot; class=&quot;headerlink&quot; title=&quot;多人登录验证&quot;&gt;&lt;/a&gt;多人登录验证&lt;/h1&gt;&lt;p&gt;请求响应模式下多人验证模式
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="网络编程" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>TCP文件上传</title>
    <link href="http://yoursite.com/2019/08/15/TCP%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>http://yoursite.com/2019/08/15/TCP文件上传/</id>
    <published>2019-08-15T13:05:41.000Z</published>
    <updated>2019-08-15T13:09:09.517Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TCP文件上传"><a href="#TCP文件上传" class="headerlink" title="TCP文件上传"></a>TCP文件上传</h1><p>实现文件上传与服务器文件下载与拷贝。<a id="more"></a></p><h1 id="文件服务器："><a href="#文件服务器：" class="headerlink" title="文件服务器："></a>文件服务器：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件服务器（下载|拷贝）：</span></span><br><span class="line"><span class="comment"> * 1.指定端口，使用ServerSocket创建服务器</span></span><br><span class="line"><span class="comment"> * 2.阻塞式等待链接 accept 返回一个Socket</span></span><br><span class="line"><span class="comment"> * 3.操作：输入输出流</span></span><br><span class="line"><span class="comment"> * 4.释放资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">File_Server</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"-------Server-------"</span>);</span><br><span class="line"><span class="comment">//1.指定端口，使用ServerSocket创建服务器</span></span><br><span class="line">ServerSocket SS=<span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line"><span class="comment">// 2.阻塞式等待链接 accept</span></span><br><span class="line">Socket Client=SS.accept();</span><br><span class="line">System.out.println(<span class="string">"客户端连接已建立"</span>);</span><br><span class="line"><span class="comment">// 3.操作：输入输出流</span></span><br><span class="line">InputStream buf=<span class="keyword">new</span> BufferedInputStream(Client.getInputStream());</span><br><span class="line">OutputStream bof=<span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"c.txt"</span>));</span><br><span class="line"><span class="keyword">byte</span> b[]=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">while</span>(buf.read(b)!=-<span class="number">1</span>) &#123;</span><br><span class="line">bof.write(b);</span><br><span class="line">&#125;</span><br><span class="line">bof.flush();</span><br><span class="line"><span class="comment">// 4.释放资源</span></span><br><span class="line">bof.close();</span><br><span class="line">buf.close();</span><br><span class="line">Client.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="文化客户端："><a href="#文化客户端：" class="headerlink" title="文化客户端："></a>文化客户端：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件客户端（上传）：</span></span><br><span class="line"><span class="comment"> * 1.建立连接：使用Socket创建客户端：服务器地址和端口</span></span><br><span class="line"><span class="comment"> * 2.操作：输入输出流</span></span><br><span class="line"><span class="comment"> * 3.释放资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">File_Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"-------Client-------"</span>);</span><br><span class="line"><span class="comment">//1.建立连接：使用Socket创建客户端：服务器地址和端口</span></span><br><span class="line">Socket S=<span class="keyword">new</span> Socket(<span class="string">"localhost"</span>,<span class="number">6666</span>);</span><br><span class="line"><span class="comment">// 3.操作：输入输出流</span></span><br><span class="line">InputStream buf=<span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"D:/javawork/java 17级软工学生体测数据统计系统/用户信息.txt"</span>));</span><br><span class="line">OutputStream bof=<span class="keyword">new</span> BufferedOutputStream(S.getOutputStream());</span><br><span class="line"><span class="keyword">byte</span> b[]=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">while</span>(buf.read(b)!=-<span class="number">1</span>) &#123;</span><br><span class="line">bof.write(b);</span><br><span class="line">&#125;</span><br><span class="line">bof.flush();</span><br><span class="line"><span class="comment">// 4.释放资源</span></span><br><span class="line">S.close();</span><br><span class="line">buf.close();</span><br><span class="line">bof.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;TCP文件上传&quot;&gt;&lt;a href=&quot;#TCP文件上传&quot; class=&quot;headerlink&quot; title=&quot;TCP文件上传&quot;&gt;&lt;/a&gt;TCP文件上传&lt;/h1&gt;&lt;p&gt;实现文件上传与服务器文件下载与拷贝。
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="网络编程" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>TCP双向通讯</title>
    <link href="http://yoursite.com/2019/08/15/TCP%E5%8F%8C%E5%90%91%E9%80%9A%E8%AE%AF/"/>
    <id>http://yoursite.com/2019/08/15/TCP双向通讯/</id>
    <published>2019-08-15T12:59:42.000Z</published>
    <updated>2019-08-15T13:09:20.724Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TCP双向通讯"><a href="#TCP双向通讯" class="headerlink" title="TCP双向通讯"></a>TCP双向通讯</h1><p>实现双向通讯<a id="more"></a></p><h1 id="双向通讯服务器："><a href="#双向通讯服务器：" class="headerlink" title="双向通讯服务器："></a>双向通讯服务器：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务器(双向)：</span></span><br><span class="line"><span class="comment"> * 1.指定端口，使用ServerSocket创建服务器</span></span><br><span class="line"><span class="comment"> * 2.阻塞式等待链接 accept 返回一个Socket</span></span><br><span class="line"><span class="comment"> * 3.操作：输入输出流</span></span><br><span class="line"><span class="comment"> * 4.释放资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCP_TwoWayServer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"-------Server-------"</span>);</span><br><span class="line"><span class="comment">//1.指定端口，使用ServerSocket创建服务器</span></span><br><span class="line">ServerSocket SS=<span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line"><span class="comment">// 2.阻塞式等待链接 accept</span></span><br><span class="line">Socket Client=SS.accept();</span><br><span class="line">System.out.println(<span class="string">"客户端连接已建立"</span>);</span><br><span class="line"><span class="comment">// 3.操作：输入输出流</span></span><br><span class="line">DataInputStream dis=<span class="keyword">new</span> DataInputStream(Client.getInputStream());</span><br><span class="line">String st=dis.readUTF();</span><br><span class="line">String[] data =st.split(<span class="string">"&amp;"</span>);</span><br><span class="line">String name=<span class="string">""</span>;</span><br><span class="line">String pwd=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span>(String b:data ) &#123;</span><br><span class="line">String[] c=b.split(<span class="string">"="</span>);</span><br><span class="line"><span class="keyword">if</span>(c[<span class="number">0</span>].equals(<span class="string">"name"</span>)) &#123;</span><br><span class="line"><span class="comment">//System.out.println("用户名是："+c[1]);</span></span><br><span class="line">name=c[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//System.out.println("密码是："+c[1]);</span></span><br><span class="line">pwd=c[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">DataOutputStream out=<span class="keyword">new</span> DataOutputStream(Client.getOutputStream());</span><br><span class="line"><span class="keyword">if</span>(name.equals(<span class="string">"123"</span>)&amp;&amp;pwd.equals(<span class="string">"456"</span>)) &#123;</span><br><span class="line">out.writeUTF(<span class="string">"登陆成功"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">out.writeUTF(<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4.释放资源</span></span><br><span class="line">dis.close();</span><br><span class="line">Client.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="双向通讯客户端："><a href="#双向通讯客户端：" class="headerlink" title="双向通讯客户端："></a>双向通讯客户端：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端(双向)：</span></span><br><span class="line"><span class="comment"> * 1.建立连接：使用Socket创建客户端：服务器地址和端口</span></span><br><span class="line"><span class="comment"> * 2.操作：输入输出流</span></span><br><span class="line"><span class="comment"> * 3.释放资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCP_TwoWayClient</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"-------Client-------"</span>);</span><br><span class="line">BufferedReader bf=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">System.out.println(<span class="string">"请输入姓名："</span>);</span><br><span class="line">String name=bf.readLine();</span><br><span class="line">System.out.println(<span class="string">"请输入密码："</span>);</span><br><span class="line">String pwd=bf.readLine();</span><br><span class="line"><span class="comment">//1.建立连接：使用Socket创建客户端：服务器地址和端口</span></span><br><span class="line">Socket S=<span class="keyword">new</span> Socket(<span class="string">"localhost"</span>,<span class="number">6666</span>);</span><br><span class="line"><span class="comment">// 3.操作：输入输出流</span></span><br><span class="line">DataOutputStream out=<span class="keyword">new</span> DataOutputStream(S.getOutputStream());</span><br><span class="line">out.writeUTF(<span class="string">"name="</span>+name+<span class="string">"&amp;"</span>+<span class="string">"pwd="</span>+pwd);</span><br><span class="line">out.flush();</span><br><span class="line">DataInputStream dis=<span class="keyword">new</span> DataInputStream(S.getInputStream());</span><br><span class="line">String sss=dis.readUTF();</span><br><span class="line">System.out.println(sss);</span><br><span class="line"><span class="comment">// 4.释放资源</span></span><br><span class="line">out.close();</span><br><span class="line">S.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h2><blockquote><p>——-Server——-<br>客户端连接已建立</p><p>——-Client——-<br>请输入姓名：<br>123<br>请输入密码：<br>123<br>用户名或密码错误</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;TCP双向通讯&quot;&gt;&lt;a href=&quot;#TCP双向通讯&quot; class=&quot;headerlink&quot; title=&quot;TCP双向通讯&quot;&gt;&lt;/a&gt;TCP双向通讯&lt;/h1&gt;&lt;p&gt;实现双向通讯
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="网络编程" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>TCP单向通讯</title>
    <link href="http://yoursite.com/2019/08/15/TCP%E5%8D%95%E5%90%91%E9%80%9A%E8%AE%AF/"/>
    <id>http://yoursite.com/2019/08/15/TCP单向通讯/</id>
    <published>2019-08-15T12:48:48.000Z</published>
    <updated>2019-08-16T05:23:40.589Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TCP单向通讯"><a href="#TCP单向通讯" class="headerlink" title="TCP单向通讯"></a>TCP单向通讯</h1><p>在网络通讯中，第一次主动发起通讯的程序被称作客户端(Client)程序，简称客户端，而在第一次通讯中等待连接的程序被称作服务器端(Server)程序，简称服务器。一旦通讯建立，则客户端和服务器端完全一样，没有本质的区别。<a id="more"></a></p><h1 id="请求-响应模式："><a href="#请求-响应模式：" class="headerlink" title="请求-响应模式："></a>请求-响应模式：</h1><ol><li>Socket类：发送TCP消息。</li><li>ServerSocket类：创建服务器。<br>套接字是一种进程间的数据交换机制。这些进程既可以在同一机器上，也可以在通过网络连接的不同机器上。换句话说，套接字起到通信端点的作用。单个套接字是一个端点，而一对套接字则构成一个双向通信信道，使非关联进程可以在本地或通过网络进行数据交换。一旦建立套接字连接，数据即可在相同或不同的系统中双向或单向发送，直到其中一个端点关闭连接。套接字与主机地址和端口地址相关联。主机地址就是客户端或服务器程序所在的主机的IP地址。端口地址是指客户端或服务器程序使用的主机的通信端口。<br>在客户端和服务器中，分别创建独立的Socket，并通过Socket的属性，将两个Socket进行连接，这样，客户端和服务器通过套接字所建立的连接使用输入输出流进行通信。<br>TCP/IP套接字是最可靠的双向流协议，使用TCP/IP可以发送任意数量的数据。<br>实际上，套接字只是计算机上已编号的端口。如果发送方和接收方计算机确定好端口，他们就可以通信了。<h1 id="TCP-IP通信连接的简单过程："><a href="#TCP-IP通信连接的简单过程：" class="headerlink" title="TCP/IP通信连接的简单过程："></a>TCP/IP通信连接的简单过程：</h1>位于A计算机上的TCP/IP软件向B计算机发送包含端口号的消息，B计算机的TCP/IP软件接收该消息，并进行检查，查看是否有它知道的程序正在该端口上接收消息。如果有，他就将该消息交给这个程序。<br>要使程序有效地运行，就必须有一个客户端和一个服务器。<h1 id="通过Socket的编程顺序："><a href="#通过Socket的编程顺序：" class="headerlink" title="通过Socket的编程顺序："></a>通过Socket的编程顺序：</h1></li><li>创建服务器ServerSocket，在创建时，定义ServerSocket的监听端口(在这个端口接收客户端发来的消息)。</li><li>ServerSocket调用accept()方法，使之处于阻塞状态。</li><li>创建客户端Socket，并设置服务器的IP及端口。</li><li>客户端发出连接请求，建立连接。</li><li>分别取得服务器和客户端Socket的InputStream和OutputStream。</li><li>利用Socket和ServerSocket进行数据传输。</li><li>关闭流及Socket。<h1 id="单项通讯服务器："><a href="#单项通讯服务器：" class="headerlink" title="单项通讯服务器："></a>单项通讯服务器：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务器：</span></span><br><span class="line"><span class="comment"> * 1.指定端口，使用ServerSocket创建服务器</span></span><br><span class="line"><span class="comment"> * 2.阻塞式等待链接 accept 返回一个Socket</span></span><br><span class="line"><span class="comment"> * 3.操作：输入输出流</span></span><br><span class="line"><span class="comment"> * 4.释放资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCP_Server</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"-------Server-------"</span>);</span><br><span class="line"><span class="comment">//1.指定端口，使用ServerSocket创建服务器</span></span><br><span class="line">ServerSocket SS=<span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line"><span class="comment">// 2.阻塞式等待链接 accept</span></span><br><span class="line">Socket Client=SS.accept();</span><br><span class="line">System.out.println(<span class="string">"客户端连接已建立"</span>);</span><br><span class="line"><span class="comment">// 3.操作：输入输出流</span></span><br><span class="line">DataInputStream dis=<span class="keyword">new</span> DataInputStream(Client.getInputStream());</span><br><span class="line">String st=dis.readUTF();</span><br><span class="line">System.out.println(st);</span><br><span class="line"><span class="comment">// 4.释放资源</span></span><br><span class="line">dis.close();</span><br><span class="line">Client.close();</span><br><span class="line">&#125;<span class="comment">//先启动服务器在启动客户端</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h2><blockquote><p>——-Server——-</p></blockquote><h1 id="单项通讯客户端："><a href="#单项通讯客户端：" class="headerlink" title="单项通讯客户端："></a>单项通讯客户端：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端：</span></span><br><span class="line"><span class="comment"> * 1.建立连接：使用Socket创建客户端：服务器地址和端口</span></span><br><span class="line"><span class="comment"> * 2.操作：输入输出流</span></span><br><span class="line"><span class="comment"> * 3.释放资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCP_Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"-------Client-------"</span>);</span><br><span class="line"><span class="comment">//1.建立连接：使用Socket创建客户端：服务器地址和端口</span></span><br><span class="line">Socket S=<span class="keyword">new</span> Socket(<span class="string">"localhost"</span>,<span class="number">6666</span>);</span><br><span class="line"><span class="comment">// 3.操作：输入输出流</span></span><br><span class="line">DataOutputStream out=<span class="keyword">new</span> DataOutputStream(S.getOutputStream());</span><br><span class="line">String st=<span class="string">"你好"</span>;</span><br><span class="line">out.writeUTF(st);</span><br><span class="line">out.flush();</span><br><span class="line"><span class="comment">// 4.释放资源</span></span><br><span class="line">out.close();</span><br><span class="line">S.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结果：-1"><a href="#结果：-1" class="headerlink" title="结果："></a>结果：</h2><blockquote><p>——-Server——-<br>客户端连接已建立<br>你好</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;TCP单向通讯&quot;&gt;&lt;a href=&quot;#TCP单向通讯&quot; class=&quot;headerlink&quot; title=&quot;TCP单向通讯&quot;&gt;&lt;/a&gt;TCP单向通讯&lt;/h1&gt;&lt;p&gt;在网络通讯中，第一次主动发起通讯的程序被称作客户端(Client)程序，简称客户端，而在第一次通讯中等待连接的程序被称作服务器端(Server)程序，简称服务器。一旦通讯建立，则客户端和服务器端完全一样，没有本质的区别。
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="网络编程" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>UDP通讯实现</title>
    <link href="http://yoursite.com/2019/08/14/UDP%E9%80%9A%E8%AE%AF%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/08/14/UDP通讯实现/</id>
    <published>2019-08-14T12:52:49.000Z</published>
    <updated>2019-08-14T13:17:50.274Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UDP通讯实现"><a href="#UDP通讯实现" class="headerlink" title="UDP通讯实现"></a>UDP通讯实现</h1><p>简单实现UDP网络编程。<a id="more"></a></p><h1 id="DatagramSocket：用于发送或接收数据报包"><a href="#DatagramSocket：用于发送或接收数据报包" class="headerlink" title="DatagramSocket：用于发送或接收数据报包"></a>DatagramSocket：用于发送或接收数据报包</h1><p>当服务器要向客户端发送数据时，需要在服务器端产生一个DatagramSocket对象，在客户端产生一个DatagramSocket对象。服务器端的DatagramSocket将DatagramPacket发送到网络上，然后被客户端的DatagramSocket接收。</p><p>DatagramSocket有两种常用的构造函数。一种是无需任何参数的，常用于客户端;另一种需要指定端口，常用于服务器端。如下所示：</p><p>DatagramSocket() ：构造数据报套接字并将其绑定到本地主机上任何可用的端口。</p><p>DatagramSocket(int port) ：创建数据报套接字并将其绑定到本地主机上的指定端口。</p><h2 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h2><p>send(DatagramPacket p) ：从此套接字发送数据报包。</p><p>receive(DatagramPacket p) ：从此套接字接收数据报包。</p><p>close() ：关闭此数据报套接字。</p><h1 id="DatagramPacket：数据容器-封包-的作用"><a href="#DatagramPacket：数据容器-封包-的作用" class="headerlink" title="DatagramPacket：数据容器(封包)的作用"></a>DatagramPacket：数据容器(封包)的作用</h1><p>此类表示数据报包。 数据报包用来实现封包的功能。</p><h2 id="常用方法：-1"><a href="#常用方法：-1" class="headerlink" title="常用方法："></a>常用方法：</h2><p>DatagramPacket(byte[] buf, int length) ：构造数据报包，用来接收长度为 length 的数据包。</p><p>DatagramPacket(byte[] buf, int length, InetAddress address, int port) ：构造数据报包，用来将长度为 length 的包发送到指定主机上的指定端口号。</p><p>getAddress() ：获取发送或接收方计算机的IP地址，此数据报将要发往该机器或者是从该机器接收到的。</p><p>getData() ：获取发送或接收的数据。</p><p>setData(byte[] buf) ：设置发送的数据。</p><h1 id="UDP通信编程基本步骤："><a href="#UDP通信编程基本步骤：" class="headerlink" title="UDP通信编程基本步骤："></a>UDP通信编程基本步骤：</h1><ol><li><p>创建客户端的DatagramSocket，创建时，定义客户端的监听端口。</p></li><li><p>创建服务器端的DatagramSocket，创建时，定义服务器端的监听端口。</p></li><li><p>在服务器端定义DatagramPacket对象，封装待发送的数据包。</p></li><li><p>客户端将数据报包发送出去。</p></li><li><p>服务器端接收数据报包。</p><h1 id="UDP客户端："><a href="#UDP客户端：" class="headerlink" title="UDP客户端："></a>UDP客户端：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDP_Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">byte</span>[] b = <span class="string">"你好"</span>.getBytes();</span><br><span class="line">        <span class="comment">//必须告诉数据报包要发到哪台计算机的哪个端口，发送的数据以及数据的长度</span></span><br><span class="line">        DatagramPacket d = <span class="keyword">new</span> DatagramPacket(b,b.length,<span class="keyword">new</span> </span><br><span class="line">        InetSocketAddress(<span class="string">"localhost"</span>,<span class="number">7777</span>));</span><br><span class="line">        <span class="comment">//创建数据报套接字：指定发送信息的端口</span></span><br><span class="line">        DatagramSocket ds = <span class="keyword">new</span> DatagramSocket(<span class="number">6000</span>);</span><br><span class="line">        <span class="comment">//发送数据报包</span></span><br><span class="line">        ds.send(d);</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        ds.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="UDP服务器端："><a href="#UDP服务器端：" class="headerlink" title="UDP服务器端："></a>UDP服务器端：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDP_Test2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//创建数据报套接字：指定接收信息的端口</span></span><br><span class="line">        DatagramSocket d = <span class="keyword">new</span> DatagramSocket(<span class="number">7777</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">//创建数据报包，指定要接收的数据的缓存位置和长度</span></span><br><span class="line">        DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(b, b.length);</span><br><span class="line">        <span class="comment">//接收客户端发送的数据报</span></span><br><span class="line">        d.receive(dp); <span class="comment">// 阻塞式方法</span></span><br><span class="line">        <span class="comment">//dp.getLength()返回实际收到的数据的字节数</span></span><br><span class="line">        String string = <span class="keyword">new</span> String(dp.getData(), <span class="number">0</span>, dp.getLength());</span><br><span class="line">        System.out.println(string);</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        d.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="UDP基本数据类型传递客户端："><a href="#UDP基本数据类型传递客户端：" class="headerlink" title="UDP基本数据类型传递客户端："></a>UDP基本数据类型传递客户端：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> n = <span class="number">2000L</span>;</span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(bos);</span><br><span class="line">        dos.writeLong(n);</span><br><span class="line">        <span class="comment">//获取字节数组流中的字节数组（我们要发送的数据）</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = bos.toByteArray();</span><br><span class="line">        <span class="comment">//必须告诉数据报包要发到哪台计算机的哪个端口，发送的数据以及数据的长度</span></span><br><span class="line">        DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(b,b.length,<span class="keyword">new</span>   </span><br><span class="line">                                             InetSocketAddress(<span class="string">"localhost"</span>,<span class="number">8999</span>));</span><br><span class="line">        <span class="comment">//创建数据报套接字：指定发送信息的端口</span></span><br><span class="line">        DatagramSocket ds = <span class="keyword">new</span> DatagramSocket(<span class="number">9000</span>);</span><br><span class="line">        <span class="comment">//发送数据报包</span></span><br><span class="line">        ds.send(dp);</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        dos.close();</span><br><span class="line">        bos.close();</span><br><span class="line">        ds.close();</span><br><span class="line">        <span class="comment">//来源于尚学堂</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="UDP基本数据类型传递服务器端："><a href="#UDP基本数据类型传递服务器端：" class="headerlink" title="UDP基本数据类型传递服务器端："></a>UDP基本数据类型传递服务器端：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建数据报套接字：指定接收信息的端口</span></span><br><span class="line">        DatagramSocket ds = <span class="keyword">new</span> DatagramSocket(<span class="number">8999</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">//创建数据报包，指定要接收的数据的缓存位置和长度</span></span><br><span class="line">        DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(b, b.length);</span><br><span class="line">        <span class="comment">//接收客户端发送的数据报</span></span><br><span class="line">        ds.receive(dp); <span class="comment">// 阻塞式方法</span></span><br><span class="line">        <span class="comment">//dp.getData():获取客户端发送的数据，返回值是一个字节数组</span></span><br><span class="line">        ByteArrayInputStream bis = <span class="keyword">new</span> ByteArrayInputStream(dp.getData());</span><br><span class="line">        DataInputStream dis = <span class="keyword">new</span> DataInputStream(bis);</span><br><span class="line">        System.out.println(dis.readLong());</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        dis.close();</span><br><span class="line">        bis.close();</span><br><span class="line">        ds.close();</span><br><span class="line"><span class="comment">//来源于尚学堂</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;UDP通讯实现&quot;&gt;&lt;a href=&quot;#UDP通讯实现&quot; class=&quot;headerlink&quot; title=&quot;UDP通讯实现&quot;&gt;&lt;/a&gt;UDP通讯实现&lt;/h1&gt;&lt;p&gt;简单实现UDP网络编程。
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="网络编程" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>IP和URL</title>
    <link href="http://yoursite.com/2019/08/14/IP%E5%92%8CURL/"/>
    <id>http://yoursite.com/2019/08/14/IP和URL/</id>
    <published>2019-08-14T12:46:52.000Z</published>
    <updated>2019-08-14T12:52:12.818Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IP和URL"><a href="#IP和URL" class="headerlink" title="IP和URL"></a>IP和URL</h1><p>用Java简单实现获取IP地址和名称，URL的一些东西。<a id="more"></a></p><h1 id="获取IP-名称："><a href="#获取IP-名称：" class="headerlink" title="获取IP|名称："></a>获取IP|名称：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.getLocalHost：本机地址</span></span><br><span class="line"><span class="comment"> * 2.getByName：根据域名DNS解析IP</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ip_Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">InetAddress add=InetAddress.getLocalHost();</span><br><span class="line"><span class="comment">//本机地址</span></span><br><span class="line">System.out.println(add.getHostAddress());</span><br><span class="line"><span class="comment">//本机名称</span></span><br><span class="line">System.out.println(add.getHostName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="URL"><a href="#URL" class="headerlink" title="URL:"></a>URL:</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * URL:统一资源定位符</span></span><br><span class="line"><span class="comment"> * 1.协议</span></span><br><span class="line"><span class="comment"> * 2.域名、计算机</span></span><br><span class="line"><span class="comment"> * 3.端口：80(默认)</span></span><br><span class="line"><span class="comment"> * 4.请求资源</span></span><br><span class="line"><span class="comment"> * http://www.baidu.com:80/index.html?uname=xxx&amp;age=20#a</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URL_Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MalformedURLException </span>&#123;</span><br><span class="line">URL u=<span class="keyword">new</span> URL(<span class="string">"http://www.baidu.com:80/index.html?uname=xxx&amp;age=20#a"</span>);</span><br><span class="line"><span class="comment">//获取协议</span></span><br><span class="line">System.out.println(<span class="string">"协议："</span>+u.getProtocol());</span><br><span class="line"><span class="comment">//获取域名或IP</span></span><br><span class="line">System.out.println(<span class="string">"域名|IP："</span>+u.getHost());</span><br><span class="line"><span class="comment">//获取端口</span></span><br><span class="line">System.out.println(<span class="string">"端口："</span>+u.getPort());</span><br><span class="line"><span class="comment">//请求资源</span></span><br><span class="line">System.out.println(<span class="string">"请求资源："</span>+u.getPath());</span><br><span class="line">System.out.println(<span class="string">"请求资源："</span>+u.getFile());</span><br><span class="line"><span class="comment">//获取参数</span></span><br><span class="line">System.out.println(<span class="string">"参数："</span>+u.getQuery());</span><br><span class="line"><span class="comment">//获取锚点</span></span><br><span class="line">System.out.println(<span class="string">"锚点："</span>+u.getRef());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;IP和URL&quot;&gt;&lt;a href=&quot;#IP和URL&quot; class=&quot;headerlink&quot; title=&quot;IP和URL&quot;&gt;&lt;/a&gt;IP和URL&lt;/h1&gt;&lt;p&gt;用Java简单实现获取IP地址和名称，URL的一些东西。
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="网络编程" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>DCL单例模式</title>
    <link href="http://yoursite.com/2019/08/13/DCL%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/13/DCL单例模式/</id>
    <published>2019-08-13T06:11:24.000Z</published>
    <updated>2019-08-13T06:19:55.322Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DCL单例模式"><a href="#DCL单例模式" class="headerlink" title="DCL单例模式"></a>DCL单例模式</h1><p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式，这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。<a id="more"></a></p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DCL单例模式：多线程环境下只存在一个对象。</span></span><br><span class="line"><span class="comment"> * 1.私有构造体：外部无法new对象</span></span><br><span class="line"><span class="comment"> * 2.私有静态属性：存储对象地址</span></span><br><span class="line"><span class="comment"> * 3.公共的静态方法：获取属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton_pattern</span> </span>&#123;</span><br><span class="line"><span class="comment">//2.私有静态属性：存储对象地址</span></span><br><span class="line"><span class="comment">//没有volatile其他线程可能访问没有初始化的对象</span></span><br><span class="line"><span class="keyword">private</span>  <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton_pattern Sp;</span><br><span class="line"><span class="comment">//1.私有构造体：外部无法new对象</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton_pattern</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.公共的静态方法：获取属性</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton_pattern <span class="title">getSp</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//double checking</span></span><br><span class="line"><span class="keyword">if</span>(Sp==<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">synchronized</span>(Singleton_pattern.class) &#123;</span><br><span class="line"><span class="keyword">if</span>(Sp==<span class="keyword">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">Sp=<span class="keyword">new</span> Singleton_pattern();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Sp; <span class="comment">//不加volatile可能造成指令重排</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Thread t=<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">System.out.println(Singleton_pattern.getSp());</span><br><span class="line">&#125;) ;</span><br><span class="line">t.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;DCL单例模式&quot;&gt;&lt;a href=&quot;#DCL单例模式&quot; class=&quot;headerlink&quot; title=&quot;DCL单例模式&quot;&gt;&lt;/a&gt;DCL单例模式&lt;/h1&gt;&lt;p&gt;单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式，这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。
    
    </summary>
    
      <category term="多线程" scheme="http://yoursite.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="单例模式" scheme="http://yoursite.com/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>生产者/消费者模式（二）</title>
    <link href="http://yoursite.com/2019/08/10/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/10/生产者消费者模式（二）/</id>
    <published>2019-08-10T11:23:21.000Z</published>
    <updated>2019-08-10T11:37:49.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="生产者-消费者模式"><a href="#生产者-消费者模式" class="headerlink" title="生产者/消费者模式"></a>生产者/消费者模式</h1><p>第二种方法,信号灯法<a id="more"></a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者模式：信号灯法。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer_Model2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Shoping s=<span class="keyword">new</span> Shoping();</span><br><span class="line">Warehouse1 wa =<span class="keyword">new</span> Warehouse1(s);</span><br><span class="line">people pe= <span class="keyword">new</span> people(s);</span><br><span class="line">wa.start();</span><br><span class="line">pe.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生产商</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Warehouse1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Shoping shop;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Warehouse1</span><span class="params">(Shoping shop)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.shop = shop;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"---------------------"</span>);</span><br><span class="line">System.out.println(<span class="string">"生产第"</span>+(i+<span class="number">1</span>)+<span class="string">"个产品"</span>);</span><br><span class="line">shop.put(<span class="keyword">new</span> Wood(i));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">people</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Shoping shop;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">people</span><span class="params">(Shoping shop)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.shop = shop;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"消费第"</span>+(shop.take().getId()+<span class="number">1</span>)+<span class="string">"个产品"</span>);</span><br><span class="line">System.out.println(<span class="string">"---------------------"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中间商</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shoping</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Wood []i=<span class="keyword">new</span> Wood[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> flag=<span class="keyword">true</span>;</span><br><span class="line"><span class="comment">//放入数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span>  <span class="keyword">void</span> <span class="title">put</span><span class="params">(Wood wood)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.wait();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">i[count]=wood;</span><br><span class="line">count++;</span><br><span class="line">flag=<span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">this</span>.notifyAll();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取出数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Wood <span class="title">take</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(flag) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.wait();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">count--;</span><br><span class="line">Wood b=i[count];</span><br><span class="line">flag=<span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">this</span>.notifyAll();</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//商品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wood</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Wood</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="线程并发协作-也叫线程通信-，通常用于生产者-消费者模式，情景如下："><a href="#线程并发协作-也叫线程通信-，通常用于生产者-消费者模式，情景如下：" class="headerlink" title="线程并发协作(也叫线程通信)，通常用于生产者/消费者模式，情景如下："></a>线程并发协作(也叫线程通信)，通常用于生产者/消费者模式，情景如下：</h2><h3 id="1-生产者和消费者共享同一个资源，并且生产者和消费者之间相互依赖，互为条件。"><a href="#1-生产者和消费者共享同一个资源，并且生产者和消费者之间相互依赖，互为条件。" class="headerlink" title="1. 生产者和消费者共享同一个资源，并且生产者和消费者之间相互依赖，互为条件。"></a>1. 生产者和消费者共享同一个资源，并且生产者和消费者之间相互依赖，互为条件。</h3><h3 id="2-对于生产者，没有生产产品之前，消费者要进入等待状态。而生产了产品之后，又需要马上通知消费者消费。"><a href="#2-对于生产者，没有生产产品之前，消费者要进入等待状态。而生产了产品之后，又需要马上通知消费者消费。" class="headerlink" title="2. 对于生产者，没有生产产品之前，消费者要进入等待状态。而生产了产品之后，又需要马上通知消费者消费。"></a>2. 对于生产者，没有生产产品之前，消费者要进入等待状态。而生产了产品之后，又需要马上通知消费者消费。</h3><h3 id="3-对于消费者，在消费之后，要通知生产者已经消费结束，需要继续生产新产品以供消费。"><a href="#3-对于消费者，在消费之后，要通知生产者已经消费结束，需要继续生产新产品以供消费。" class="headerlink" title="3. 对于消费者，在消费之后，要通知生产者已经消费结束，需要继续生产新产品以供消费。"></a>3. 对于消费者，在消费之后，要通知生产者已经消费结束，需要继续生产新产品以供消费。</h3><h3 id="4-在生产者消费者问题中，仅有synchronized是不够的。"><a href="#4-在生产者消费者问题中，仅有synchronized是不够的。" class="headerlink" title="4. 在生产者消费者问题中，仅有synchronized是不够的。"></a>4. 在生产者消费者问题中，仅有synchronized是不够的。</h3><h4 id="synchronized可阻止并发更新同一个共享资源，实现了同步"><a href="#synchronized可阻止并发更新同一个共享资源，实现了同步" class="headerlink" title="synchronized可阻止并发更新同一个共享资源，实现了同步;"></a>synchronized可阻止并发更新同一个共享资源，实现了同步;</h4><h4 id="synchronized不能用来实现不同线程之间的消息传递-通信-。"><a href="#synchronized不能用来实现不同线程之间的消息传递-通信-。" class="headerlink" title="synchronized不能用来实现不同线程之间的消息传递(通信)。"></a>synchronized不能用来实现不同线程之间的消息传递(通信)。</h4><h3 id="5-以上方法均是java-lang-Object类的方法"><a href="#5-以上方法均是java-lang-Object类的方法" class="headerlink" title="5. 以上方法均是java.lang.Object类的方法;"></a>5. 以上方法均是java.lang.Object类的方法;</h3><p>都只能在同步方法或者同步代码块中使用，否则会抛出异常。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;生产者-消费者模式&quot;&gt;&lt;a href=&quot;#生产者-消费者模式&quot; class=&quot;headerlink&quot; title=&quot;生产者/消费者模式&quot;&gt;&lt;/a&gt;生产者/消费者模式&lt;/h1&gt;&lt;p&gt;第二种方法,信号灯法
    
    </summary>
    
      <category term="多线程" scheme="http://yoursite.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="生产者/消费者模式" scheme="http://yoursite.com/tags/%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>生产者/消费者模式（一）</title>
    <link href="http://yoursite.com/2019/08/10/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2019/08/10/生产者消费者模式（一）/</id>
    <published>2019-08-10T05:27:02.000Z</published>
    <updated>2019-08-10T05:39:49.254Z</updated>
    
    <content type="html"><![CDATA[<h1 id="生产者-消费者模式"><a href="#生产者-消费者模式" class="headerlink" title="生产者/消费者模式"></a>生产者/消费者模式</h1><p> 多线程环境下，我们经常需要多个线程的并发和协作。这个时候，就需要了解一个重要的多线程并发协作模型“生产者/消费者模式”。<a id="more"></a></p><h1 id="什么是生产者"><a href="#什么是生产者" class="headerlink" title="什么是生产者?"></a>什么是生产者?</h1><p>  生产者指的是负责生产数据的模块(这里模块可能是：方法、对象、线程、进程)。</p><h1 id="什么是消费者"><a href="#什么是消费者" class="headerlink" title="什么是消费者?"></a>什么是消费者?</h1><p>  消费者指的是负责处理数据的模块(这里模块可能是：方法、对象、线程、进程)。</p><h1 id="什么是缓冲区"><a href="#什么是缓冲区" class="headerlink" title="什么是缓冲区?"></a>什么是缓冲区?</h1><p>  消费者不能直接使用生产者的数据，它们之间有个“缓冲区”。生产者将生产好的数据放入“缓冲区”，消费者从“缓冲区”拿要处理的数据。</p><h1 id="实现线程的并发协作"><a href="#实现线程的并发协作" class="headerlink" title="实现线程的并发协作"></a>实现线程的并发协作</h1><p>  有了缓冲区以后，生产者线程只需要往缓冲区里面放置数据，而不需要管消费者消费的情况;同样，消费者只需要从缓冲区拿数据处理即可，也不需要管生产者生产的情况。 这样，就从逻辑上实现了“生产者线程”和“消费者线程”的分离。</p><h1 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者/消费者模式：管程法。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer_Model</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Business bus=<span class="keyword">new</span> Business();</span><br><span class="line">Warehouse wa=<span class="keyword">new</span> Warehouse(bus);</span><br><span class="line">Thread th=<span class="keyword">new</span> Thread(wa);</span><br><span class="line">th.start();</span><br><span class="line">Consumer wb=<span class="keyword">new</span> Consumer(bus);</span><br><span class="line">wb.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//厂家</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Warehouse</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Business bus;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Warehouse</span><span class="params">(Business bus)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.bus = bus;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 生产</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">50</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"---------------------"</span>);</span><br><span class="line">System.out.println(<span class="string">"生产第"</span>+(i+<span class="number">1</span>)+<span class="string">"个产品"</span>);</span><br><span class="line">bus.put(<span class="keyword">new</span> Commodity(i));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Business bus;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(Business bus)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.bus = bus;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 消费</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">50</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"消费第"</span>+(bus.take().id+<span class="number">1</span>)+<span class="string">"个产品"</span>);</span><br><span class="line">System.out.println(<span class="string">"---------------------"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中间商</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Business</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Commodity[] con=<span class="keyword">new</span> Commodity[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//存放数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Commodity  co)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i==con.length) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.wait();</span><br><span class="line">System.out.println(<span class="string">"没有位置停止生产"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">con[i]=co;</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">this</span>.notifyAll();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取出数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Commodity <span class="title">take</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.wait();<span class="comment">//线程阻塞</span></span><br><span class="line">System.out.println(<span class="string">"没有商品停止消费"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">i--;</span><br><span class="line">Commodity cob=con[i];</span><br><span class="line"><span class="keyword">this</span>.notifyAll();</span><br><span class="line"><span class="keyword">return</span> cob;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//商品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Commodity</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Commodity</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;生产者-消费者模式&quot;&gt;&lt;a href=&quot;#生产者-消费者模式&quot; class=&quot;headerlink&quot; title=&quot;生产者/消费者模式&quot;&gt;&lt;/a&gt;生产者/消费者模式&lt;/h1&gt;&lt;p&gt; 多线程环境下，我们经常需要多个线程的并发和协作。这个时候，就需要了解一个重要的多线程并发协作模型“生产者/消费者模式”。
    
    </summary>
    
      <category term="多线程" scheme="http://yoursite.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="生产者/消费者模式" scheme="http://yoursite.com/tags/%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>电影院购票系统</title>
    <link href="http://yoursite.com/2019/08/06/%E7%94%B5%E5%BD%B1%E9%99%A2%E8%B4%AD%E7%A5%A8%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2019/08/06/电影院购票系统/</id>
    <published>2019-08-06T12:32:22.000Z</published>
    <updated>2019-08-06T12:37:08.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="电影院购票系统"><a href="#电影院购票系统" class="headerlink" title="电影院购票系统"></a>电影院购票系统</h1><p>利用Java多线程实现电影院购票系统。<a id="more"></a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cinema_Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">List&lt;Integer&gt; list =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="number">1</span>);list.add(<span class="number">4</span>);list.add(<span class="number">6</span>);list.add(<span class="number">7</span>);list.add(<span class="number">8</span>);list.add(<span class="number">2</span>);list.add(<span class="number">3</span>);</span><br><span class="line">List&lt;Integer&gt; Min =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Min.add(<span class="number">3</span>);Min.add(<span class="number">6</span>);Min.add(<span class="number">7</span>);</span><br><span class="line">List&lt;Integer&gt; Wang =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Wang.add(<span class="number">6</span>);Wang.add(<span class="number">10</span>);Wang.add(<span class="number">7</span>);</span><br><span class="line">Cinema c=<span class="keyword">new</span> Cinema(list,<span class="string">"万达"</span>);</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> User(Min,c),<span class="string">"小明"</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> User(Wang,c),<span class="string">"老王"</span>).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//电影院</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cinema</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> List&lt;Integer&gt; Number;</span><br><span class="line">String Name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Cinema</span><span class="params">(List&lt;Integer&gt; number, String name)</span> </span>&#123;</span><br><span class="line">Number = number;</span><br><span class="line">Name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//买票</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Choice</span><span class="params">(List&lt;Integer&gt; Position)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"可用位置："</span>+Number);</span><br><span class="line">List&lt;Integer&gt; list =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.addAll(Number);</span><br><span class="line">list.removeAll(Position);</span><br><span class="line"><span class="comment">//判断大小</span></span><br><span class="line"><span class="keyword">if</span>(Number.size()-Position.size()!=list.size())</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"> Number=list;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用户</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> List&lt;Integer&gt; Position;</span><br><span class="line">Cinema C;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(List&lt;Integer&gt; position, Cinema c)</span> </span>&#123;</span><br><span class="line">Position = position;</span><br><span class="line">C = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(C) &#123;</span><br><span class="line"><span class="keyword">boolean</span> flag=C.Choice(Position);</span><br><span class="line"><span class="keyword">if</span>(flag) &#123;</span><br><span class="line">System.out.println(<span class="string">"出票成功"</span>+Thread.currentThread().getName()+<span class="string">"的位置是："</span>+Position);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">System.out.println(<span class="string">"你要的位置是："</span>+Position+<span class="string">"\n"</span>+<span class="string">"出票失败，没有位置"</span>);</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">//同步锁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>可用位置：[1, 4, 6, 7, 8, 2, 3]<br>出票成功小明的位置是：[3, 6, 7]<br>可用位置：[1, 4, 8, 2]<br>你要的位置是：[6, 10, 7]<br>出票失败，没有位置</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;电影院购票系统&quot;&gt;&lt;a href=&quot;#电影院购票系统&quot; class=&quot;headerlink&quot; title=&quot;电影院购票系统&quot;&gt;&lt;/a&gt;电影院购票系统&lt;/h1&gt;&lt;p&gt;利用Java多线程实现电影院购票系统。
    
    </summary>
    
      <category term="多线程" scheme="http://yoursite.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>实现线程同步</title>
    <link href="http://yoursite.com/2019/08/05/%E5%AE%9E%E7%8E%B0%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/"/>
    <id>http://yoursite.com/2019/08/05/实现线程同步/</id>
    <published>2019-08-05T15:05:03.000Z</published>
    <updated>2019-08-05T15:18:01.836Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h1><p>  由于同一进程的多个线程共享同一块存储空间，在带来方便的同时，也带来了访问冲突的问题。Java语言提供了专门机制以解决这种冲突，有效避免了同一个数据对象被多个线程同时访问造成的这种问题。<br>由于我们可以通过 private 关键字来保证数据对象只能被方法访问，所以我们只需针对方法提出一套机制，这套机制就是synchronized关键字，它包括两种用法：synchronized 方法和 synchronized 块。<a id="more"></a></p><h1 id="synchronized-方法"><a href="#synchronized-方法" class="headerlink" title="synchronized 方法"></a>synchronized 方法</h1><p>通过在方法声明中加入 synchronized关键字来声明，语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">Test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ticket&lt;=<span class="number">0</span>) &#123;</span><br><span class="line"> flag=<span class="keyword">false</span>;</span><br><span class="line"> <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"---"</span>+ticket--);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>synchronized 方法控制对“对象的类成员变量”的访问：每个对象对应一把锁，每个 synchronized 方法都必须获得调用该方法的对象的锁方能执行，否则所属线程阻塞，方法一旦执行，就独占该锁，直到从该方法返回时才将锁释放，此后被阻塞的线程方能获得该锁，重新进入可执行状态。</p><h1 id="synchronized-块"><a href="#synchronized-块" class="headerlink" title="synchronized 块"></a>synchronized 块</h1><p> synchronized 方法的缺陷：若将一个大的方法声明为synchronized 将会大大影响效率。Java 为我们提供了更好的解决办法，那就是 synchronized 块。 块可以让我们精确地控制到具体的“成员变量”，缩小同步的范围，提高效率。synchronized 块：通过 synchronized关键字来声明synchronized 块，语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(ticket&lt;=<span class="number">0</span>) &#123;</span><br><span class="line"> flag=<span class="keyword">false</span>;</span><br><span class="line"> <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"---"</span>+ticket--);</span><br><span class="line">&#125; <span class="comment">//   同步块执行到此处</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="同步块性能分析"><a href="#同步块性能分析" class="headerlink" title="同步块性能分析"></a>同步块性能分析</h1><p>  在使用同步块的过程中，需要程序员根据事件应用来锁定资源，同步块锁大了效率低下，同步块锁小了无法保证线程安全。</p><h2 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Synchronized_Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">App12306 test =<span class="keyword">new</span> App12306();</span><br><span class="line"><span class="keyword">new</span> Thread(test,<span class="string">"黄牛"</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(test,<span class="string">"黑牛"</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(test,<span class="string">"白牛"</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(test,<span class="string">"灰牛"</span>).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App12306</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> ticket=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> flag=<span class="keyword">true</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">while</span>(flag) &#123;</span><br><span class="line">Test3(); <span class="comment">//  最优</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//同步块性能分析 </span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里没有考虑没有票的时候，都需要等待，浪费了时间。效率较低</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(ticket&lt;=<span class="number">0</span>) &#123;</span><br><span class="line"> flag=<span class="keyword">false</span>;</span><br><span class="line"> <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"---"</span>+ticket--);</span><br><span class="line">&#125; <span class="comment">//   同步块执行到此处</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//同步块 此方法错误</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此方法没有正确地锁住资源池。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ticket&lt;=<span class="number">0</span>) &#123;</span><br><span class="line"> flag=<span class="keyword">false</span>;</span><br><span class="line"> <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"---"</span>+ticket--);</span><br><span class="line">&#125; <span class="comment">//  同步块执行到此处</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//同步块 此方法最优</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此方法正确，效率高，一般被称为double checking</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ticket&lt;=<span class="number">0</span>) &#123;</span><br><span class="line"> flag=<span class="keyword">false</span>;</span><br><span class="line"> <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(ticket&lt;=<span class="number">0</span>) &#123;</span><br><span class="line"> flag=<span class="keyword">false</span>;</span><br><span class="line"> <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"---"</span>+ticket--);</span><br><span class="line">&#125; <span class="comment">//  同步块执行到此处</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//同步方法，不推荐使用！！</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">Test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ticket&lt;=<span class="number">0</span>) &#123;</span><br><span class="line"> flag=<span class="keyword">false</span>;</span><br><span class="line"> <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">"---"</span>+ticket--);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;线程同步&quot;&gt;&lt;a href=&quot;#线程同步&quot; class=&quot;headerlink&quot; title=&quot;线程同步&quot;&gt;&lt;/a&gt;线程同步&lt;/h1&gt;&lt;p&gt;  由于同一进程的多个线程共享同一块存储空间，在带来方便的同时，也带来了访问冲突的问题。Java语言提供了专门机制以解决这种冲突，有效避免了同一个数据对象被多个线程同时访问造成的这种问题。&lt;br&gt;由于我们可以通过 private 关键字来保证数据对象只能被方法访问，所以我们只需针对方法提出一套机制，这套机制就是synchronized关键字，它包括两种用法：synchronized 方法和 synchronized 块。
    
    </summary>
    
      <category term="多线程" scheme="http://yoursite.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="线程同步" scheme="http://yoursite.com/tags/%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>线程状态</title>
    <link href="http://yoursite.com/2019/08/05/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/"/>
    <id>http://yoursite.com/2019/08/05/线程状态/</id>
    <published>2019-08-05T02:44:41.000Z</published>
    <updated>2019-08-05T02:52:25.760Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h1><p>一个线程对象在它的生命周期内，需要经历5个状态。<a id="more"></a></p><h1 id="新生状态-New"><a href="#新生状态-New" class="headerlink" title="新生状态(New)"></a>新生状态(New)</h1><p>  用new关键字建立一个线程对象后，该线程对象就处于新生状态。处于新生状态的线程有自己的内存空间，通过调用start方法进入就绪状态。</p><h1 id="就绪状态-Runnable"><a href="#就绪状态-Runnable" class="headerlink" title="就绪状态(Runnable)"></a>就绪状态(Runnable)</h1><p>  处于就绪状态的线程已经具备了运行条件，但是还没有被分配到CPU，处于“线程就绪队列”，等待系统为其分配CPU。就绪状态并不是执行状态，当系统选定一个等待执行的Thread对象后，它就会进入执行状态。一旦获得CPU，线程就进入运行状态并自动调用自己的run方法。有4中原因会导致线程进入就绪状态：<br>      1. 新建线程：调用start()方法，进入就绪状态;<br>      2. 阻塞线程：阻塞解除，进入就绪状态;<br>      3. 运行线程：调用yield()方法，直接进入就绪状态;<br>      4. 运行线程：JVM将CPU资源从本线程切换到其他线程。</p><h1 id="运行状态-Running"><a href="#运行状态-Running" class="headerlink" title="运行状态(Running)"></a>运行状态(Running)</h1><p>在运行状态的线程执行自己run方法中的代码，直到调用其他方法而终止或等待某资源而阻塞或完成任务而死亡。如果在给定的时间片内没有执行结束，就会被系统给换下来回到就绪状态。也可能由于某些“导致阻塞的事件”而进入阻塞状态。</p><h1 id="阻塞状态-Blocked"><a href="#阻塞状态-Blocked" class="headerlink" title="阻塞状态(Blocked)"></a>阻塞状态(Blocked)</h1><p>阻塞指的是暂停一个线程的执行以等待某个条件发生(如某资源就绪)。有4种原因会导致阻塞：<br>      1. 执行sleep(int millsecond)方法，使当前线程休眠，进入阻塞状态。当指定的时间到了后，线程进入就绪状态。<br>      2. 执行wait()方法，使当前线程进入阻塞状态。当使用nofity()方法唤醒这个线程后，它进入就绪状态。<br>      3. 线程运行时，某个操作进入阻塞状态，比如执行IO流操作(read()/write()方法本身就是阻塞的方法)。只有当引起该操作阻塞的原因消失后，线程进入就绪状态。<br>      4. join()线程联合: 当某个线程等待另一个线程执行结束后，才能继续执行时，使用join()方法。</p><h1 id="死亡状态-Terminated"><a href="#死亡状态-Terminated" class="headerlink" title="死亡状态(Terminated)"></a>死亡状态(Terminated)</h1><p>死亡状态是线程生命周期中的最后一个阶段。线程死亡的原因有两个。一个是正常运行的线程完成了它run()方法内的全部工作; 另一个是线程被强制终止，如通过执行stop()或destroy()方法来终止一个线程(注：stop()/destroy()方法已经被JDK废弃，不推荐使用)。<br>当一个线程进入死亡状态以后，就不能再回到其它状态了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;线程状态&quot;&gt;&lt;a href=&quot;#线程状态&quot; class=&quot;headerlink&quot; title=&quot;线程状态&quot;&gt;&lt;/a&gt;线程状态&lt;/h1&gt;&lt;p&gt;一个线程对象在它的生命周期内，需要经历5个状态。
    
    </summary>
    
      <category term="多线程" scheme="http://yoursite.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>多线程实现</title>
    <link href="http://yoursite.com/2019/08/04/%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/08/04/线程实现/</id>
    <published>2019-08-04T01:33:59.000Z</published>
    <updated>2019-08-04T01:46:00.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p> 多线程是Java语言的重要特性，大量应用于网络编程、服务器端程序的开发，最常见的UI界面底层原理、操作系统底层原理都大量使用了多线程。我们可以流畅的点击软件或者游戏中的各种按钮，其实，底层就是多线程的应用。UI界面的主线程绘制界面，如果有一个耗时的操作发生则启动新的线程，完全不影响主线程的工作。当这个线程工作完毕后，再更新到主界面上。我们可以上百人、上千人、上万人同时访问某个网站，其实，也是基于网站服务器的多线程原理。如果没有多线程，服务器处理速度会极大降低。<a id="more"></a></p><h1 id="通过继承Thread类实现多线程"><a href="#通过继承Thread类实现多线程" class="headerlink" title="通过继承Thread类实现多线程"></a>通过继承Thread类实现多线程</h1><p> 继承Thread类实现多线程的步骤：<br>      1. 在Java中负责实现线程功能的类是java.lang.Thread 类。<br>      2. 可以通过创建 Thread的实例来创建新的线程。<br>      3. 每个线程都是通过某个特定的Thread对象所对应的方法run( )来完成其操作的，方法run( )称为线程体。<br>      4. 通过调用Thread类的start()方法来启动一个线程。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Study_01</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">System.out.println(<span class="string">"Sleep"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">System.out.println(<span class="string">"Study"</span>);</span><br><span class="line">Study_01 st=<span class="keyword">new</span> Study_01();</span><br><span class="line">st.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="缺点：Java不可以多继承。"><a href="#缺点：Java不可以多继承。" class="headerlink" title="缺点：Java不可以多继承。"></a>缺点：Java不可以多继承。</h3><h1 id="通过Runnable接口实现多线程"><a href="#通过Runnable接口实现多线程" class="headerlink" title="通过Runnable接口实现多线程"></a>通过Runnable接口实现多线程</h1><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Study_02</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Study_02 st= <span class="keyword">new</span> Study_02();</span><br><span class="line">Thread th=<span class="keyword">new</span> Thread(st);</span><br><span class="line">th.start();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">System.out.println(<span class="string">"eat"</span>);</span><br><span class="line"><span class="comment">//new Thread(new Study_02()).start(); 只使用一次线程</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">System.out.println(<span class="string">"Study"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>  推荐使用Runnable接口，即在实现Runnable接口的同时还可以继承某个类。所以实现Runnable接口的方式要通用一些。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h1&gt;&lt;p&gt; 多线程是Java语言的重要特性，大量应用于网络编程、服务器端程序的开发，最常见的UI界面底层原理、操作系统底层原理都大量使用了多线程。我们可以流畅的点击软件或者游戏中的各种按钮，其实，底层就是多线程的应用。UI界面的主线程绘制界面，如果有一个耗时的操作发生则启动新的线程，完全不影响主线程的工作。当这个线程工作完毕后，再更新到主界面上。我们可以上百人、上千人、上万人同时访问某个网站，其实，也是基于网站服务器的多线程原理。如果没有多线程，服务器处理速度会极大降低。
    
    </summary>
    
      <category term="多线程" scheme="http://yoursite.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Comparable接口测试</title>
    <link href="http://yoursite.com/2019/07/27/Comparable%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2019/07/27/Comparable接口测试/</id>
    <published>2019-07-27T09:26:45.000Z</published>
    <updated>2019-07-27T09:45:31.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Comparable接口测试"><a href="#Comparable接口测试" class="headerlink" title="Comparable接口测试"></a>Comparable接口测试</h1><p>在写某些程序的时候我们往往需要排序，特别是是对容器进行排序的时候，往往是很麻烦的，这时候我们就可以继承Comparable接口中的compareTo方法来进行排序。<a id="more"></a></p><h1 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">ComparableTest</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">ComparableTest</span>&gt;</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ComparableTest</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">int</span> age, String sex)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Map&lt;ComparableTest,String&gt; map=<span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">map.put(<span class="keyword">new</span> ComparableTest(<span class="number">35</span>,<span class="string">"张三"</span>,<span class="number">25</span>,<span class="string">"男"</span>),<span class="string">"123"</span>);</span><br><span class="line">map.put(<span class="keyword">new</span> ComparableTest(<span class="number">25</span>,<span class="string">"李四"</span>,<span class="number">20</span>,<span class="string">"男"</span>),<span class="string">"456"</span>);</span><br><span class="line">map.put(<span class="keyword">new</span> ComparableTest(<span class="number">12</span>,<span class="string">"王小花"</span>,<span class="number">18</span>,<span class="string">"女"</span>),<span class="string">"678"</span>);</span><br><span class="line">map.put(<span class="keyword">new</span> ComparableTest(<span class="number">12</span>,<span class="string">"李小四"</span>,<span class="number">14</span>,<span class="string">"男"</span>),<span class="string">"910"</span>);</span><br><span class="line"><span class="keyword">for</span>(ComparableTest key:map.keySet()) &#123;</span><br><span class="line">System.out.println(key+<span class="string">"---"</span>+map.get(key));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"id:"</span>+id+<span class="string">",name:"</span>+name+<span class="string">",age:"</span>+age+<span class="string">",sex:"</span>+sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(ComparableTest o)</span> </span>&#123;  <span class="comment">//负数：小于，0：等于，正数：大于</span></span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.id&gt;o.id)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.id&lt;o.id)</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.age&gt;o.age)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.age&lt;o.age)</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><blockquote><p>id:12,name:李小四,age:14,sex:男—910<br>id:12,name:王小花,age:18,sex:女—678<br>id:25,name:李四,age:20,sex:男—456<br>id:35,name:张三,age:25,sex:男—123</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Comparable接口测试&quot;&gt;&lt;a href=&quot;#Comparable接口测试&quot; class=&quot;headerlink&quot; title=&quot;Comparable接口测试&quot;&gt;&lt;/a&gt;Comparable接口测试&lt;/h1&gt;&lt;p&gt;在写某些程序的时候我们往往需要排序，特别是是对容器进行排序的时候，往往是很麻烦的，这时候我们就可以继承Comparable接口中的compareTo方法来进行排序。
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Comparable接口测试" scheme="http://yoursite.com/tags/Comparable%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>日历表</title>
    <link href="http://yoursite.com/2019/07/22/%E6%97%A5%E5%8E%86%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/07/22/日历表/</id>
    <published>2019-07-22T09:15:00.000Z</published>
    <updated>2019-07-22T09:21:15.528Z</updated>
    
    <content type="html"><![CDATA[<h1 id="日历表"><a href="#日历表" class="headerlink" title="日历表"></a>日历表</h1><p>  利用日期类写了一个日历表.<a id="more"></a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.GregorianCalendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalendarWatch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">"请输入日期（格式为：2000-1-1）："</span>);</span><br><span class="line">String s=sc.nextLine();</span><br><span class="line"><span class="comment">//日期类的使用</span></span><br><span class="line">Date d=<span class="keyword">new</span> Date();</span><br><span class="line">SimpleDateFormat sd=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">Calendar c=<span class="keyword">new</span> GregorianCalendar();</span><br><span class="line">d=sd.parse(s);</span><br><span class="line">System.out.println(d);</span><br><span class="line">c.setTime(d);</span><br><span class="line">System.out.println(<span class="string">"你输入了："</span>+s);</span><br><span class="line">System.out.print(<span class="string">"日\t一\t二\t三\t四\t五\t六\t"</span>);</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="keyword">int</span> Day=c.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">c.set(Calendar.DAY_OF_MONTH,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> MaxDay=c.getActualMaximum(Calendar.DATE);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;c.get(Calendar.DAY_OF_WEEK);i++) &#123;</span><br><span class="line">System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> b=<span class="number">1</span>;b&lt;=MaxDay;b++)&#123;</span><br><span class="line"><span class="keyword">if</span>(c.get(Calendar.DAY_OF_MONTH)==Day) &#123;</span><br><span class="line">System.out.print(c.get(Calendar.DAY_OF_MONTH)+<span class="string">"*"</span>+<span class="string">"\t"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">System.out.print(c.get(Calendar.DAY_OF_MONTH)+<span class="string">"\t"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(c.get(Calendar.DAY_OF_WEEK)==<span class="number">7</span>)</span><br><span class="line">System.out.println();</span><br><span class="line">c.add(Calendar.DAY_OF_MONTH, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>  月份的表示，一月是0，二月是1，以此类推，12月是11。 因为大多数人习惯于使用单词而不是使用数字来表示月份，这样程序也许更易读，父类Calendar使用常量来表示月份：JANUARY、FEBRUARY等等。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;日历表&quot;&gt;&lt;a href=&quot;#日历表&quot; class=&quot;headerlink&quot; title=&quot;日历表&quot;&gt;&lt;/a&gt;日历表&lt;/h1&gt;&lt;p&gt;  利用日期类写了一个日历表.
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="日历表" scheme="http://yoursite.com/tags/%E6%97%A5%E5%8E%86%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>包装类的缓存问题</title>
    <link href="http://yoursite.com/2019/07/20/%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/07/20/包装类的缓存问题/</id>
    <published>2019-07-20T12:55:56.000Z</published>
    <updated>2019-07-20T13:58:05.449Z</updated>
    
    <content type="html"><![CDATA[<h1 id="缓存问题"><a href="#缓存问题" class="headerlink" title="缓存问题"></a>缓存问题</h1><p>  缓存处理的原理为：如果数据在-128~127这个区间，那么在类加载时就已经为该区间的每个数值创建了对象，并将这256个对象存放到一个名为cache的数组中。每当自动装箱过程发生时(或者手动调用valueOf()时)，就会先判断数据是否在该区间，如果在则直接获取数组中对应的包装类对象的引用，如果不在该区间，则会通过new调用包装类的构造方法来创建对象。<a id="more"></a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>  这里用Integer包装类来进行演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里会进行自动装箱，JDK在1.5以后可以这样写</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Integer a = <span class="number">10</span>; <span class="comment">//Integer a = Integer.valueOf(10); </span></span><br><span class="line">Integer b = <span class="number">10</span>; <span class="comment">//Integer b = Integer.valueOf(10); </span></span><br><span class="line">System.out.println(a==b); <span class="comment">//输出 true</span></span><br><span class="line">Integer c = <span class="number">129</span>;</span><br><span class="line">Integer d = <span class="number">129</span>;</span><br><span class="line">System.out.println(c==d); <span class="comment">//输出false</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自动拆箱</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span> e = a;  <span class="comment">//int e = a.intValue(); int e =new Integer(a);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自动装箱代码"><a href="#自动装箱代码" class="headerlink" title="自动装箱代码"></a>自动装箱代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">            <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="自动拆箱代码"><a href="#自动拆箱代码" class="headerlink" title="自动拆箱代码"></a>自动拆箱代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">intValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="额外内容"><a href="#额外内容" class="headerlink" title="额外内容"></a>额外内容</h1><ol><li><p>JDK1.5以后，增加了自动装箱与拆箱功能。</p></li><li><p>自动装箱调用的是valueOf()方法，而不是new Integer()方法。</p></li><li><p>自动拆箱调用的xxxValue()方法。</p></li><li><p>包装类在自动装箱时为了提高效率，对于-128~127之间的值会进行缓存处理。超过范围后，对象之间不能再使用==进行数值的比较，而是使用equals方法。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;缓存问题&quot;&gt;&lt;a href=&quot;#缓存问题&quot; class=&quot;headerlink&quot; title=&quot;缓存问题&quot;&gt;&lt;/a&gt;缓存问题&lt;/h1&gt;&lt;p&gt;  缓存处理的原理为：如果数据在-128~127这个区间，那么在类加载时就已经为该区间的每个数值创建了对象，并将这256个对象存放到一个名为cache的数组中。每当自动装箱过程发生时(或者手动调用valueOf()时)，就会先判断数据是否在该区间，如果在则直接获取数组中对应的包装类对象的引用，如果不在该区间，则会通过new调用包装类的构造方法来创建对象。
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="包装类的缓存问题" scheme="http://yoursite.com/tags/%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
</feed>
